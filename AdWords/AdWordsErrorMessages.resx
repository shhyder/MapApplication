<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FailedToAddAdGroupsToSandbox" xml:space="preserve">
    <value>Could not add adgroups to sandbox account.</value>
    <comment>Used for SandboxSerializationException by AccountManager.SetAdGroups when an adgroup cannot be created in sandbox.</comment>
  </data>
  <data name="FailedToAddAdsToSandbox" xml:space="preserve">
    <value>Could not add ads to sandbox account.</value>
    <comment>Used for SandboxSerializationException by AccountManager.SetAds when an ad cannot be created in sandbox.</comment>
  </data>
  <data name="FailedToAddCampaignCriteriaToSandbox" xml:space="preserve">
    <value>Could not add campaign criteria to sandbox account.</value>
    <comment>Used for SandboxSerializationException by AccountManager.SetCampaignCriteria when a campaign criterion cannot be created in sandbox.</comment>
  </data>
  <data name="FailedToAddCampaignsToSandbox" xml:space="preserve">
    <value>Could not add campaigns to sandbox account.</value>
    <comment>Used for SandboxSerializationException by AccountManager.SetCampaigns when a campaign cannot be created in sandbox.</comment>
  </data>
  <data name="FailedToAddCampaignTargetsToSandbox" xml:space="preserve">
    <value>Could not add campaign targets to sandbox account.</value>
    <comment>Used for SandboxSerializationException by AccountManager.SetCampaignTargets when a campaign target cannot be created in sandbox.</comment>
  </data>
  <data name="FailedToAddCriteriaToSandbox" xml:space="preserve">
    <value>Could not add criteria to sandbox account.</value>
    <comment>Used for SandboxSerializationException by AccountManager.SetCriteria when a criterion cannot be created in sandbox.</comment>
  </data>
  <data name="InvalidStageForSoapMessage" xml:space="preserve">
    <value>Invalid stage for Soap message.</value>
    <comment>Used for ArgumentException by TraceExtension.ProcessMessage if message parameter has an invalid value for Stage field.</comment>
  </data>
  <data name="ReportGenerationFailed" xml:space="preserve">
    <value>Report generation failed.</value>
    <comment>Used by ReportUtilitiesGetReportXml when a report generation fails.</comment>
  </data>
  <data name="ReportIsInvalid" xml:space="preserve">
    <value>Report contents are invalid.</value>
    <comment>Used for ReportsException by ReportUtilities.DownloadReportToFile when a report is downloaded successfully, but its contents are invalid. Applies specifically to v201003 ReportDefinitionService.</comment>
  </data>
  <data name="SignatureIsOfWrongType" xml:space="preserve">
    <value>Signature should be a {0} instance.</value>
    <comment>Used for ArgumentException by AdWordsServiceFactory.CreateService and LegacyAdWordsServiceFactory if the signature is not of desired type.</comment>
  </data>
  <data name="Unknownv13SoapExceptionOccurred" xml:space="preserve">
    <value>Unknown error occurred while converting v13 SoapException. See innerException for the original SoapException.</value>
    <comment>Used for LegacyAdWordsApiException by LegacyAdWordsApiService.GetCustomException when it gets an error code which cannot be mapped to an existing list of error codes and corresponding exception classes.</comment>
  </data>
  <data name="AnApiExceptionOccurred" xml:space="preserve">
    <value>An API exception has occurred. See ApiException and InnerException fields for more details.</value>
    <comment>Used by AdWordsSoapClient while throwing AdWordsApiException.</comment>
  </data>
  <data name="ReportNumPollsExceeded" xml:space="preserve">
    <value>Report could not be downloaded after {0} polling attempts. Try requesting a report with lesser amount of data, increase the number of polling attempts, or use the asynchronous download methods.</value>
    <comment>Used by ReportUtilites when number of polling attempts exceeds MaxPollingAttempts.</comment>
  </data>
  <data name="FailedToSetAuthorizationHeader" xml:space="preserve">
    <value>Could not set AuthToken for outgoing API call. Please check if service.RequestHeader is not null.</value>
    <comment>Used by AdWordsSoapClient.MakeApiCall when setting authorization headers.</comment>
  </data>
  <data name="OAuthProviderCannotBeNull" xml:space="preserve">
    <value>OAuth provider cannot be null when selecting Authorization method as "OAuth".</value>
    <comment>Used by AdWordsSoapClient.MakeApiCall when setting authorization headers.</comment>
  </data>
</root>