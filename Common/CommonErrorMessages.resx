<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthTokenLoginFailed" xml:space="preserve">
    <value>AuthToken login failed. See ErrorCode for more details.</value>
    <comment>Used by AuthToken when login fails.</comment>
  </data>
  <data name="EmailCannotBeNull" xml:space="preserve">
    <value>Email cannot be null</value>
    <comment>Used by AuthTokenCache when an empty email is passed to it.</comment>
  </data>
  <data name="InvalidStageForSoapMessage" xml:space="preserve">
    <value>Invalid stage for Soap message.</value>
    <comment>Used for ArgumentException by TraceExtension.ProcessMessage if message parameter has an invalid value for Stage field.</comment>
  </data>
  <data name="MissingFactoryType" xml:space="preserve">
    <value>Could not locate factoryType field in Type {0}</value>
    <comment>Used for ArgumentException when AdsUser.RegisterServices cannot locate factoryType in a registered Service.</comment>
  </data>
  <data name="OAuthExtensionNotLoaded" xml:space="preserve">
    <value>Could not load an oauth extension class.</value>
  </data>
  <data name="PasswordCannotBeNull" xml:space="preserve">
    <value>Password cannot be null</value>
    <comment>Used by AuthTokenCache when an empty password is passed to it.</comment>
  </data>
  <data name="QuotesNotClosedInCsvLine" xml:space="preserve">
    <value>Quotes not closed in csv record.</value>
    <comment>Used for CsvException by CsvFile.SplitCsvLine if text parameter has an unclosed quote.</comment>
  </data>
  <data name="ServiceCannotBeNull" xml:space="preserve">
    <value>Service cannot be null</value>
    <comment>Used by AuthTokenCache when an empty service is passed to it.</comment>
  </data>
  <data name="SoapListenerExtensionNotLoaded" xml:space="preserve">
    <value>The SoapListenerExtension class is not loaded. The most possible cause for this error is that you haven't registered Google.Api.Ads.Common.Lib.SoapListenerExtension as a soap extension under configuration/system.web/webServices/soapExtensionTypes in your your App.config or Web.config. See the sample App.config for details on how to register soap extensions.</value>
    <comment>Thrown when SoapListenerExtension was not loaded as a soap extension from App.config.</comment>
  </data>
  <data name="SourceStreamIsNotReadable" xml:space="preserve">
    <value>Source stream is not readable.</value>
    <comment>Used for ArgumentException by MediaUtilities.CopyStream if source stream is not readable.</comment>
  </data>
  <data name="StartIndexShouldBeLessThanEndIndex" xml:space="preserve">
    <value>Start index should be less than end index.</value>
    <comment>Used for ArgumentException by ExtractAndAddItem if startIndex &gt; endIndex.</comment>
  </data>
  <data name="StringIndexOutOfBounds" xml:space="preserve">
    <value>This parameter should be greater than 0 and less than the length of text.</value>
    <comment>Used for ArgumentOutOfRangeException wherever string index is out of bounds.</comment>
  </data>
  <data name="TargetStreamIsNotWritable" xml:space="preserve">
    <value>Target stream is not writable.</value>
    <comment>Used for ArgumentException by MediaUtilities.CopyStream if target stream is not writable.</comment>
  </data>
  <data name="TextCannotBeNull" xml:space="preserve">
    <value>Text to split cannot be null.</value>
    <comment>Used for ArgumentNullException by CsvFile.SplitCsvLine for 'text' parameter.</comment>
  </data>
  <data name="UnregisteredServiceTypeRequested" xml:space="preserve">
    <value>Unregistered service type {0} was requested.</value>
    <comment>Used for InvalidCastException by AdsUser.GetService for serviceSignature parameter if an unregistered service type is requested.</comment>
  </data>
</root>