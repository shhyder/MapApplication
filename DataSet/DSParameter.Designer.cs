//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DSParameter")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSParameter : global::System.Data.DataSet {
        
        private Connotation_KeywordDataTable tableConnotation_Keyword;
        
        private Event_MarkerDataTable tableEvent_Marker;
        
        private KeywordDataTable tableKeyword;
        
        private Marker_ConnotationDataTable tableMarker_Connotation;
        
        private MarkerDataTable tableMarker;
        
        private AttributeDataTable tableAttribute;
        
        private Product_DistributorDataTable tableProduct_Distributor;
        
        private Product_Type_RelationshipDataTable tableProduct_Type_Relationship;
        
        private RelationshipDataTable tableRelationship;
        
        private CompanyDataTable tableCompany;
        
        private CategoryDataTable tableCategory;
        
        private Company_Product_TypeDataTable tableCompany_Product_Type;
        
        private Product_Type_AttributeDataTable tableProduct_Type_Attribute;
        
        private Product_AttributeDataTable tableProduct_Attribute;
        
        private Attribute_VariantDataTable tableAttribute_Variant;
        
        private ZipCodesDataTable tableZipCodes;
        
        private Activity_TypeDataTable tableActivity_Type;
        
        private Event_ItemDataTable tableEvent_Item;
        
        private EventDataTable tableEvent;
        
        private ProductDataTable tableProduct;
        
        private Secret_QuestionDataTable tableSecret_Question;
        
        private Product_TypeDataTable tableProduct_Type;
        
        private DistributorDataTable tableDistributor;
        
        private CustomerDataTable tableCustomer;
        
        private TrendDataTable tableTrend;
        
        private SourceDataTable tableSource;
        
        private Rank_TypeDataTable tableRank_Type;
        
        private Marker_TypeDataTable tableMarker_Type;
        
        private Count_TypeDataTable tableCount_Type;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSParameter() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSParameter(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Connotation_Keyword"] != null)) {
                    base.Tables.Add(new Connotation_KeywordDataTable(ds.Tables["Connotation_Keyword"]));
                }
                if ((ds.Tables["Event_Marker"] != null)) {
                    base.Tables.Add(new Event_MarkerDataTable(ds.Tables["Event_Marker"]));
                }
                if ((ds.Tables["Keyword"] != null)) {
                    base.Tables.Add(new KeywordDataTable(ds.Tables["Keyword"]));
                }
                if ((ds.Tables["Marker_Connotation"] != null)) {
                    base.Tables.Add(new Marker_ConnotationDataTable(ds.Tables["Marker_Connotation"]));
                }
                if ((ds.Tables["Marker"] != null)) {
                    base.Tables.Add(new MarkerDataTable(ds.Tables["Marker"]));
                }
                if ((ds.Tables["Attribute"] != null)) {
                    base.Tables.Add(new AttributeDataTable(ds.Tables["Attribute"]));
                }
                if ((ds.Tables["Product_Distributor"] != null)) {
                    base.Tables.Add(new Product_DistributorDataTable(ds.Tables["Product_Distributor"]));
                }
                if ((ds.Tables["Product_Type_Relationship"] != null)) {
                    base.Tables.Add(new Product_Type_RelationshipDataTable(ds.Tables["Product_Type_Relationship"]));
                }
                if ((ds.Tables["Relationship"] != null)) {
                    base.Tables.Add(new RelationshipDataTable(ds.Tables["Relationship"]));
                }
                if ((ds.Tables["Company"] != null)) {
                    base.Tables.Add(new CompanyDataTable(ds.Tables["Company"]));
                }
                if ((ds.Tables["Category"] != null)) {
                    base.Tables.Add(new CategoryDataTable(ds.Tables["Category"]));
                }
                if ((ds.Tables["Company_Product_Type"] != null)) {
                    base.Tables.Add(new Company_Product_TypeDataTable(ds.Tables["Company_Product_Type"]));
                }
                if ((ds.Tables["Product_Type_Attribute"] != null)) {
                    base.Tables.Add(new Product_Type_AttributeDataTable(ds.Tables["Product_Type_Attribute"]));
                }
                if ((ds.Tables["Product_Attribute"] != null)) {
                    base.Tables.Add(new Product_AttributeDataTable(ds.Tables["Product_Attribute"]));
                }
                if ((ds.Tables["Attribute_Variant"] != null)) {
                    base.Tables.Add(new Attribute_VariantDataTable(ds.Tables["Attribute_Variant"]));
                }
                if ((ds.Tables["ZipCodes"] != null)) {
                    base.Tables.Add(new ZipCodesDataTable(ds.Tables["ZipCodes"]));
                }
                if ((ds.Tables["Activity_Type"] != null)) {
                    base.Tables.Add(new Activity_TypeDataTable(ds.Tables["Activity_Type"]));
                }
                if ((ds.Tables["Event_Item"] != null)) {
                    base.Tables.Add(new Event_ItemDataTable(ds.Tables["Event_Item"]));
                }
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["Secret_Question"] != null)) {
                    base.Tables.Add(new Secret_QuestionDataTable(ds.Tables["Secret_Question"]));
                }
                if ((ds.Tables["Product_Type"] != null)) {
                    base.Tables.Add(new Product_TypeDataTable(ds.Tables["Product_Type"]));
                }
                if ((ds.Tables["Distributor"] != null)) {
                    base.Tables.Add(new DistributorDataTable(ds.Tables["Distributor"]));
                }
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["Trend"] != null)) {
                    base.Tables.Add(new TrendDataTable(ds.Tables["Trend"]));
                }
                if ((ds.Tables["Source"] != null)) {
                    base.Tables.Add(new SourceDataTable(ds.Tables["Source"]));
                }
                if ((ds.Tables["Rank_Type"] != null)) {
                    base.Tables.Add(new Rank_TypeDataTable(ds.Tables["Rank_Type"]));
                }
                if ((ds.Tables["Marker_Type"] != null)) {
                    base.Tables.Add(new Marker_TypeDataTable(ds.Tables["Marker_Type"]));
                }
                if ((ds.Tables["Count_Type"] != null)) {
                    base.Tables.Add(new Count_TypeDataTable(ds.Tables["Count_Type"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Connotation_KeywordDataTable Connotation_Keyword {
            get {
                return this.tableConnotation_Keyword;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Event_MarkerDataTable Event_Marker {
            get {
                return this.tableEvent_Marker;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeywordDataTable Keyword {
            get {
                return this.tableKeyword;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Marker_ConnotationDataTable Marker_Connotation {
            get {
                return this.tableMarker_Connotation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MarkerDataTable Marker {
            get {
                return this.tableMarker;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AttributeDataTable Attribute {
            get {
                return this.tableAttribute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Product_DistributorDataTable Product_Distributor {
            get {
                return this.tableProduct_Distributor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Product_Type_RelationshipDataTable Product_Type_Relationship {
            get {
                return this.tableProduct_Type_Relationship;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RelationshipDataTable Relationship {
            get {
                return this.tableRelationship;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompanyDataTable Company {
            get {
                return this.tableCompany;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoryDataTable Category {
            get {
                return this.tableCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Company_Product_TypeDataTable Company_Product_Type {
            get {
                return this.tableCompany_Product_Type;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Product_Type_AttributeDataTable Product_Type_Attribute {
            get {
                return this.tableProduct_Type_Attribute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Product_AttributeDataTable Product_Attribute {
            get {
                return this.tableProduct_Attribute;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Attribute_VariantDataTable Attribute_Variant {
            get {
                return this.tableAttribute_Variant;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZipCodesDataTable ZipCodes {
            get {
                return this.tableZipCodes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Activity_TypeDataTable Activity_Type {
            get {
                return this.tableActivity_Type;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Event_ItemDataTable Event_Item {
            get {
                return this.tableEvent_Item;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventDataTable Event {
            get {
                return this.tableEvent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductDataTable Product {
            get {
                return this.tableProduct;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Secret_QuestionDataTable Secret_Question {
            get {
                return this.tableSecret_Question;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Product_TypeDataTable Product_Type {
            get {
                return this.tableProduct_Type;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistributorDataTable Distributor {
            get {
                return this.tableDistributor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerDataTable Customer {
            get {
                return this.tableCustomer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrendDataTable Trend {
            get {
                return this.tableTrend;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SourceDataTable Source {
            get {
                return this.tableSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rank_TypeDataTable Rank_Type {
            get {
                return this.tableRank_Type;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Marker_TypeDataTable Marker_Type {
            get {
                return this.tableMarker_Type;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Count_TypeDataTable Count_Type {
            get {
                return this.tableCount_Type;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DSParameter cln = ((DSParameter)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Connotation_Keyword"] != null)) {
                    base.Tables.Add(new Connotation_KeywordDataTable(ds.Tables["Connotation_Keyword"]));
                }
                if ((ds.Tables["Event_Marker"] != null)) {
                    base.Tables.Add(new Event_MarkerDataTable(ds.Tables["Event_Marker"]));
                }
                if ((ds.Tables["Keyword"] != null)) {
                    base.Tables.Add(new KeywordDataTable(ds.Tables["Keyword"]));
                }
                if ((ds.Tables["Marker_Connotation"] != null)) {
                    base.Tables.Add(new Marker_ConnotationDataTable(ds.Tables["Marker_Connotation"]));
                }
                if ((ds.Tables["Marker"] != null)) {
                    base.Tables.Add(new MarkerDataTable(ds.Tables["Marker"]));
                }
                if ((ds.Tables["Attribute"] != null)) {
                    base.Tables.Add(new AttributeDataTable(ds.Tables["Attribute"]));
                }
                if ((ds.Tables["Product_Distributor"] != null)) {
                    base.Tables.Add(new Product_DistributorDataTable(ds.Tables["Product_Distributor"]));
                }
                if ((ds.Tables["Product_Type_Relationship"] != null)) {
                    base.Tables.Add(new Product_Type_RelationshipDataTable(ds.Tables["Product_Type_Relationship"]));
                }
                if ((ds.Tables["Relationship"] != null)) {
                    base.Tables.Add(new RelationshipDataTable(ds.Tables["Relationship"]));
                }
                if ((ds.Tables["Company"] != null)) {
                    base.Tables.Add(new CompanyDataTable(ds.Tables["Company"]));
                }
                if ((ds.Tables["Category"] != null)) {
                    base.Tables.Add(new CategoryDataTable(ds.Tables["Category"]));
                }
                if ((ds.Tables["Company_Product_Type"] != null)) {
                    base.Tables.Add(new Company_Product_TypeDataTable(ds.Tables["Company_Product_Type"]));
                }
                if ((ds.Tables["Product_Type_Attribute"] != null)) {
                    base.Tables.Add(new Product_Type_AttributeDataTable(ds.Tables["Product_Type_Attribute"]));
                }
                if ((ds.Tables["Product_Attribute"] != null)) {
                    base.Tables.Add(new Product_AttributeDataTable(ds.Tables["Product_Attribute"]));
                }
                if ((ds.Tables["Attribute_Variant"] != null)) {
                    base.Tables.Add(new Attribute_VariantDataTable(ds.Tables["Attribute_Variant"]));
                }
                if ((ds.Tables["ZipCodes"] != null)) {
                    base.Tables.Add(new ZipCodesDataTable(ds.Tables["ZipCodes"]));
                }
                if ((ds.Tables["Activity_Type"] != null)) {
                    base.Tables.Add(new Activity_TypeDataTable(ds.Tables["Activity_Type"]));
                }
                if ((ds.Tables["Event_Item"] != null)) {
                    base.Tables.Add(new Event_ItemDataTable(ds.Tables["Event_Item"]));
                }
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["Secret_Question"] != null)) {
                    base.Tables.Add(new Secret_QuestionDataTable(ds.Tables["Secret_Question"]));
                }
                if ((ds.Tables["Product_Type"] != null)) {
                    base.Tables.Add(new Product_TypeDataTable(ds.Tables["Product_Type"]));
                }
                if ((ds.Tables["Distributor"] != null)) {
                    base.Tables.Add(new DistributorDataTable(ds.Tables["Distributor"]));
                }
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["Trend"] != null)) {
                    base.Tables.Add(new TrendDataTable(ds.Tables["Trend"]));
                }
                if ((ds.Tables["Source"] != null)) {
                    base.Tables.Add(new SourceDataTable(ds.Tables["Source"]));
                }
                if ((ds.Tables["Rank_Type"] != null)) {
                    base.Tables.Add(new Rank_TypeDataTable(ds.Tables["Rank_Type"]));
                }
                if ((ds.Tables["Marker_Type"] != null)) {
                    base.Tables.Add(new Marker_TypeDataTable(ds.Tables["Marker_Type"]));
                }
                if ((ds.Tables["Count_Type"] != null)) {
                    base.Tables.Add(new Count_TypeDataTable(ds.Tables["Count_Type"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConnotation_Keyword = ((Connotation_KeywordDataTable)(base.Tables["Connotation_Keyword"]));
            if ((initTable == true)) {
                if ((this.tableConnotation_Keyword != null)) {
                    this.tableConnotation_Keyword.InitVars();
                }
            }
            this.tableEvent_Marker = ((Event_MarkerDataTable)(base.Tables["Event_Marker"]));
            if ((initTable == true)) {
                if ((this.tableEvent_Marker != null)) {
                    this.tableEvent_Marker.InitVars();
                }
            }
            this.tableKeyword = ((KeywordDataTable)(base.Tables["Keyword"]));
            if ((initTable == true)) {
                if ((this.tableKeyword != null)) {
                    this.tableKeyword.InitVars();
                }
            }
            this.tableMarker_Connotation = ((Marker_ConnotationDataTable)(base.Tables["Marker_Connotation"]));
            if ((initTable == true)) {
                if ((this.tableMarker_Connotation != null)) {
                    this.tableMarker_Connotation.InitVars();
                }
            }
            this.tableMarker = ((MarkerDataTable)(base.Tables["Marker"]));
            if ((initTable == true)) {
                if ((this.tableMarker != null)) {
                    this.tableMarker.InitVars();
                }
            }
            this.tableAttribute = ((AttributeDataTable)(base.Tables["Attribute"]));
            if ((initTable == true)) {
                if ((this.tableAttribute != null)) {
                    this.tableAttribute.InitVars();
                }
            }
            this.tableProduct_Distributor = ((Product_DistributorDataTable)(base.Tables["Product_Distributor"]));
            if ((initTable == true)) {
                if ((this.tableProduct_Distributor != null)) {
                    this.tableProduct_Distributor.InitVars();
                }
            }
            this.tableProduct_Type_Relationship = ((Product_Type_RelationshipDataTable)(base.Tables["Product_Type_Relationship"]));
            if ((initTable == true)) {
                if ((this.tableProduct_Type_Relationship != null)) {
                    this.tableProduct_Type_Relationship.InitVars();
                }
            }
            this.tableRelationship = ((RelationshipDataTable)(base.Tables["Relationship"]));
            if ((initTable == true)) {
                if ((this.tableRelationship != null)) {
                    this.tableRelationship.InitVars();
                }
            }
            this.tableCompany = ((CompanyDataTable)(base.Tables["Company"]));
            if ((initTable == true)) {
                if ((this.tableCompany != null)) {
                    this.tableCompany.InitVars();
                }
            }
            this.tableCategory = ((CategoryDataTable)(base.Tables["Category"]));
            if ((initTable == true)) {
                if ((this.tableCategory != null)) {
                    this.tableCategory.InitVars();
                }
            }
            this.tableCompany_Product_Type = ((Company_Product_TypeDataTable)(base.Tables["Company_Product_Type"]));
            if ((initTable == true)) {
                if ((this.tableCompany_Product_Type != null)) {
                    this.tableCompany_Product_Type.InitVars();
                }
            }
            this.tableProduct_Type_Attribute = ((Product_Type_AttributeDataTable)(base.Tables["Product_Type_Attribute"]));
            if ((initTable == true)) {
                if ((this.tableProduct_Type_Attribute != null)) {
                    this.tableProduct_Type_Attribute.InitVars();
                }
            }
            this.tableProduct_Attribute = ((Product_AttributeDataTable)(base.Tables["Product_Attribute"]));
            if ((initTable == true)) {
                if ((this.tableProduct_Attribute != null)) {
                    this.tableProduct_Attribute.InitVars();
                }
            }
            this.tableAttribute_Variant = ((Attribute_VariantDataTable)(base.Tables["Attribute_Variant"]));
            if ((initTable == true)) {
                if ((this.tableAttribute_Variant != null)) {
                    this.tableAttribute_Variant.InitVars();
                }
            }
            this.tableZipCodes = ((ZipCodesDataTable)(base.Tables["ZipCodes"]));
            if ((initTable == true)) {
                if ((this.tableZipCodes != null)) {
                    this.tableZipCodes.InitVars();
                }
            }
            this.tableActivity_Type = ((Activity_TypeDataTable)(base.Tables["Activity_Type"]));
            if ((initTable == true)) {
                if ((this.tableActivity_Type != null)) {
                    this.tableActivity_Type.InitVars();
                }
            }
            this.tableEvent_Item = ((Event_ItemDataTable)(base.Tables["Event_Item"]));
            if ((initTable == true)) {
                if ((this.tableEvent_Item != null)) {
                    this.tableEvent_Item.InitVars();
                }
            }
            this.tableEvent = ((EventDataTable)(base.Tables["Event"]));
            if ((initTable == true)) {
                if ((this.tableEvent != null)) {
                    this.tableEvent.InitVars();
                }
            }
            this.tableProduct = ((ProductDataTable)(base.Tables["Product"]));
            if ((initTable == true)) {
                if ((this.tableProduct != null)) {
                    this.tableProduct.InitVars();
                }
            }
            this.tableSecret_Question = ((Secret_QuestionDataTable)(base.Tables["Secret_Question"]));
            if ((initTable == true)) {
                if ((this.tableSecret_Question != null)) {
                    this.tableSecret_Question.InitVars();
                }
            }
            this.tableProduct_Type = ((Product_TypeDataTable)(base.Tables["Product_Type"]));
            if ((initTable == true)) {
                if ((this.tableProduct_Type != null)) {
                    this.tableProduct_Type.InitVars();
                }
            }
            this.tableDistributor = ((DistributorDataTable)(base.Tables["Distributor"]));
            if ((initTable == true)) {
                if ((this.tableDistributor != null)) {
                    this.tableDistributor.InitVars();
                }
            }
            this.tableCustomer = ((CustomerDataTable)(base.Tables["Customer"]));
            if ((initTable == true)) {
                if ((this.tableCustomer != null)) {
                    this.tableCustomer.InitVars();
                }
            }
            this.tableTrend = ((TrendDataTable)(base.Tables["Trend"]));
            if ((initTable == true)) {
                if ((this.tableTrend != null)) {
                    this.tableTrend.InitVars();
                }
            }
            this.tableSource = ((SourceDataTable)(base.Tables["Source"]));
            if ((initTable == true)) {
                if ((this.tableSource != null)) {
                    this.tableSource.InitVars();
                }
            }
            this.tableRank_Type = ((Rank_TypeDataTable)(base.Tables["Rank_Type"]));
            if ((initTable == true)) {
                if ((this.tableRank_Type != null)) {
                    this.tableRank_Type.InitVars();
                }
            }
            this.tableMarker_Type = ((Marker_TypeDataTable)(base.Tables["Marker_Type"]));
            if ((initTable == true)) {
                if ((this.tableMarker_Type != null)) {
                    this.tableMarker_Type.InitVars();
                }
            }
            this.tableCount_Type = ((Count_TypeDataTable)(base.Tables["Count_Type"]));
            if ((initTable == true)) {
                if ((this.tableCount_Type != null)) {
                    this.tableCount_Type.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSParameter";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSParameter.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConnotation_Keyword = new Connotation_KeywordDataTable();
            base.Tables.Add(this.tableConnotation_Keyword);
            this.tableEvent_Marker = new Event_MarkerDataTable();
            base.Tables.Add(this.tableEvent_Marker);
            this.tableKeyword = new KeywordDataTable();
            base.Tables.Add(this.tableKeyword);
            this.tableMarker_Connotation = new Marker_ConnotationDataTable();
            base.Tables.Add(this.tableMarker_Connotation);
            this.tableMarker = new MarkerDataTable();
            base.Tables.Add(this.tableMarker);
            this.tableAttribute = new AttributeDataTable();
            base.Tables.Add(this.tableAttribute);
            this.tableProduct_Distributor = new Product_DistributorDataTable();
            base.Tables.Add(this.tableProduct_Distributor);
            this.tableProduct_Type_Relationship = new Product_Type_RelationshipDataTable();
            base.Tables.Add(this.tableProduct_Type_Relationship);
            this.tableRelationship = new RelationshipDataTable();
            base.Tables.Add(this.tableRelationship);
            this.tableCompany = new CompanyDataTable();
            base.Tables.Add(this.tableCompany);
            this.tableCategory = new CategoryDataTable();
            base.Tables.Add(this.tableCategory);
            this.tableCompany_Product_Type = new Company_Product_TypeDataTable();
            base.Tables.Add(this.tableCompany_Product_Type);
            this.tableProduct_Type_Attribute = new Product_Type_AttributeDataTable();
            base.Tables.Add(this.tableProduct_Type_Attribute);
            this.tableProduct_Attribute = new Product_AttributeDataTable();
            base.Tables.Add(this.tableProduct_Attribute);
            this.tableAttribute_Variant = new Attribute_VariantDataTable();
            base.Tables.Add(this.tableAttribute_Variant);
            this.tableZipCodes = new ZipCodesDataTable();
            base.Tables.Add(this.tableZipCodes);
            this.tableActivity_Type = new Activity_TypeDataTable();
            base.Tables.Add(this.tableActivity_Type);
            this.tableEvent_Item = new Event_ItemDataTable();
            base.Tables.Add(this.tableEvent_Item);
            this.tableEvent = new EventDataTable();
            base.Tables.Add(this.tableEvent);
            this.tableProduct = new ProductDataTable();
            base.Tables.Add(this.tableProduct);
            this.tableSecret_Question = new Secret_QuestionDataTable();
            base.Tables.Add(this.tableSecret_Question);
            this.tableProduct_Type = new Product_TypeDataTable();
            base.Tables.Add(this.tableProduct_Type);
            this.tableDistributor = new DistributorDataTable();
            base.Tables.Add(this.tableDistributor);
            this.tableCustomer = new CustomerDataTable();
            base.Tables.Add(this.tableCustomer);
            this.tableTrend = new TrendDataTable();
            base.Tables.Add(this.tableTrend);
            this.tableSource = new SourceDataTable();
            base.Tables.Add(this.tableSource);
            this.tableRank_Type = new Rank_TypeDataTable();
            base.Tables.Add(this.tableRank_Type);
            this.tableMarker_Type = new Marker_TypeDataTable();
            base.Tables.Add(this.tableMarker_Type);
            this.tableCount_Type = new Count_TypeDataTable();
            base.Tables.Add(this.tableCount_Type);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConnotation_Keyword() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEvent_Marker() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeyword() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMarker_Connotation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMarker() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAttribute() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct_Distributor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct_Type_Relationship() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRelationship() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCompany() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCompany_Product_Type() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct_Type_Attribute() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct_Attribute() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAttribute_Variant() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeZipCodes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActivity_Type() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEvent_Item() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEvent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSecret_Question() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct_Type() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistributor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrend() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRank_Type() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMarker_Type() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCount_Type() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DSParameter ds = new DSParameter();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Connotation_KeywordRowChangeEventHandler(object sender, Connotation_KeywordRowChangeEvent e);
        
        public delegate void Event_MarkerRowChangeEventHandler(object sender, Event_MarkerRowChangeEvent e);
        
        public delegate void KeywordRowChangeEventHandler(object sender, KeywordRowChangeEvent e);
        
        public delegate void Marker_ConnotationRowChangeEventHandler(object sender, Marker_ConnotationRowChangeEvent e);
        
        public delegate void MarkerRowChangeEventHandler(object sender, MarkerRowChangeEvent e);
        
        public delegate void AttributeRowChangeEventHandler(object sender, AttributeRowChangeEvent e);
        
        public delegate void Product_DistributorRowChangeEventHandler(object sender, Product_DistributorRowChangeEvent e);
        
        public delegate void Product_Type_RelationshipRowChangeEventHandler(object sender, Product_Type_RelationshipRowChangeEvent e);
        
        public delegate void RelationshipRowChangeEventHandler(object sender, RelationshipRowChangeEvent e);
        
        public delegate void CompanyRowChangeEventHandler(object sender, CompanyRowChangeEvent e);
        
        public delegate void CategoryRowChangeEventHandler(object sender, CategoryRowChangeEvent e);
        
        public delegate void Company_Product_TypeRowChangeEventHandler(object sender, Company_Product_TypeRowChangeEvent e);
        
        public delegate void Product_Type_AttributeRowChangeEventHandler(object sender, Product_Type_AttributeRowChangeEvent e);
        
        public delegate void Product_AttributeRowChangeEventHandler(object sender, Product_AttributeRowChangeEvent e);
        
        public delegate void Attribute_VariantRowChangeEventHandler(object sender, Attribute_VariantRowChangeEvent e);
        
        public delegate void ZipCodesRowChangeEventHandler(object sender, ZipCodesRowChangeEvent e);
        
        public delegate void Activity_TypeRowChangeEventHandler(object sender, Activity_TypeRowChangeEvent e);
        
        public delegate void Event_ItemRowChangeEventHandler(object sender, Event_ItemRowChangeEvent e);
        
        public delegate void EventRowChangeEventHandler(object sender, EventRowChangeEvent e);
        
        public delegate void ProductRowChangeEventHandler(object sender, ProductRowChangeEvent e);
        
        public delegate void Secret_QuestionRowChangeEventHandler(object sender, Secret_QuestionRowChangeEvent e);
        
        public delegate void Product_TypeRowChangeEventHandler(object sender, Product_TypeRowChangeEvent e);
        
        public delegate void DistributorRowChangeEventHandler(object sender, DistributorRowChangeEvent e);
        
        public delegate void CustomerRowChangeEventHandler(object sender, CustomerRowChangeEvent e);
        
        public delegate void TrendRowChangeEventHandler(object sender, TrendRowChangeEvent e);
        
        public delegate void SourceRowChangeEventHandler(object sender, SourceRowChangeEvent e);
        
        public delegate void Rank_TypeRowChangeEventHandler(object sender, Rank_TypeRowChangeEvent e);
        
        public delegate void Marker_TypeRowChangeEventHandler(object sender, Marker_TypeRowChangeEvent e);
        
        public delegate void Count_TypeRowChangeEventHandler(object sender, Count_TypeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Connotation_KeywordDataTable : global::System.Data.TypedTableBase<Connotation_KeywordRow> {
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnMarker_Connotation_ID;
            
            private global::System.Data.DataColumn columnSource_ID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnMention;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Connotation_KeywordDataTable() {
                this.TableName = "Connotation_Keyword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Connotation_KeywordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Connotation_KeywordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_Connotation_IDColumn {
                get {
                    return this.columnMarker_Connotation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Source_IDColumn {
                get {
                    return this.columnSource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MentionColumn {
                get {
                    return this.columnMention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Connotation_KeywordRow this[int index] {
                get {
                    return ((Connotation_KeywordRow)(this.Rows[index]));
                }
            }
            
            public event Connotation_KeywordRowChangeEventHandler Connotation_KeywordRowChanging;
            
            public event Connotation_KeywordRowChangeEventHandler Connotation_KeywordRowChanged;
            
            public event Connotation_KeywordRowChangeEventHandler Connotation_KeywordRowDeleting;
            
            public event Connotation_KeywordRowChangeEventHandler Connotation_KeywordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConnotation_KeywordRow(Connotation_KeywordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Connotation_KeywordRow AddConnotation_KeywordRow(int Day, int Month, int Year, int Marker_Connotation_ID, int Source_ID, System.DateTime Date, int Mention) {
                Connotation_KeywordRow rowConnotation_KeywordRow = ((Connotation_KeywordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Day,
                        Month,
                        Year,
                        Marker_Connotation_ID,
                        Source_ID,
                        Date,
                        Mention};
                rowConnotation_KeywordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConnotation_KeywordRow);
                return rowConnotation_KeywordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Connotation_KeywordRow FindByDayMonthYearMarker_Connotation_IDSource_ID(int Day, int Month, int Year, int Marker_Connotation_ID, int Source_ID) {
                return ((Connotation_KeywordRow)(this.Rows.Find(new object[] {
                            Day,
                            Month,
                            Year,
                            Marker_Connotation_ID,
                            Source_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Connotation_KeywordDataTable cln = ((Connotation_KeywordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Connotation_KeywordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDay = base.Columns["Day"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnMarker_Connotation_ID = base.Columns["Marker_Connotation_ID"];
                this.columnSource_ID = base.Columns["Source_ID"];
                this.columnDate = base.Columns["Date"];
                this.columnMention = base.Columns["Mention"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnMarker_Connotation_ID = new global::System.Data.DataColumn("Marker_Connotation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_Connotation_ID);
                this.columnSource_ID = new global::System.Data.DataColumn("Source_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource_ID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnMention = new global::System.Data.DataColumn("Mention", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMention);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDay,
                                this.columnMonth,
                                this.columnYear,
                                this.columnMarker_Connotation_ID,
                                this.columnSource_ID}, true));
                this.columnDay.AllowDBNull = false;
                this.columnMonth.AllowDBNull = false;
                this.columnYear.AllowDBNull = false;
                this.columnMarker_Connotation_ID.AllowDBNull = false;
                this.columnSource_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Connotation_KeywordRow NewConnotation_KeywordRow() {
                return ((Connotation_KeywordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Connotation_KeywordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Connotation_KeywordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Connotation_KeywordRowChanged != null)) {
                    this.Connotation_KeywordRowChanged(this, new Connotation_KeywordRowChangeEvent(((Connotation_KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Connotation_KeywordRowChanging != null)) {
                    this.Connotation_KeywordRowChanging(this, new Connotation_KeywordRowChangeEvent(((Connotation_KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Connotation_KeywordRowDeleted != null)) {
                    this.Connotation_KeywordRowDeleted(this, new Connotation_KeywordRowChangeEvent(((Connotation_KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Connotation_KeywordRowDeleting != null)) {
                    this.Connotation_KeywordRowDeleting(this, new Connotation_KeywordRowChangeEvent(((Connotation_KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConnotation_KeywordRow(Connotation_KeywordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Connotation_KeywordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Event_MarkerDataTable : global::System.Data.TypedTableBase<Event_MarkerRow> {
            
            private global::System.Data.DataColumn columnEvent_Marker_ID;
            
            private global::System.Data.DataColumn columnMarker_ID;
            
            private global::System.Data.DataColumn columnPeriod_In_Days;
            
            private global::System.Data.DataColumn columnStart_Date;
            
            private global::System.Data.DataColumn columnStart_Year;
            
            private global::System.Data.DataColumn columnEnd_Year;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_MarkerDataTable() {
                this.TableName = "Event_Marker";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Event_MarkerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Event_MarkerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Event_Marker_IDColumn {
                get {
                    return this.columnEvent_Marker_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_IDColumn {
                get {
                    return this.columnMarker_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Period_In_DaysColumn {
                get {
                    return this.columnPeriod_In_Days;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Start_DateColumn {
                get {
                    return this.columnStart_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Start_YearColumn {
                get {
                    return this.columnStart_Year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn End_YearColumn {
                get {
                    return this.columnEnd_Year;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_MarkerRow this[int index] {
                get {
                    return ((Event_MarkerRow)(this.Rows[index]));
                }
            }
            
            public event Event_MarkerRowChangeEventHandler Event_MarkerRowChanging;
            
            public event Event_MarkerRowChangeEventHandler Event_MarkerRowChanged;
            
            public event Event_MarkerRowChangeEventHandler Event_MarkerRowDeleting;
            
            public event Event_MarkerRowChangeEventHandler Event_MarkerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEvent_MarkerRow(Event_MarkerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_MarkerRow AddEvent_MarkerRow(int Event_Marker_ID, int Marker_ID, int Period_In_Days, System.DateTime Start_Date, int Start_Year, int End_Year) {
                Event_MarkerRow rowEvent_MarkerRow = ((Event_MarkerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Event_Marker_ID,
                        Marker_ID,
                        Period_In_Days,
                        Start_Date,
                        Start_Year,
                        End_Year};
                rowEvent_MarkerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEvent_MarkerRow);
                return rowEvent_MarkerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_MarkerRow FindByEvent_Marker_ID(int Event_Marker_ID) {
                return ((Event_MarkerRow)(this.Rows.Find(new object[] {
                            Event_Marker_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Event_MarkerDataTable cln = ((Event_MarkerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Event_MarkerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEvent_Marker_ID = base.Columns["Event_Marker_ID"];
                this.columnMarker_ID = base.Columns["Marker_ID"];
                this.columnPeriod_In_Days = base.Columns["Period_In_Days"];
                this.columnStart_Date = base.Columns["Start_Date"];
                this.columnStart_Year = base.Columns["Start_Year"];
                this.columnEnd_Year = base.Columns["End_Year"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEvent_Marker_ID = new global::System.Data.DataColumn("Event_Marker_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent_Marker_ID);
                this.columnMarker_ID = new global::System.Data.DataColumn("Marker_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_ID);
                this.columnPeriod_In_Days = new global::System.Data.DataColumn("Period_In_Days", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriod_In_Days);
                this.columnStart_Date = new global::System.Data.DataColumn("Start_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStart_Date);
                this.columnStart_Year = new global::System.Data.DataColumn("Start_Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStart_Year);
                this.columnEnd_Year = new global::System.Data.DataColumn("End_Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnd_Year);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEvent_Marker_ID}, true));
                this.columnEvent_Marker_ID.AllowDBNull = false;
                this.columnEvent_Marker_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_MarkerRow NewEvent_MarkerRow() {
                return ((Event_MarkerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Event_MarkerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Event_MarkerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Event_MarkerRowChanged != null)) {
                    this.Event_MarkerRowChanged(this, new Event_MarkerRowChangeEvent(((Event_MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Event_MarkerRowChanging != null)) {
                    this.Event_MarkerRowChanging(this, new Event_MarkerRowChangeEvent(((Event_MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Event_MarkerRowDeleted != null)) {
                    this.Event_MarkerRowDeleted(this, new Event_MarkerRowChangeEvent(((Event_MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Event_MarkerRowDeleting != null)) {
                    this.Event_MarkerRowDeleting(this, new Event_MarkerRowChangeEvent(((Event_MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEvent_MarkerRow(Event_MarkerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Event_MarkerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeywordDataTable : global::System.Data.TypedTableBase<KeywordRow> {
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnSource_ID;
            
            private global::System.Data.DataColumn columnMarker_ID;
            
            private global::System.Data.DataColumn columnCount_Type_ID;
            
            private global::System.Data.DataColumn columnRank_Type_ID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnMention;
            
            private global::System.Data.DataColumn columnRank;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeywordDataTable() {
                this.TableName = "Keyword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeywordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeywordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Source_IDColumn {
                get {
                    return this.columnSource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_IDColumn {
                get {
                    return this.columnMarker_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Count_Type_IDColumn {
                get {
                    return this.columnCount_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rank_Type_IDColumn {
                get {
                    return this.columnRank_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MentionColumn {
                get {
                    return this.columnMention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankColumn {
                get {
                    return this.columnRank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeywordRow this[int index] {
                get {
                    return ((KeywordRow)(this.Rows[index]));
                }
            }
            
            public event KeywordRowChangeEventHandler KeywordRowChanging;
            
            public event KeywordRowChangeEventHandler KeywordRowChanged;
            
            public event KeywordRowChangeEventHandler KeywordRowDeleting;
            
            public event KeywordRowChangeEventHandler KeywordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeywordRow(KeywordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeywordRow AddKeywordRow(int Day, int Month, int Year, int Source_ID, int Marker_ID, int Count_Type_ID, int Rank_Type_ID, System.DateTime Date, int Mention, int Rank) {
                KeywordRow rowKeywordRow = ((KeywordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Day,
                        Month,
                        Year,
                        Source_ID,
                        Marker_ID,
                        Count_Type_ID,
                        Rank_Type_ID,
                        Date,
                        Mention,
                        Rank};
                rowKeywordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKeywordRow);
                return rowKeywordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeywordRow FindByDayMonthYearSource_IDMarker_IDCount_Type_IDRank_Type_ID(int Day, int Month, int Year, int Source_ID, int Marker_ID, int Count_Type_ID, int Rank_Type_ID) {
                return ((KeywordRow)(this.Rows.Find(new object[] {
                            Day,
                            Month,
                            Year,
                            Source_ID,
                            Marker_ID,
                            Count_Type_ID,
                            Rank_Type_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KeywordDataTable cln = ((KeywordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KeywordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDay = base.Columns["Day"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnSource_ID = base.Columns["Source_ID"];
                this.columnMarker_ID = base.Columns["Marker_ID"];
                this.columnCount_Type_ID = base.Columns["Count_Type_ID"];
                this.columnRank_Type_ID = base.Columns["Rank_Type_ID"];
                this.columnDate = base.Columns["Date"];
                this.columnMention = base.Columns["Mention"];
                this.columnRank = base.Columns["Rank"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnSource_ID = new global::System.Data.DataColumn("Source_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource_ID);
                this.columnMarker_ID = new global::System.Data.DataColumn("Marker_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_ID);
                this.columnCount_Type_ID = new global::System.Data.DataColumn("Count_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount_Type_ID);
                this.columnRank_Type_ID = new global::System.Data.DataColumn("Rank_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRank_Type_ID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnMention = new global::System.Data.DataColumn("Mention", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMention);
                this.columnRank = new global::System.Data.DataColumn("Rank", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRank);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDay,
                                this.columnMonth,
                                this.columnYear,
                                this.columnSource_ID,
                                this.columnMarker_ID,
                                this.columnCount_Type_ID,
                                this.columnRank_Type_ID}, true));
                this.columnDay.AllowDBNull = false;
                this.columnMonth.AllowDBNull = false;
                this.columnYear.AllowDBNull = false;
                this.columnSource_ID.AllowDBNull = false;
                this.columnMarker_ID.AllowDBNull = false;
                this.columnCount_Type_ID.AllowDBNull = false;
                this.columnRank_Type_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeywordRow NewKeywordRow() {
                return ((KeywordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KeywordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KeywordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeywordRowChanged != null)) {
                    this.KeywordRowChanged(this, new KeywordRowChangeEvent(((KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeywordRowChanging != null)) {
                    this.KeywordRowChanging(this, new KeywordRowChangeEvent(((KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeywordRowDeleted != null)) {
                    this.KeywordRowDeleted(this, new KeywordRowChangeEvent(((KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeywordRowDeleting != null)) {
                    this.KeywordRowDeleting(this, new KeywordRowChangeEvent(((KeywordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeywordRow(KeywordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeywordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Marker_ConnotationDataTable : global::System.Data.TypedTableBase<Marker_ConnotationRow> {
            
            private global::System.Data.DataColumn columnMarker_Connotation_ID;
            
            private global::System.Data.DataColumn columnMarker_ID;
            
            private global::System.Data.DataColumn columnMarker_Connotation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_ConnotationDataTable() {
                this.TableName = "Marker_Connotation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Marker_ConnotationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Marker_ConnotationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_Connotation_IDColumn {
                get {
                    return this.columnMarker_Connotation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_IDColumn {
                get {
                    return this.columnMarker_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_ConnotationColumn {
                get {
                    return this.columnMarker_Connotation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_ConnotationRow this[int index] {
                get {
                    return ((Marker_ConnotationRow)(this.Rows[index]));
                }
            }
            
            public event Marker_ConnotationRowChangeEventHandler Marker_ConnotationRowChanging;
            
            public event Marker_ConnotationRowChangeEventHandler Marker_ConnotationRowChanged;
            
            public event Marker_ConnotationRowChangeEventHandler Marker_ConnotationRowDeleting;
            
            public event Marker_ConnotationRowChangeEventHandler Marker_ConnotationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMarker_ConnotationRow(Marker_ConnotationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_ConnotationRow AddMarker_ConnotationRow(int Marker_ID, string Marker_Connotation) {
                Marker_ConnotationRow rowMarker_ConnotationRow = ((Marker_ConnotationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Marker_ID,
                        Marker_Connotation};
                rowMarker_ConnotationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMarker_ConnotationRow);
                return rowMarker_ConnotationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_ConnotationRow FindByMarker_Connotation_ID(int Marker_Connotation_ID) {
                return ((Marker_ConnotationRow)(this.Rows.Find(new object[] {
                            Marker_Connotation_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Marker_ConnotationDataTable cln = ((Marker_ConnotationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Marker_ConnotationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMarker_Connotation_ID = base.Columns["Marker_Connotation_ID"];
                this.columnMarker_ID = base.Columns["Marker_ID"];
                this.columnMarker_Connotation = base.Columns["Marker_Connotation"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMarker_Connotation_ID = new global::System.Data.DataColumn("Marker_Connotation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_Connotation_ID);
                this.columnMarker_ID = new global::System.Data.DataColumn("Marker_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_ID);
                this.columnMarker_Connotation = new global::System.Data.DataColumn("Marker_Connotation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_Connotation);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMarker_Connotation_ID}, true));
                this.columnMarker_Connotation_ID.AutoIncrement = true;
                this.columnMarker_Connotation_ID.AutoIncrementSeed = -1;
                this.columnMarker_Connotation_ID.AutoIncrementStep = -1;
                this.columnMarker_Connotation_ID.AllowDBNull = false;
                this.columnMarker_Connotation_ID.ReadOnly = true;
                this.columnMarker_Connotation_ID.Unique = true;
                this.columnMarker_Connotation.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_ConnotationRow NewMarker_ConnotationRow() {
                return ((Marker_ConnotationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Marker_ConnotationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Marker_ConnotationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Marker_ConnotationRowChanged != null)) {
                    this.Marker_ConnotationRowChanged(this, new Marker_ConnotationRowChangeEvent(((Marker_ConnotationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Marker_ConnotationRowChanging != null)) {
                    this.Marker_ConnotationRowChanging(this, new Marker_ConnotationRowChangeEvent(((Marker_ConnotationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Marker_ConnotationRowDeleted != null)) {
                    this.Marker_ConnotationRowDeleted(this, new Marker_ConnotationRowChangeEvent(((Marker_ConnotationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Marker_ConnotationRowDeleting != null)) {
                    this.Marker_ConnotationRowDeleting(this, new Marker_ConnotationRowChangeEvent(((Marker_ConnotationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMarker_ConnotationRow(Marker_ConnotationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Marker_ConnotationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MarkerDataTable : global::System.Data.TypedTableBase<MarkerRow> {
            
            private global::System.Data.DataColumn columnMarker_ID;
            
            private global::System.Data.DataColumn columnMarker_Tag;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnIs_Recurring_Event;
            
            private global::System.Data.DataColumn columnCurrent_Daily_Count;
            
            private global::System.Data.DataColumn columnCurrent_Monthly_Count;
            
            private global::System.Data.DataColumn columnCurrent_Yearly_Count;
            
            private global::System.Data.DataColumn columnCurrent_Daily_Count_Trend;
            
            private global::System.Data.DataColumn columnCurrent_Monthly_Count_Trend;
            
            private global::System.Data.DataColumn columnCurrent_Yearly_Count_Trend;
            
            private global::System.Data.DataColumn columnCurrent_Daily_Count_Percentage;
            
            private global::System.Data.DataColumn columnCurrent_Yearly_Count_Trend_Percentage;
            
            private global::System.Data.DataColumn columnCurrent_Monthly_Count_Trend_Percentage;
            
            private global::System.Data.DataColumn columnCurrent_Daily_Rank;
            
            private global::System.Data.DataColumn columnCurrent_Monthly_Rank;
            
            private global::System.Data.DataColumn columnCurrent_Yearly_Rank;
            
            private global::System.Data.DataColumn columnCurrent_Daily_Rank_Trend;
            
            private global::System.Data.DataColumn columnCurrent_Monthly_Rank_Trend;
            
            private global::System.Data.DataColumn columnCurrent_Yearly_Rank_Trend;
            
            private global::System.Data.DataColumn columnCurrent_Daily_Rank_Trend_Percentage;
            
            private global::System.Data.DataColumn columnCurrent_Monthly_Rank_Trend_Percentage;
            
            private global::System.Data.DataColumn columnCurrent_Yearly_Rank_Trend_Percentage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarkerDataTable() {
                this.TableName = "Marker";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarkerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MarkerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_IDColumn {
                get {
                    return this.columnMarker_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_TagColumn {
                get {
                    return this.columnMarker_Tag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Recurring_EventColumn {
                get {
                    return this.columnIs_Recurring_Event;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Daily_CountColumn {
                get {
                    return this.columnCurrent_Daily_Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Monthly_CountColumn {
                get {
                    return this.columnCurrent_Monthly_Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Yearly_CountColumn {
                get {
                    return this.columnCurrent_Yearly_Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Daily_Count_TrendColumn {
                get {
                    return this.columnCurrent_Daily_Count_Trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Monthly_Count_TrendColumn {
                get {
                    return this.columnCurrent_Monthly_Count_Trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Yearly_Count_TrendColumn {
                get {
                    return this.columnCurrent_Yearly_Count_Trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Daily_Count_PercentageColumn {
                get {
                    return this.columnCurrent_Daily_Count_Percentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Yearly_Count_Trend_PercentageColumn {
                get {
                    return this.columnCurrent_Yearly_Count_Trend_Percentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Monthly_Count_Trend_PercentageColumn {
                get {
                    return this.columnCurrent_Monthly_Count_Trend_Percentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Daily_RankColumn {
                get {
                    return this.columnCurrent_Daily_Rank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Monthly_RankColumn {
                get {
                    return this.columnCurrent_Monthly_Rank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Yearly_RankColumn {
                get {
                    return this.columnCurrent_Yearly_Rank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Daily_Rank_TrendColumn {
                get {
                    return this.columnCurrent_Daily_Rank_Trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Monthly_Rank_TrendColumn {
                get {
                    return this.columnCurrent_Monthly_Rank_Trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Yearly_Rank_TrendColumn {
                get {
                    return this.columnCurrent_Yearly_Rank_Trend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Daily_Rank_Trend_PercentageColumn {
                get {
                    return this.columnCurrent_Daily_Rank_Trend_Percentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Monthly_Rank_Trend_PercentageColumn {
                get {
                    return this.columnCurrent_Monthly_Rank_Trend_Percentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Current_Yearly_Rank_Trend_PercentageColumn {
                get {
                    return this.columnCurrent_Yearly_Rank_Trend_Percentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarkerRow this[int index] {
                get {
                    return ((MarkerRow)(this.Rows[index]));
                }
            }
            
            public event MarkerRowChangeEventHandler MarkerRowChanging;
            
            public event MarkerRowChangeEventHandler MarkerRowChanged;
            
            public event MarkerRowChangeEventHandler MarkerRowDeleting;
            
            public event MarkerRowChangeEventHandler MarkerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMarkerRow(MarkerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarkerRow AddMarkerRow(
                        string Marker_Tag, 
                        string Address, 
                        string City, 
                        string State, 
                        string Country, 
                        decimal Latitude, 
                        decimal Longitude, 
                        bool Is_Recurring_Event, 
                        int Current_Daily_Count, 
                        int Current_Monthly_Count, 
                        int Current_Yearly_Count, 
                        int Current_Daily_Count_Trend, 
                        int Current_Monthly_Count_Trend, 
                        int Current_Yearly_Count_Trend, 
                        decimal Current_Daily_Count_Percentage, 
                        decimal Current_Yearly_Count_Trend_Percentage, 
                        decimal Current_Monthly_Count_Trend_Percentage, 
                        int Current_Daily_Rank, 
                        int Current_Monthly_Rank, 
                        int Current_Yearly_Rank, 
                        int Current_Daily_Rank_Trend, 
                        int Current_Monthly_Rank_Trend, 
                        int Current_Yearly_Rank_Trend, 
                        decimal Current_Daily_Rank_Trend_Percentage, 
                        decimal Current_Monthly_Rank_Trend_Percentage, 
                        decimal Current_Yearly_Rank_Trend_Percentage) {
                MarkerRow rowMarkerRow = ((MarkerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Marker_Tag,
                        Address,
                        City,
                        State,
                        Country,
                        Latitude,
                        Longitude,
                        Is_Recurring_Event,
                        Current_Daily_Count,
                        Current_Monthly_Count,
                        Current_Yearly_Count,
                        Current_Daily_Count_Trend,
                        Current_Monthly_Count_Trend,
                        Current_Yearly_Count_Trend,
                        Current_Daily_Count_Percentage,
                        Current_Yearly_Count_Trend_Percentage,
                        Current_Monthly_Count_Trend_Percentage,
                        Current_Daily_Rank,
                        Current_Monthly_Rank,
                        Current_Yearly_Rank,
                        Current_Daily_Rank_Trend,
                        Current_Monthly_Rank_Trend,
                        Current_Yearly_Rank_Trend,
                        Current_Daily_Rank_Trend_Percentage,
                        Current_Monthly_Rank_Trend_Percentage,
                        Current_Yearly_Rank_Trend_Percentage};
                rowMarkerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMarkerRow);
                return rowMarkerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarkerRow FindByMarker_ID(int Marker_ID) {
                return ((MarkerRow)(this.Rows.Find(new object[] {
                            Marker_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MarkerDataTable cln = ((MarkerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MarkerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMarker_ID = base.Columns["Marker_ID"];
                this.columnMarker_Tag = base.Columns["Marker_Tag"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnCountry = base.Columns["Country"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnIs_Recurring_Event = base.Columns["Is_Recurring_Event"];
                this.columnCurrent_Daily_Count = base.Columns["Current_Daily_Count"];
                this.columnCurrent_Monthly_Count = base.Columns["Current_Monthly_Count"];
                this.columnCurrent_Yearly_Count = base.Columns["Current_Yearly_Count"];
                this.columnCurrent_Daily_Count_Trend = base.Columns["Current_Daily_Count_Trend"];
                this.columnCurrent_Monthly_Count_Trend = base.Columns["Current_Monthly_Count_Trend"];
                this.columnCurrent_Yearly_Count_Trend = base.Columns["Current_Yearly_Count_Trend"];
                this.columnCurrent_Daily_Count_Percentage = base.Columns["Current_Daily_Count_Percentage"];
                this.columnCurrent_Yearly_Count_Trend_Percentage = base.Columns["Current_Yearly_Count_Trend_Percentage"];
                this.columnCurrent_Monthly_Count_Trend_Percentage = base.Columns["Current_Monthly_Count_Trend_Percentage"];
                this.columnCurrent_Daily_Rank = base.Columns["Current_Daily_Rank"];
                this.columnCurrent_Monthly_Rank = base.Columns["Current_Monthly_Rank"];
                this.columnCurrent_Yearly_Rank = base.Columns["Current_Yearly_Rank"];
                this.columnCurrent_Daily_Rank_Trend = base.Columns["Current_Daily_Rank_Trend"];
                this.columnCurrent_Monthly_Rank_Trend = base.Columns["Current_Monthly_Rank_Trend"];
                this.columnCurrent_Yearly_Rank_Trend = base.Columns["Current_Yearly_Rank_Trend"];
                this.columnCurrent_Daily_Rank_Trend_Percentage = base.Columns["Current_Daily_Rank_Trend_Percentage"];
                this.columnCurrent_Monthly_Rank_Trend_Percentage = base.Columns["Current_Monthly_Rank_Trend_Percentage"];
                this.columnCurrent_Yearly_Rank_Trend_Percentage = base.Columns["Current_Yearly_Rank_Trend_Percentage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMarker_ID = new global::System.Data.DataColumn("Marker_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_ID);
                this.columnMarker_Tag = new global::System.Data.DataColumn("Marker_Tag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_Tag);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnIs_Recurring_Event = new global::System.Data.DataColumn("Is_Recurring_Event", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Recurring_Event);
                this.columnCurrent_Daily_Count = new global::System.Data.DataColumn("Current_Daily_Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Daily_Count);
                this.columnCurrent_Monthly_Count = new global::System.Data.DataColumn("Current_Monthly_Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Monthly_Count);
                this.columnCurrent_Yearly_Count = new global::System.Data.DataColumn("Current_Yearly_Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Yearly_Count);
                this.columnCurrent_Daily_Count_Trend = new global::System.Data.DataColumn("Current_Daily_Count_Trend", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Daily_Count_Trend);
                this.columnCurrent_Monthly_Count_Trend = new global::System.Data.DataColumn("Current_Monthly_Count_Trend", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Monthly_Count_Trend);
                this.columnCurrent_Yearly_Count_Trend = new global::System.Data.DataColumn("Current_Yearly_Count_Trend", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Yearly_Count_Trend);
                this.columnCurrent_Daily_Count_Percentage = new global::System.Data.DataColumn("Current_Daily_Count_Percentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Daily_Count_Percentage);
                this.columnCurrent_Yearly_Count_Trend_Percentage = new global::System.Data.DataColumn("Current_Yearly_Count_Trend_Percentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Yearly_Count_Trend_Percentage);
                this.columnCurrent_Monthly_Count_Trend_Percentage = new global::System.Data.DataColumn("Current_Monthly_Count_Trend_Percentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Monthly_Count_Trend_Percentage);
                this.columnCurrent_Daily_Rank = new global::System.Data.DataColumn("Current_Daily_Rank", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Daily_Rank);
                this.columnCurrent_Monthly_Rank = new global::System.Data.DataColumn("Current_Monthly_Rank", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Monthly_Rank);
                this.columnCurrent_Yearly_Rank = new global::System.Data.DataColumn("Current_Yearly_Rank", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Yearly_Rank);
                this.columnCurrent_Daily_Rank_Trend = new global::System.Data.DataColumn("Current_Daily_Rank_Trend", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Daily_Rank_Trend);
                this.columnCurrent_Monthly_Rank_Trend = new global::System.Data.DataColumn("Current_Monthly_Rank_Trend", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Monthly_Rank_Trend);
                this.columnCurrent_Yearly_Rank_Trend = new global::System.Data.DataColumn("Current_Yearly_Rank_Trend", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Yearly_Rank_Trend);
                this.columnCurrent_Daily_Rank_Trend_Percentage = new global::System.Data.DataColumn("Current_Daily_Rank_Trend_Percentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Daily_Rank_Trend_Percentage);
                this.columnCurrent_Monthly_Rank_Trend_Percentage = new global::System.Data.DataColumn("Current_Monthly_Rank_Trend_Percentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Monthly_Rank_Trend_Percentage);
                this.columnCurrent_Yearly_Rank_Trend_Percentage = new global::System.Data.DataColumn("Current_Yearly_Rank_Trend_Percentage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent_Yearly_Rank_Trend_Percentage);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMarker_ID}, true));
                this.columnMarker_ID.AutoIncrement = true;
                this.columnMarker_ID.AutoIncrementSeed = -1;
                this.columnMarker_ID.AutoIncrementStep = -1;
                this.columnMarker_ID.AllowDBNull = false;
                this.columnMarker_ID.ReadOnly = true;
                this.columnMarker_ID.Unique = true;
                this.columnMarker_Tag.MaxLength = 50;
                this.columnAddress.MaxLength = 150;
                this.columnCity.MaxLength = 15;
                this.columnState.MaxLength = 25;
                this.columnCountry.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarkerRow NewMarkerRow() {
                return ((MarkerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MarkerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MarkerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MarkerRowChanged != null)) {
                    this.MarkerRowChanged(this, new MarkerRowChangeEvent(((MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MarkerRowChanging != null)) {
                    this.MarkerRowChanging(this, new MarkerRowChangeEvent(((MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MarkerRowDeleted != null)) {
                    this.MarkerRowDeleted(this, new MarkerRowChangeEvent(((MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MarkerRowDeleting != null)) {
                    this.MarkerRowDeleting(this, new MarkerRowChangeEvent(((MarkerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMarkerRow(MarkerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MarkerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AttributeDataTable : global::System.Data.TypedTableBase<AttributeRow> {
            
            private global::System.Data.DataColumn columnAttribute_ID;
            
            private global::System.Data.DataColumn columnAttribute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeDataTable() {
                this.TableName = "Attribute";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttributeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AttributeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Attribute_IDColumn {
                get {
                    return this.columnAttribute_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttributeColumn {
                get {
                    return this.columnAttribute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeRow this[int index] {
                get {
                    return ((AttributeRow)(this.Rows[index]));
                }
            }
            
            public event AttributeRowChangeEventHandler AttributeRowChanging;
            
            public event AttributeRowChangeEventHandler AttributeRowChanged;
            
            public event AttributeRowChangeEventHandler AttributeRowDeleting;
            
            public event AttributeRowChangeEventHandler AttributeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAttributeRow(AttributeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeRow AddAttributeRow(string Attribute) {
                AttributeRow rowAttributeRow = ((AttributeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Attribute};
                rowAttributeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAttributeRow);
                return rowAttributeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeRow FindByAttribute_ID(int Attribute_ID) {
                return ((AttributeRow)(this.Rows.Find(new object[] {
                            Attribute_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AttributeDataTable cln = ((AttributeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AttributeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAttribute_ID = base.Columns["Attribute_ID"];
                this.columnAttribute = base.Columns["Attribute"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAttribute_ID = new global::System.Data.DataColumn("Attribute_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute_ID);
                this.columnAttribute = new global::System.Data.DataColumn("Attribute", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAttribute_ID}, true));
                this.columnAttribute_ID.AutoIncrement = true;
                this.columnAttribute_ID.AutoIncrementSeed = -1;
                this.columnAttribute_ID.AutoIncrementStep = -1;
                this.columnAttribute_ID.AllowDBNull = false;
                this.columnAttribute_ID.ReadOnly = true;
                this.columnAttribute_ID.Unique = true;
                this.columnAttribute.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeRow NewAttributeRow() {
                return ((AttributeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AttributeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AttributeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AttributeRowChanged != null)) {
                    this.AttributeRowChanged(this, new AttributeRowChangeEvent(((AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AttributeRowChanging != null)) {
                    this.AttributeRowChanging(this, new AttributeRowChangeEvent(((AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AttributeRowDeleted != null)) {
                    this.AttributeRowDeleted(this, new AttributeRowChangeEvent(((AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AttributeRowDeleting != null)) {
                    this.AttributeRowDeleting(this, new AttributeRowChangeEvent(((AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAttributeRow(AttributeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AttributeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Product_DistributorDataTable : global::System.Data.TypedTableBase<Product_DistributorRow> {
            
            private global::System.Data.DataColumn columnProduct_ID;
            
            private global::System.Data.DataColumn columnDistributor_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_DistributorDataTable() {
                this.TableName = "Product_Distributor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_DistributorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Product_DistributorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_IDColumn {
                get {
                    return this.columnProduct_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Distributor_IDColumn {
                get {
                    return this.columnDistributor_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_DistributorRow this[int index] {
                get {
                    return ((Product_DistributorRow)(this.Rows[index]));
                }
            }
            
            public event Product_DistributorRowChangeEventHandler Product_DistributorRowChanging;
            
            public event Product_DistributorRowChangeEventHandler Product_DistributorRowChanged;
            
            public event Product_DistributorRowChangeEventHandler Product_DistributorRowDeleting;
            
            public event Product_DistributorRowChangeEventHandler Product_DistributorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProduct_DistributorRow(Product_DistributorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_DistributorRow AddProduct_DistributorRow(int Product_ID, int Distributor_ID) {
                Product_DistributorRow rowProduct_DistributorRow = ((Product_DistributorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Product_ID,
                        Distributor_ID};
                rowProduct_DistributorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProduct_DistributorRow);
                return rowProduct_DistributorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_DistributorRow FindByProduct_IDDistributor_ID(int Product_ID, int Distributor_ID) {
                return ((Product_DistributorRow)(this.Rows.Find(new object[] {
                            Product_ID,
                            Distributor_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Product_DistributorDataTable cln = ((Product_DistributorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Product_DistributorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProduct_ID = base.Columns["Product_ID"];
                this.columnDistributor_ID = base.Columns["Distributor_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProduct_ID = new global::System.Data.DataColumn("Product_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_ID);
                this.columnDistributor_ID = new global::System.Data.DataColumn("Distributor_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributor_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProduct_ID,
                                this.columnDistributor_ID}, true));
                this.columnProduct_ID.AllowDBNull = false;
                this.columnDistributor_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_DistributorRow NewProduct_DistributorRow() {
                return ((Product_DistributorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Product_DistributorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Product_DistributorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Product_DistributorRowChanged != null)) {
                    this.Product_DistributorRowChanged(this, new Product_DistributorRowChangeEvent(((Product_DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Product_DistributorRowChanging != null)) {
                    this.Product_DistributorRowChanging(this, new Product_DistributorRowChangeEvent(((Product_DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Product_DistributorRowDeleted != null)) {
                    this.Product_DistributorRowDeleted(this, new Product_DistributorRowChangeEvent(((Product_DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Product_DistributorRowDeleting != null)) {
                    this.Product_DistributorRowDeleting(this, new Product_DistributorRowChangeEvent(((Product_DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProduct_DistributorRow(Product_DistributorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Product_DistributorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Product_Type_RelationshipDataTable : global::System.Data.TypedTableBase<Product_Type_RelationshipRow> {
            
            private global::System.Data.DataColumn columnProduct_Type_ID;
            
            private global::System.Data.DataColumn columnRelationship_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_RelationshipDataTable() {
                this.TableName = "Product_Type_Relationship";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_Type_RelationshipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Product_Type_RelationshipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Type_IDColumn {
                get {
                    return this.columnProduct_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Relationship_IDColumn {
                get {
                    return this.columnRelationship_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_RelationshipRow this[int index] {
                get {
                    return ((Product_Type_RelationshipRow)(this.Rows[index]));
                }
            }
            
            public event Product_Type_RelationshipRowChangeEventHandler Product_Type_RelationshipRowChanging;
            
            public event Product_Type_RelationshipRowChangeEventHandler Product_Type_RelationshipRowChanged;
            
            public event Product_Type_RelationshipRowChangeEventHandler Product_Type_RelationshipRowDeleting;
            
            public event Product_Type_RelationshipRowChangeEventHandler Product_Type_RelationshipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProduct_Type_RelationshipRow(Product_Type_RelationshipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_RelationshipRow AddProduct_Type_RelationshipRow(int Product_Type_ID, int Relationship_ID) {
                Product_Type_RelationshipRow rowProduct_Type_RelationshipRow = ((Product_Type_RelationshipRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Product_Type_ID,
                        Relationship_ID};
                rowProduct_Type_RelationshipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProduct_Type_RelationshipRow);
                return rowProduct_Type_RelationshipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_RelationshipRow FindByProduct_Type_IDRelationship_ID(int Product_Type_ID, int Relationship_ID) {
                return ((Product_Type_RelationshipRow)(this.Rows.Find(new object[] {
                            Product_Type_ID,
                            Relationship_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Product_Type_RelationshipDataTable cln = ((Product_Type_RelationshipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Product_Type_RelationshipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProduct_Type_ID = base.Columns["Product_Type_ID"];
                this.columnRelationship_ID = base.Columns["Relationship_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProduct_Type_ID = new global::System.Data.DataColumn("Product_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Type_ID);
                this.columnRelationship_ID = new global::System.Data.DataColumn("Relationship_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProduct_Type_ID,
                                this.columnRelationship_ID}, true));
                this.columnProduct_Type_ID.AllowDBNull = false;
                this.columnRelationship_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_RelationshipRow NewProduct_Type_RelationshipRow() {
                return ((Product_Type_RelationshipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Product_Type_RelationshipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Product_Type_RelationshipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Product_Type_RelationshipRowChanged != null)) {
                    this.Product_Type_RelationshipRowChanged(this, new Product_Type_RelationshipRowChangeEvent(((Product_Type_RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Product_Type_RelationshipRowChanging != null)) {
                    this.Product_Type_RelationshipRowChanging(this, new Product_Type_RelationshipRowChangeEvent(((Product_Type_RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Product_Type_RelationshipRowDeleted != null)) {
                    this.Product_Type_RelationshipRowDeleted(this, new Product_Type_RelationshipRowChangeEvent(((Product_Type_RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Product_Type_RelationshipRowDeleting != null)) {
                    this.Product_Type_RelationshipRowDeleting(this, new Product_Type_RelationshipRowChangeEvent(((Product_Type_RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProduct_Type_RelationshipRow(Product_Type_RelationshipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Product_Type_RelationshipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RelationshipDataTable : global::System.Data.TypedTableBase<RelationshipRow> {
            
            private global::System.Data.DataColumn columnRelationship_ID;
            
            private global::System.Data.DataColumn columnRelationship;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelationshipDataTable() {
                this.TableName = "Relationship";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RelationshipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RelationshipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Relationship_IDColumn {
                get {
                    return this.columnRelationship_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationshipColumn {
                get {
                    return this.columnRelationship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelationshipRow this[int index] {
                get {
                    return ((RelationshipRow)(this.Rows[index]));
                }
            }
            
            public event RelationshipRowChangeEventHandler RelationshipRowChanging;
            
            public event RelationshipRowChangeEventHandler RelationshipRowChanged;
            
            public event RelationshipRowChangeEventHandler RelationshipRowDeleting;
            
            public event RelationshipRowChangeEventHandler RelationshipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRelationshipRow(RelationshipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelationshipRow AddRelationshipRow(string Relationship) {
                RelationshipRow rowRelationshipRow = ((RelationshipRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Relationship};
                rowRelationshipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRelationshipRow);
                return rowRelationshipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelationshipRow FindByRelationship_ID(int Relationship_ID) {
                return ((RelationshipRow)(this.Rows.Find(new object[] {
                            Relationship_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RelationshipDataTable cln = ((RelationshipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RelationshipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRelationship_ID = base.Columns["Relationship_ID"];
                this.columnRelationship = base.Columns["Relationship"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRelationship_ID = new global::System.Data.DataColumn("Relationship_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship_ID);
                this.columnRelationship = new global::System.Data.DataColumn("Relationship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRelationship_ID}, true));
                this.columnRelationship_ID.AutoIncrement = true;
                this.columnRelationship_ID.AutoIncrementSeed = -1;
                this.columnRelationship_ID.AutoIncrementStep = -1;
                this.columnRelationship_ID.AllowDBNull = false;
                this.columnRelationship_ID.ReadOnly = true;
                this.columnRelationship_ID.Unique = true;
                this.columnRelationship.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelationshipRow NewRelationshipRow() {
                return ((RelationshipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RelationshipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RelationshipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RelationshipRowChanged != null)) {
                    this.RelationshipRowChanged(this, new RelationshipRowChangeEvent(((RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RelationshipRowChanging != null)) {
                    this.RelationshipRowChanging(this, new RelationshipRowChangeEvent(((RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RelationshipRowDeleted != null)) {
                    this.RelationshipRowDeleted(this, new RelationshipRowChangeEvent(((RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RelationshipRowDeleting != null)) {
                    this.RelationshipRowDeleting(this, new RelationshipRowChangeEvent(((RelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRelationshipRow(RelationshipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RelationshipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CompanyDataTable : global::System.Data.TypedTableBase<CompanyRow> {
            
            private global::System.Data.DataColumn columnCompany_ID;
            
            private global::System.Data.DataColumn columnCompany;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompanyDataTable() {
                this.TableName = "Company";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CompanyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CompanyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Company_IDColumn {
                get {
                    return this.columnCompany_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyColumn {
                get {
                    return this.columnCompany;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompanyRow this[int index] {
                get {
                    return ((CompanyRow)(this.Rows[index]));
                }
            }
            
            public event CompanyRowChangeEventHandler CompanyRowChanging;
            
            public event CompanyRowChangeEventHandler CompanyRowChanged;
            
            public event CompanyRowChangeEventHandler CompanyRowDeleting;
            
            public event CompanyRowChangeEventHandler CompanyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCompanyRow(CompanyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompanyRow AddCompanyRow(string Company) {
                CompanyRow rowCompanyRow = ((CompanyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Company};
                rowCompanyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCompanyRow);
                return rowCompanyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompanyRow FindByCompany_ID(int Company_ID) {
                return ((CompanyRow)(this.Rows.Find(new object[] {
                            Company_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CompanyDataTable cln = ((CompanyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CompanyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompany_ID = base.Columns["Company_ID"];
                this.columnCompany = base.Columns["Company"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompany_ID = new global::System.Data.DataColumn("Company_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany_ID);
                this.columnCompany = new global::System.Data.DataColumn("Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompany_ID}, true));
                this.columnCompany_ID.AutoIncrement = true;
                this.columnCompany_ID.AutoIncrementSeed = -1;
                this.columnCompany_ID.AutoIncrementStep = -1;
                this.columnCompany_ID.AllowDBNull = false;
                this.columnCompany_ID.ReadOnly = true;
                this.columnCompany_ID.Unique = true;
                this.columnCompany.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompanyRow NewCompanyRow() {
                return ((CompanyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CompanyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CompanyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompanyRowChanged != null)) {
                    this.CompanyRowChanged(this, new CompanyRowChangeEvent(((CompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompanyRowChanging != null)) {
                    this.CompanyRowChanging(this, new CompanyRowChangeEvent(((CompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompanyRowDeleted != null)) {
                    this.CompanyRowDeleted(this, new CompanyRowChangeEvent(((CompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompanyRowDeleting != null)) {
                    this.CompanyRowDeleting(this, new CompanyRowChangeEvent(((CompanyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCompanyRow(CompanyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CompanyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoryDataTable : global::System.Data.TypedTableBase<CategoryRow> {
            
            private global::System.Data.DataColumn columnCategory_ID;
            
            private global::System.Data.DataColumn columnCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryDataTable() {
                this.TableName = "Category";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Category_IDColumn {
                get {
                    return this.columnCategory_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryRow this[int index] {
                get {
                    return ((CategoryRow)(this.Rows[index]));
                }
            }
            
            public event CategoryRowChangeEventHandler CategoryRowChanging;
            
            public event CategoryRowChangeEventHandler CategoryRowChanged;
            
            public event CategoryRowChangeEventHandler CategoryRowDeleting;
            
            public event CategoryRowChangeEventHandler CategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategoryRow(CategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryRow AddCategoryRow(int Category_ID, string Category) {
                CategoryRow rowCategoryRow = ((CategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Category_ID,
                        Category};
                rowCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategoryRow);
                return rowCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryRow FindByCategory_ID(int Category_ID) {
                return ((CategoryRow)(this.Rows.Find(new object[] {
                            Category_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CategoryDataTable cln = ((CategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCategory_ID = base.Columns["Category_ID"];
                this.columnCategory = base.Columns["Category"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCategory_ID = new global::System.Data.DataColumn("Category_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory_ID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCategory_ID}, true));
                this.columnCategory_ID.AllowDBNull = false;
                this.columnCategory_ID.Unique = true;
                this.columnCategory.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryRow NewCategoryRow() {
                return ((CategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoryRowChanged != null)) {
                    this.CategoryRowChanged(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoryRowChanging != null)) {
                    this.CategoryRowChanging(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoryRowDeleted != null)) {
                    this.CategoryRowDeleted(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoryRowDeleting != null)) {
                    this.CategoryRowDeleting(this, new CategoryRowChangeEvent(((CategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategoryRow(CategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Company_Product_TypeDataTable : global::System.Data.TypedTableBase<Company_Product_TypeRow> {
            
            private global::System.Data.DataColumn columnCompany_ID;
            
            private global::System.Data.DataColumn columnProduct_Type_ID;
            
            private global::System.Data.DataColumn columnCategory_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Company_Product_TypeDataTable() {
                this.TableName = "Company_Product_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Company_Product_TypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Company_Product_TypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Company_IDColumn {
                get {
                    return this.columnCompany_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Type_IDColumn {
                get {
                    return this.columnProduct_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Category_IDColumn {
                get {
                    return this.columnCategory_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Company_Product_TypeRow this[int index] {
                get {
                    return ((Company_Product_TypeRow)(this.Rows[index]));
                }
            }
            
            public event Company_Product_TypeRowChangeEventHandler Company_Product_TypeRowChanging;
            
            public event Company_Product_TypeRowChangeEventHandler Company_Product_TypeRowChanged;
            
            public event Company_Product_TypeRowChangeEventHandler Company_Product_TypeRowDeleting;
            
            public event Company_Product_TypeRowChangeEventHandler Company_Product_TypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCompany_Product_TypeRow(Company_Product_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Company_Product_TypeRow AddCompany_Product_TypeRow(int Company_ID, int Product_Type_ID, int Category_ID) {
                Company_Product_TypeRow rowCompany_Product_TypeRow = ((Company_Product_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Company_ID,
                        Product_Type_ID,
                        Category_ID};
                rowCompany_Product_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCompany_Product_TypeRow);
                return rowCompany_Product_TypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Company_Product_TypeRow FindByCompany_IDProduct_Type_IDCategory_ID(int Company_ID, int Product_Type_ID, int Category_ID) {
                return ((Company_Product_TypeRow)(this.Rows.Find(new object[] {
                            Company_ID,
                            Product_Type_ID,
                            Category_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Company_Product_TypeDataTable cln = ((Company_Product_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Company_Product_TypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompany_ID = base.Columns["Company_ID"];
                this.columnProduct_Type_ID = base.Columns["Product_Type_ID"];
                this.columnCategory_ID = base.Columns["Category_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompany_ID = new global::System.Data.DataColumn("Company_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany_ID);
                this.columnProduct_Type_ID = new global::System.Data.DataColumn("Product_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Type_ID);
                this.columnCategory_ID = new global::System.Data.DataColumn("Category_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompany_ID,
                                this.columnProduct_Type_ID,
                                this.columnCategory_ID}, true));
                this.columnCompany_ID.AllowDBNull = false;
                this.columnProduct_Type_ID.AllowDBNull = false;
                this.columnCategory_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Company_Product_TypeRow NewCompany_Product_TypeRow() {
                return ((Company_Product_TypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Company_Product_TypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Company_Product_TypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Company_Product_TypeRowChanged != null)) {
                    this.Company_Product_TypeRowChanged(this, new Company_Product_TypeRowChangeEvent(((Company_Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Company_Product_TypeRowChanging != null)) {
                    this.Company_Product_TypeRowChanging(this, new Company_Product_TypeRowChangeEvent(((Company_Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Company_Product_TypeRowDeleted != null)) {
                    this.Company_Product_TypeRowDeleted(this, new Company_Product_TypeRowChangeEvent(((Company_Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Company_Product_TypeRowDeleting != null)) {
                    this.Company_Product_TypeRowDeleting(this, new Company_Product_TypeRowChangeEvent(((Company_Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCompany_Product_TypeRow(Company_Product_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Company_Product_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Product_Type_AttributeDataTable : global::System.Data.TypedTableBase<Product_Type_AttributeRow> {
            
            private global::System.Data.DataColumn columnProduct_Type_ID;
            
            private global::System.Data.DataColumn columnAttribute_ID;
            
            private global::System.Data.DataColumn columnCategory_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_AttributeDataTable() {
                this.TableName = "Product_Type_Attribute";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_Type_AttributeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Product_Type_AttributeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Type_IDColumn {
                get {
                    return this.columnProduct_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Attribute_IDColumn {
                get {
                    return this.columnAttribute_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Category_IDColumn {
                get {
                    return this.columnCategory_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_AttributeRow this[int index] {
                get {
                    return ((Product_Type_AttributeRow)(this.Rows[index]));
                }
            }
            
            public event Product_Type_AttributeRowChangeEventHandler Product_Type_AttributeRowChanging;
            
            public event Product_Type_AttributeRowChangeEventHandler Product_Type_AttributeRowChanged;
            
            public event Product_Type_AttributeRowChangeEventHandler Product_Type_AttributeRowDeleting;
            
            public event Product_Type_AttributeRowChangeEventHandler Product_Type_AttributeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProduct_Type_AttributeRow(Product_Type_AttributeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_AttributeRow AddProduct_Type_AttributeRow(int Product_Type_ID, int Attribute_ID, int Category_ID) {
                Product_Type_AttributeRow rowProduct_Type_AttributeRow = ((Product_Type_AttributeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Product_Type_ID,
                        Attribute_ID,
                        Category_ID};
                rowProduct_Type_AttributeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProduct_Type_AttributeRow);
                return rowProduct_Type_AttributeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_AttributeRow FindByProduct_Type_IDAttribute_ID(int Product_Type_ID, int Attribute_ID) {
                return ((Product_Type_AttributeRow)(this.Rows.Find(new object[] {
                            Product_Type_ID,
                            Attribute_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Product_Type_AttributeDataTable cln = ((Product_Type_AttributeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Product_Type_AttributeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProduct_Type_ID = base.Columns["Product_Type_ID"];
                this.columnAttribute_ID = base.Columns["Attribute_ID"];
                this.columnCategory_ID = base.Columns["Category_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProduct_Type_ID = new global::System.Data.DataColumn("Product_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Type_ID);
                this.columnAttribute_ID = new global::System.Data.DataColumn("Attribute_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute_ID);
                this.columnCategory_ID = new global::System.Data.DataColumn("Category_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProduct_Type_ID,
                                this.columnAttribute_ID}, true));
                this.columnProduct_Type_ID.AllowDBNull = false;
                this.columnAttribute_ID.AllowDBNull = false;
                this.columnCategory_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_AttributeRow NewProduct_Type_AttributeRow() {
                return ((Product_Type_AttributeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Product_Type_AttributeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Product_Type_AttributeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Product_Type_AttributeRowChanged != null)) {
                    this.Product_Type_AttributeRowChanged(this, new Product_Type_AttributeRowChangeEvent(((Product_Type_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Product_Type_AttributeRowChanging != null)) {
                    this.Product_Type_AttributeRowChanging(this, new Product_Type_AttributeRowChangeEvent(((Product_Type_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Product_Type_AttributeRowDeleted != null)) {
                    this.Product_Type_AttributeRowDeleted(this, new Product_Type_AttributeRowChangeEvent(((Product_Type_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Product_Type_AttributeRowDeleting != null)) {
                    this.Product_Type_AttributeRowDeleting(this, new Product_Type_AttributeRowChangeEvent(((Product_Type_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProduct_Type_AttributeRow(Product_Type_AttributeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Product_Type_AttributeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Product_AttributeDataTable : global::System.Data.TypedTableBase<Product_AttributeRow> {
            
            private global::System.Data.DataColumn columnProduct_ID;
            
            private global::System.Data.DataColumn columnAttribute_ID;
            
            private global::System.Data.DataColumn columnAttribute_Variant_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_AttributeDataTable() {
                this.TableName = "Product_Attribute";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_AttributeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Product_AttributeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_IDColumn {
                get {
                    return this.columnProduct_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Attribute_IDColumn {
                get {
                    return this.columnAttribute_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Attribute_Variant_IDColumn {
                get {
                    return this.columnAttribute_Variant_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_AttributeRow this[int index] {
                get {
                    return ((Product_AttributeRow)(this.Rows[index]));
                }
            }
            
            public event Product_AttributeRowChangeEventHandler Product_AttributeRowChanging;
            
            public event Product_AttributeRowChangeEventHandler Product_AttributeRowChanged;
            
            public event Product_AttributeRowChangeEventHandler Product_AttributeRowDeleting;
            
            public event Product_AttributeRowChangeEventHandler Product_AttributeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProduct_AttributeRow(Product_AttributeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_AttributeRow AddProduct_AttributeRow(int Product_ID, int Attribute_ID, int Attribute_Variant_ID) {
                Product_AttributeRow rowProduct_AttributeRow = ((Product_AttributeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Product_ID,
                        Attribute_ID,
                        Attribute_Variant_ID};
                rowProduct_AttributeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProduct_AttributeRow);
                return rowProduct_AttributeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_AttributeRow FindByProduct_IDAttribute_ID(int Product_ID, int Attribute_ID) {
                return ((Product_AttributeRow)(this.Rows.Find(new object[] {
                            Product_ID,
                            Attribute_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Product_AttributeDataTable cln = ((Product_AttributeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Product_AttributeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProduct_ID = base.Columns["Product_ID"];
                this.columnAttribute_ID = base.Columns["Attribute_ID"];
                this.columnAttribute_Variant_ID = base.Columns["Attribute_Variant_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProduct_ID = new global::System.Data.DataColumn("Product_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_ID);
                this.columnAttribute_ID = new global::System.Data.DataColumn("Attribute_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute_ID);
                this.columnAttribute_Variant_ID = new global::System.Data.DataColumn("Attribute_Variant_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute_Variant_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProduct_ID,
                                this.columnAttribute_ID}, true));
                this.columnProduct_ID.AllowDBNull = false;
                this.columnAttribute_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_AttributeRow NewProduct_AttributeRow() {
                return ((Product_AttributeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Product_AttributeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Product_AttributeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Product_AttributeRowChanged != null)) {
                    this.Product_AttributeRowChanged(this, new Product_AttributeRowChangeEvent(((Product_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Product_AttributeRowChanging != null)) {
                    this.Product_AttributeRowChanging(this, new Product_AttributeRowChangeEvent(((Product_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Product_AttributeRowDeleted != null)) {
                    this.Product_AttributeRowDeleted(this, new Product_AttributeRowChangeEvent(((Product_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Product_AttributeRowDeleting != null)) {
                    this.Product_AttributeRowDeleting(this, new Product_AttributeRowChangeEvent(((Product_AttributeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProduct_AttributeRow(Product_AttributeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Product_AttributeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Attribute_VariantDataTable : global::System.Data.TypedTableBase<Attribute_VariantRow> {
            
            private global::System.Data.DataColumn columnAttribute_Variant_ID;
            
            private global::System.Data.DataColumn columnAttribute_ID;
            
            private global::System.Data.DataColumn columnAttribute_Variant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Attribute_VariantDataTable() {
                this.TableName = "Attribute_Variant";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Attribute_VariantDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Attribute_VariantDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Attribute_Variant_IDColumn {
                get {
                    return this.columnAttribute_Variant_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Attribute_IDColumn {
                get {
                    return this.columnAttribute_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Attribute_VariantColumn {
                get {
                    return this.columnAttribute_Variant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Attribute_VariantRow this[int index] {
                get {
                    return ((Attribute_VariantRow)(this.Rows[index]));
                }
            }
            
            public event Attribute_VariantRowChangeEventHandler Attribute_VariantRowChanging;
            
            public event Attribute_VariantRowChangeEventHandler Attribute_VariantRowChanged;
            
            public event Attribute_VariantRowChangeEventHandler Attribute_VariantRowDeleting;
            
            public event Attribute_VariantRowChangeEventHandler Attribute_VariantRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAttribute_VariantRow(Attribute_VariantRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Attribute_VariantRow AddAttribute_VariantRow(int Attribute_ID, string Attribute_Variant) {
                Attribute_VariantRow rowAttribute_VariantRow = ((Attribute_VariantRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Attribute_ID,
                        Attribute_Variant};
                rowAttribute_VariantRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAttribute_VariantRow);
                return rowAttribute_VariantRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Attribute_VariantRow FindByAttribute_Variant_ID(int Attribute_Variant_ID) {
                return ((Attribute_VariantRow)(this.Rows.Find(new object[] {
                            Attribute_Variant_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Attribute_VariantDataTable cln = ((Attribute_VariantDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Attribute_VariantDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAttribute_Variant_ID = base.Columns["Attribute_Variant_ID"];
                this.columnAttribute_ID = base.Columns["Attribute_ID"];
                this.columnAttribute_Variant = base.Columns["Attribute_Variant"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAttribute_Variant_ID = new global::System.Data.DataColumn("Attribute_Variant_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute_Variant_ID);
                this.columnAttribute_ID = new global::System.Data.DataColumn("Attribute_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute_ID);
                this.columnAttribute_Variant = new global::System.Data.DataColumn("Attribute_Variant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttribute_Variant);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAttribute_Variant_ID}, true));
                this.columnAttribute_Variant_ID.AutoIncrement = true;
                this.columnAttribute_Variant_ID.AutoIncrementSeed = -1;
                this.columnAttribute_Variant_ID.AutoIncrementStep = -1;
                this.columnAttribute_Variant_ID.AllowDBNull = false;
                this.columnAttribute_Variant_ID.ReadOnly = true;
                this.columnAttribute_Variant_ID.Unique = true;
                this.columnAttribute_Variant.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Attribute_VariantRow NewAttribute_VariantRow() {
                return ((Attribute_VariantRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Attribute_VariantRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Attribute_VariantRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Attribute_VariantRowChanged != null)) {
                    this.Attribute_VariantRowChanged(this, new Attribute_VariantRowChangeEvent(((Attribute_VariantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Attribute_VariantRowChanging != null)) {
                    this.Attribute_VariantRowChanging(this, new Attribute_VariantRowChangeEvent(((Attribute_VariantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Attribute_VariantRowDeleted != null)) {
                    this.Attribute_VariantRowDeleted(this, new Attribute_VariantRowChangeEvent(((Attribute_VariantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Attribute_VariantRowDeleting != null)) {
                    this.Attribute_VariantRowDeleting(this, new Attribute_VariantRowChangeEvent(((Attribute_VariantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAttribute_VariantRow(Attribute_VariantRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Attribute_VariantDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZipCodesDataTable : global::System.Data.TypedTableBase<ZipCodesRow> {
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnStateAbbreviation;
            
            private global::System.Data.DataColumn columnCounty;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipCodesDataTable() {
                this.TableName = "ZipCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZipCodesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ZipCodesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateAbbreviationColumn {
                get {
                    return this.columnStateAbbreviation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountyColumn {
                get {
                    return this.columnCounty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipCodesRow this[int index] {
                get {
                    return ((ZipCodesRow)(this.Rows[index]));
                }
            }
            
            public event ZipCodesRowChangeEventHandler ZipCodesRowChanging;
            
            public event ZipCodesRowChangeEventHandler ZipCodesRowChanged;
            
            public event ZipCodesRowChangeEventHandler ZipCodesRowDeleting;
            
            public event ZipCodesRowChangeEventHandler ZipCodesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddZipCodesRow(ZipCodesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipCodesRow AddZipCodesRow(string Country, string ZipCode, string City, string STATE, string StateAbbreviation, string County, decimal Latitude, decimal Longitude) {
                ZipCodesRow rowZipCodesRow = ((ZipCodesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Country,
                        ZipCode,
                        City,
                        STATE,
                        StateAbbreviation,
                        County,
                        Latitude,
                        Longitude};
                rowZipCodesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZipCodesRow);
                return rowZipCodesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ZipCodesDataTable cln = ((ZipCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZipCodesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountry = base.Columns["Country"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnCity = base.Columns["City"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnStateAbbreviation = base.Columns["StateAbbreviation"];
                this.columnCounty = base.Columns["County"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnStateAbbreviation = new global::System.Data.DataColumn("StateAbbreviation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateAbbreviation);
                this.columnCounty = new global::System.Data.DataColumn("County", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCounty);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnCountry.MaxLength = 2;
                this.columnZipCode.MaxLength = 5;
                this.columnCity.MaxLength = 200;
                this.columnSTATE.MaxLength = 50;
                this.columnStateAbbreviation.MaxLength = 2;
                this.columnCounty.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipCodesRow NewZipCodesRow() {
                return ((ZipCodesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZipCodesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ZipCodesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZipCodesRowChanged != null)) {
                    this.ZipCodesRowChanged(this, new ZipCodesRowChangeEvent(((ZipCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZipCodesRowChanging != null)) {
                    this.ZipCodesRowChanging(this, new ZipCodesRowChangeEvent(((ZipCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZipCodesRowDeleted != null)) {
                    this.ZipCodesRowDeleted(this, new ZipCodesRowChangeEvent(((ZipCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZipCodesRowDeleting != null)) {
                    this.ZipCodesRowDeleting(this, new ZipCodesRowChangeEvent(((ZipCodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveZipCodesRow(ZipCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZipCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Activity_TypeDataTable : global::System.Data.TypedTableBase<Activity_TypeRow> {
            
            private global::System.Data.DataColumn columnActivity_Type_ID;
            
            private global::System.Data.DataColumn columnActivity_Type;
            
            private global::System.Data.DataColumn columnHas_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Activity_TypeDataTable() {
                this.TableName = "Activity_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Activity_TypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Activity_TypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Activity_Type_IDColumn {
                get {
                    return this.columnActivity_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Activity_TypeColumn {
                get {
                    return this.columnActivity_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Has_IDColumn {
                get {
                    return this.columnHas_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Activity_TypeRow this[int index] {
                get {
                    return ((Activity_TypeRow)(this.Rows[index]));
                }
            }
            
            public event Activity_TypeRowChangeEventHandler Activity_TypeRowChanging;
            
            public event Activity_TypeRowChangeEventHandler Activity_TypeRowChanged;
            
            public event Activity_TypeRowChangeEventHandler Activity_TypeRowDeleting;
            
            public event Activity_TypeRowChangeEventHandler Activity_TypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActivity_TypeRow(Activity_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Activity_TypeRow AddActivity_TypeRow(string Activity_Type, bool Has_ID) {
                Activity_TypeRow rowActivity_TypeRow = ((Activity_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Activity_Type,
                        Has_ID};
                rowActivity_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActivity_TypeRow);
                return rowActivity_TypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Activity_TypeRow FindByActivity_Type_ID(int Activity_Type_ID) {
                return ((Activity_TypeRow)(this.Rows.Find(new object[] {
                            Activity_Type_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Activity_TypeDataTable cln = ((Activity_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Activity_TypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnActivity_Type_ID = base.Columns["Activity_Type_ID"];
                this.columnActivity_Type = base.Columns["Activity_Type"];
                this.columnHas_ID = base.Columns["Has_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnActivity_Type_ID = new global::System.Data.DataColumn("Activity_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivity_Type_ID);
                this.columnActivity_Type = new global::System.Data.DataColumn("Activity_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivity_Type);
                this.columnHas_ID = new global::System.Data.DataColumn("Has_ID", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHas_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnActivity_Type_ID}, true));
                this.columnActivity_Type_ID.AutoIncrement = true;
                this.columnActivity_Type_ID.AutoIncrementSeed = -1;
                this.columnActivity_Type_ID.AutoIncrementStep = -1;
                this.columnActivity_Type_ID.AllowDBNull = false;
                this.columnActivity_Type_ID.ReadOnly = true;
                this.columnActivity_Type_ID.Unique = true;
                this.columnActivity_Type.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Activity_TypeRow NewActivity_TypeRow() {
                return ((Activity_TypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Activity_TypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Activity_TypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Activity_TypeRowChanged != null)) {
                    this.Activity_TypeRowChanged(this, new Activity_TypeRowChangeEvent(((Activity_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Activity_TypeRowChanging != null)) {
                    this.Activity_TypeRowChanging(this, new Activity_TypeRowChangeEvent(((Activity_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Activity_TypeRowDeleted != null)) {
                    this.Activity_TypeRowDeleted(this, new Activity_TypeRowChangeEvent(((Activity_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Activity_TypeRowDeleting != null)) {
                    this.Activity_TypeRowDeleting(this, new Activity_TypeRowChangeEvent(((Activity_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActivity_TypeRow(Activity_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Activity_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Event_ItemDataTable : global::System.Data.TypedTableBase<Event_ItemRow> {
            
            private global::System.Data.DataColumn columnEvent_Item_ID;
            
            private global::System.Data.DataColumn columnEvent_ID;
            
            private global::System.Data.DataColumn columnEvent_Item;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_ItemDataTable() {
                this.TableName = "Event_Item";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Event_ItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Event_ItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Event_Item_IDColumn {
                get {
                    return this.columnEvent_Item_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Event_IDColumn {
                get {
                    return this.columnEvent_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Event_ItemColumn {
                get {
                    return this.columnEvent_Item;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_ItemRow this[int index] {
                get {
                    return ((Event_ItemRow)(this.Rows[index]));
                }
            }
            
            public event Event_ItemRowChangeEventHandler Event_ItemRowChanging;
            
            public event Event_ItemRowChangeEventHandler Event_ItemRowChanged;
            
            public event Event_ItemRowChangeEventHandler Event_ItemRowDeleting;
            
            public event Event_ItemRowChangeEventHandler Event_ItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEvent_ItemRow(Event_ItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_ItemRow AddEvent_ItemRow(int Event_ID, string Event_Item) {
                Event_ItemRow rowEvent_ItemRow = ((Event_ItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Event_ID,
                        Event_Item};
                rowEvent_ItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEvent_ItemRow);
                return rowEvent_ItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_ItemRow FindByEvent_Item_IDEvent_ID(int Event_Item_ID, int Event_ID) {
                return ((Event_ItemRow)(this.Rows.Find(new object[] {
                            Event_Item_ID,
                            Event_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Event_ItemDataTable cln = ((Event_ItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Event_ItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEvent_Item_ID = base.Columns["Event_Item_ID"];
                this.columnEvent_ID = base.Columns["Event_ID"];
                this.columnEvent_Item = base.Columns["Event_Item"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEvent_Item_ID = new global::System.Data.DataColumn("Event_Item_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent_Item_ID);
                this.columnEvent_ID = new global::System.Data.DataColumn("Event_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent_ID);
                this.columnEvent_Item = new global::System.Data.DataColumn("Event_Item", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent_Item);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEvent_Item_ID,
                                this.columnEvent_ID}, true));
                this.columnEvent_Item_ID.AutoIncrement = true;
                this.columnEvent_Item_ID.AutoIncrementSeed = -1;
                this.columnEvent_Item_ID.AutoIncrementStep = -1;
                this.columnEvent_Item_ID.AllowDBNull = false;
                this.columnEvent_Item_ID.ReadOnly = true;
                this.columnEvent_ID.AllowDBNull = false;
                this.columnEvent_Item.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_ItemRow NewEvent_ItemRow() {
                return ((Event_ItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Event_ItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Event_ItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Event_ItemRowChanged != null)) {
                    this.Event_ItemRowChanged(this, new Event_ItemRowChangeEvent(((Event_ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Event_ItemRowChanging != null)) {
                    this.Event_ItemRowChanging(this, new Event_ItemRowChangeEvent(((Event_ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Event_ItemRowDeleted != null)) {
                    this.Event_ItemRowDeleted(this, new Event_ItemRowChangeEvent(((Event_ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Event_ItemRowDeleting != null)) {
                    this.Event_ItemRowDeleting(this, new Event_ItemRowChangeEvent(((Event_ItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEvent_ItemRow(Event_ItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Event_ItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventDataTable : global::System.Data.TypedTableBase<EventRow> {
            
            private global::System.Data.DataColumn columnEvent_ID;
            
            private global::System.Data.DataColumn columnEvent;
            
            private global::System.Data.DataColumn columnHas_Event_Item;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnCompany_ID;
            
            private global::System.Data.DataColumn columnEvent_Days;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventDataTable() {
                this.TableName = "Event";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Event_IDColumn {
                get {
                    return this.columnEvent_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventColumn {
                get {
                    return this.columnEvent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Has_Event_ItemColumn {
                get {
                    return this.columnHas_Event_Item;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Company_IDColumn {
                get {
                    return this.columnCompany_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Event_DaysColumn {
                get {
                    return this.columnEvent_Days;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow this[int index] {
                get {
                    return ((EventRow)(this.Rows[index]));
                }
            }
            
            public event EventRowChangeEventHandler EventRowChanging;
            
            public event EventRowChangeEventHandler EventRowChanged;
            
            public event EventRowChangeEventHandler EventRowDeleting;
            
            public event EventRowChangeEventHandler EventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventRow(EventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow AddEventRow(string Event, bool Has_Event_Item, string Address, System.DateTime Date, decimal Latitude, decimal Longitude, int Company_ID, int Event_Days) {
                EventRow rowEventRow = ((EventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Event,
                        Has_Event_Item,
                        Address,
                        Date,
                        Latitude,
                        Longitude,
                        Company_ID,
                        Event_Days};
                rowEventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventRow);
                return rowEventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow FindByEvent_ID(int Event_ID) {
                return ((EventRow)(this.Rows.Find(new object[] {
                            Event_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventDataTable cln = ((EventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEvent_ID = base.Columns["Event_ID"];
                this.columnEvent = base.Columns["Event"];
                this.columnHas_Event_Item = base.Columns["Has_Event_Item"];
                this.columnAddress = base.Columns["Address"];
                this.columnDate = base.Columns["Date"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnCompany_ID = base.Columns["Company_ID"];
                this.columnEvent_Days = base.Columns["Event_Days"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEvent_ID = new global::System.Data.DataColumn("Event_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent_ID);
                this.columnEvent = new global::System.Data.DataColumn("Event", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent);
                this.columnHas_Event_Item = new global::System.Data.DataColumn("Has_Event_Item", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHas_Event_Item);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnCompany_ID = new global::System.Data.DataColumn("Company_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany_ID);
                this.columnEvent_Days = new global::System.Data.DataColumn("Event_Days", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvent_Days);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEvent_ID}, true));
                this.columnEvent_ID.AutoIncrement = true;
                this.columnEvent_ID.AutoIncrementSeed = -1;
                this.columnEvent_ID.AutoIncrementStep = -1;
                this.columnEvent_ID.AllowDBNull = false;
                this.columnEvent_ID.ReadOnly = true;
                this.columnEvent_ID.Unique = true;
                this.columnEvent.MaxLength = 150;
                this.columnAddress.MaxLength = 50;
                this.columnCompany_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow NewEventRow() {
                return ((EventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventRowChanged != null)) {
                    this.EventRowChanged(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventRowChanging != null)) {
                    this.EventRowChanging(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventRowDeleted != null)) {
                    this.EventRowDeleted(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventRowDeleting != null)) {
                    this.EventRowDeleting(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventRow(EventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductDataTable : global::System.Data.TypedTableBase<ProductRow> {
            
            private global::System.Data.DataColumn columnProduct_ID;
            
            private global::System.Data.DataColumn columnProduct;
            
            private global::System.Data.DataColumn columnProduct_Code_To_Display;
            
            private global::System.Data.DataColumn columnProduct_Code;
            
            private global::System.Data.DataColumn columnCompany_ID;
            
            private global::System.Data.DataColumn columnProduct_Type_ID;
            
            private global::System.Data.DataColumn columnCategory_ID;
            
            private global::System.Data.DataColumn columnEntered_Date;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIs_Active;
            
            private global::System.Data.DataColumn columnProduct_Image_Link;
            
            private global::System.Data.DataColumn columnProduct_Brand_Image_Link;
            
            private global::System.Data.DataColumn columnProduct_Heading;
            
            private global::System.Data.DataColumn columnHeading_Link;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductDataTable() {
                this.TableName = "Product";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_IDColumn {
                get {
                    return this.columnProduct_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductColumn {
                get {
                    return this.columnProduct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Code_To_DisplayColumn {
                get {
                    return this.columnProduct_Code_To_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_CodeColumn {
                get {
                    return this.columnProduct_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Company_IDColumn {
                get {
                    return this.columnCompany_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Type_IDColumn {
                get {
                    return this.columnProduct_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Category_IDColumn {
                get {
                    return this.columnCategory_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Entered_DateColumn {
                get {
                    return this.columnEntered_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_ActiveColumn {
                get {
                    return this.columnIs_Active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Image_LinkColumn {
                get {
                    return this.columnProduct_Image_Link;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Brand_Image_LinkColumn {
                get {
                    return this.columnProduct_Brand_Image_Link;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_HeadingColumn {
                get {
                    return this.columnProduct_Heading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Heading_LinkColumn {
                get {
                    return this.columnHeading_Link;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow this[int index] {
                get {
                    return ((ProductRow)(this.Rows[index]));
                }
            }
            
            public event ProductRowChangeEventHandler ProductRowChanging;
            
            public event ProductRowChangeEventHandler ProductRowChanged;
            
            public event ProductRowChangeEventHandler ProductRowDeleting;
            
            public event ProductRowChangeEventHandler ProductRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductRow(ProductRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow AddProductRow(string Product, string Product_Code_To_Display, string Product_Code, int Company_ID, int Product_Type_ID, int Category_ID, System.DateTime Entered_Date, string Description, bool Is_Active, string Product_Image_Link, string Product_Brand_Image_Link, string Product_Heading, string Heading_Link) {
                ProductRow rowProductRow = ((ProductRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Product,
                        Product_Code_To_Display,
                        Product_Code,
                        Company_ID,
                        Product_Type_ID,
                        Category_ID,
                        Entered_Date,
                        Description,
                        Is_Active,
                        Product_Image_Link,
                        Product_Brand_Image_Link,
                        Product_Heading,
                        Heading_Link};
                rowProductRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProductRow);
                return rowProductRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow FindByProduct_ID(int Product_ID) {
                return ((ProductRow)(this.Rows.Find(new object[] {
                            Product_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProductDataTable cln = ((ProductDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProductDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProduct_ID = base.Columns["Product_ID"];
                this.columnProduct = base.Columns["Product"];
                this.columnProduct_Code_To_Display = base.Columns["Product_Code_To_Display"];
                this.columnProduct_Code = base.Columns["Product_Code"];
                this.columnCompany_ID = base.Columns["Company_ID"];
                this.columnProduct_Type_ID = base.Columns["Product_Type_ID"];
                this.columnCategory_ID = base.Columns["Category_ID"];
                this.columnEntered_Date = base.Columns["Entered_Date"];
                this.columnDescription = base.Columns["Description"];
                this.columnIs_Active = base.Columns["Is_Active"];
                this.columnProduct_Image_Link = base.Columns["Product_Image_Link"];
                this.columnProduct_Brand_Image_Link = base.Columns["Product_Brand_Image_Link"];
                this.columnProduct_Heading = base.Columns["Product_Heading"];
                this.columnHeading_Link = base.Columns["Heading_Link"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProduct_ID = new global::System.Data.DataColumn("Product_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_ID);
                this.columnProduct = new global::System.Data.DataColumn("Product", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct);
                this.columnProduct_Code_To_Display = new global::System.Data.DataColumn("Product_Code_To_Display", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Code_To_Display);
                this.columnProduct_Code = new global::System.Data.DataColumn("Product_Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Code);
                this.columnCompany_ID = new global::System.Data.DataColumn("Company_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompany_ID);
                this.columnProduct_Type_ID = new global::System.Data.DataColumn("Product_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Type_ID);
                this.columnCategory_ID = new global::System.Data.DataColumn("Category_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory_ID);
                this.columnEntered_Date = new global::System.Data.DataColumn("Entered_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntered_Date);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIs_Active = new global::System.Data.DataColumn("Is_Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Active);
                this.columnProduct_Image_Link = new global::System.Data.DataColumn("Product_Image_Link", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Image_Link);
                this.columnProduct_Brand_Image_Link = new global::System.Data.DataColumn("Product_Brand_Image_Link", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Brand_Image_Link);
                this.columnProduct_Heading = new global::System.Data.DataColumn("Product_Heading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Heading);
                this.columnHeading_Link = new global::System.Data.DataColumn("Heading_Link", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeading_Link);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProduct_ID}, true));
                this.columnProduct_ID.AutoIncrement = true;
                this.columnProduct_ID.AutoIncrementSeed = -1;
                this.columnProduct_ID.AutoIncrementStep = -1;
                this.columnProduct_ID.AllowDBNull = false;
                this.columnProduct_ID.ReadOnly = true;
                this.columnProduct_ID.Unique = true;
                this.columnProduct.MaxLength = 50;
                this.columnProduct_Code_To_Display.MaxLength = 50;
                this.columnProduct_Code.MaxLength = 50;
                this.columnDescription.MaxLength = 500;
                this.columnProduct_Image_Link.MaxLength = 150;
                this.columnProduct_Brand_Image_Link.MaxLength = 150;
                this.columnProduct_Heading.MaxLength = 150;
                this.columnHeading_Link.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow NewProductRow() {
                return ((ProductRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProductRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProductRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductRowChanged != null)) {
                    this.ProductRowChanged(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductRowChanging != null)) {
                    this.ProductRowChanging(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductRowDeleted != null)) {
                    this.ProductRowDeleted(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductRowDeleting != null)) {
                    this.ProductRowDeleting(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductRow(ProductRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Secret_QuestionDataTable : global::System.Data.TypedTableBase<Secret_QuestionRow> {
            
            private global::System.Data.DataColumn columnSecret_Question_ID;
            
            private global::System.Data.DataColumn columnSecret_Question;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Secret_QuestionDataTable() {
                this.TableName = "Secret_Question";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Secret_QuestionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Secret_QuestionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Secret_Question_IDColumn {
                get {
                    return this.columnSecret_Question_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Secret_QuestionColumn {
                get {
                    return this.columnSecret_Question;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Secret_QuestionRow this[int index] {
                get {
                    return ((Secret_QuestionRow)(this.Rows[index]));
                }
            }
            
            public event Secret_QuestionRowChangeEventHandler Secret_QuestionRowChanging;
            
            public event Secret_QuestionRowChangeEventHandler Secret_QuestionRowChanged;
            
            public event Secret_QuestionRowChangeEventHandler Secret_QuestionRowDeleting;
            
            public event Secret_QuestionRowChangeEventHandler Secret_QuestionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSecret_QuestionRow(Secret_QuestionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Secret_QuestionRow AddSecret_QuestionRow(int Secret_Question_ID, string Secret_Question) {
                Secret_QuestionRow rowSecret_QuestionRow = ((Secret_QuestionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Secret_Question_ID,
                        Secret_Question};
                rowSecret_QuestionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSecret_QuestionRow);
                return rowSecret_QuestionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Secret_QuestionDataTable cln = ((Secret_QuestionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Secret_QuestionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSecret_Question_ID = base.Columns["Secret_Question_ID"];
                this.columnSecret_Question = base.Columns["Secret_Question"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSecret_Question_ID = new global::System.Data.DataColumn("Secret_Question_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecret_Question_ID);
                this.columnSecret_Question = new global::System.Data.DataColumn("Secret_Question", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecret_Question);
                this.columnSecret_Question_ID.AllowDBNull = false;
                this.columnSecret_Question.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Secret_QuestionRow NewSecret_QuestionRow() {
                return ((Secret_QuestionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Secret_QuestionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Secret_QuestionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Secret_QuestionRowChanged != null)) {
                    this.Secret_QuestionRowChanged(this, new Secret_QuestionRowChangeEvent(((Secret_QuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Secret_QuestionRowChanging != null)) {
                    this.Secret_QuestionRowChanging(this, new Secret_QuestionRowChangeEvent(((Secret_QuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Secret_QuestionRowDeleted != null)) {
                    this.Secret_QuestionRowDeleted(this, new Secret_QuestionRowChangeEvent(((Secret_QuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Secret_QuestionRowDeleting != null)) {
                    this.Secret_QuestionRowDeleting(this, new Secret_QuestionRowChangeEvent(((Secret_QuestionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSecret_QuestionRow(Secret_QuestionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Secret_QuestionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Product_TypeDataTable : global::System.Data.TypedTableBase<Product_TypeRow> {
            
            private global::System.Data.DataColumn columnProduct_Type_ID;
            
            private global::System.Data.DataColumn columnProduct_Type;
            
            private global::System.Data.DataColumn columnCategory_ID;
            
            private global::System.Data.DataColumn columnEntered_Date;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIs_Active;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_TypeDataTable() {
                this.TableName = "Product_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_TypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Product_TypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_Type_IDColumn {
                get {
                    return this.columnProduct_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_TypeColumn {
                get {
                    return this.columnProduct_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Category_IDColumn {
                get {
                    return this.columnCategory_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Entered_DateColumn {
                get {
                    return this.columnEntered_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_ActiveColumn {
                get {
                    return this.columnIs_Active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_TypeRow this[int index] {
                get {
                    return ((Product_TypeRow)(this.Rows[index]));
                }
            }
            
            public event Product_TypeRowChangeEventHandler Product_TypeRowChanging;
            
            public event Product_TypeRowChangeEventHandler Product_TypeRowChanged;
            
            public event Product_TypeRowChangeEventHandler Product_TypeRowDeleting;
            
            public event Product_TypeRowChangeEventHandler Product_TypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProduct_TypeRow(Product_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_TypeRow AddProduct_TypeRow(string Product_Type, int Category_ID, System.DateTime Entered_Date, string Description, bool Is_Active) {
                Product_TypeRow rowProduct_TypeRow = ((Product_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Product_Type,
                        Category_ID,
                        Entered_Date,
                        Description,
                        Is_Active};
                rowProduct_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProduct_TypeRow);
                return rowProduct_TypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_TypeRow FindByProduct_Type_ID(int Product_Type_ID) {
                return ((Product_TypeRow)(this.Rows.Find(new object[] {
                            Product_Type_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Product_TypeDataTable cln = ((Product_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Product_TypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProduct_Type_ID = base.Columns["Product_Type_ID"];
                this.columnProduct_Type = base.Columns["Product_Type"];
                this.columnCategory_ID = base.Columns["Category_ID"];
                this.columnEntered_Date = base.Columns["Entered_Date"];
                this.columnDescription = base.Columns["Description"];
                this.columnIs_Active = base.Columns["Is_Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProduct_Type_ID = new global::System.Data.DataColumn("Product_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Type_ID);
                this.columnProduct_Type = new global::System.Data.DataColumn("Product_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Type);
                this.columnCategory_ID = new global::System.Data.DataColumn("Category_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory_ID);
                this.columnEntered_Date = new global::System.Data.DataColumn("Entered_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntered_Date);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIs_Active = new global::System.Data.DataColumn("Is_Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Active);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProduct_Type_ID}, true));
                this.columnProduct_Type_ID.AutoIncrement = true;
                this.columnProduct_Type_ID.AutoIncrementSeed = -1;
                this.columnProduct_Type_ID.AutoIncrementStep = -1;
                this.columnProduct_Type_ID.AllowDBNull = false;
                this.columnProduct_Type_ID.ReadOnly = true;
                this.columnProduct_Type_ID.Unique = true;
                this.columnProduct_Type.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_TypeRow NewProduct_TypeRow() {
                return ((Product_TypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Product_TypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Product_TypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Product_TypeRowChanged != null)) {
                    this.Product_TypeRowChanged(this, new Product_TypeRowChangeEvent(((Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Product_TypeRowChanging != null)) {
                    this.Product_TypeRowChanging(this, new Product_TypeRowChangeEvent(((Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Product_TypeRowDeleted != null)) {
                    this.Product_TypeRowDeleted(this, new Product_TypeRowChangeEvent(((Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Product_TypeRowDeleting != null)) {
                    this.Product_TypeRowDeleting(this, new Product_TypeRowChangeEvent(((Product_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProduct_TypeRow(Product_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Product_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistributorDataTable : global::System.Data.TypedTableBase<DistributorRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIs_Active;
            
            private global::System.Data.DataColumn columnDistributor_ID;
            
            private global::System.Data.DataColumn columnDistributor;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnZip_Code;
            
            private global::System.Data.DataColumn columnBuildingAppartment;
            
            private global::System.Data.DataColumn columnStreet_No;
            
            private global::System.Data.DataColumn columnStreet_Name;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnPhone1;
            
            private global::System.Data.DataColumn columnPhone2;
            
            private global::System.Data.DataColumn columnEmail2;
            
            private global::System.Data.DataColumn columnWebsite;
            
            private global::System.Data.DataColumn columnIs_Email1_Display;
            
            private global::System.Data.DataColumn columnIs_Email2_Display;
            
            private global::System.Data.DataColumn columnIs_Phone1_Display;
            
            private global::System.Data.DataColumn columnIs_Phone2_Display;
            
            private global::System.Data.DataColumn columnIs_Website_Display;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributorDataTable() {
                this.TableName = "Distributor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistributorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_ActiveColumn {
                get {
                    return this.columnIs_Active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Distributor_IDColumn {
                get {
                    return this.columnDistributor_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistributorColumn {
                get {
                    return this.columnDistributor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Zip_CodeColumn {
                get {
                    return this.columnZip_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildingAppartmentColumn {
                get {
                    return this.columnBuildingAppartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street_NoColumn {
                get {
                    return this.columnStreet_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street_NameColumn {
                get {
                    return this.columnStreet_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone1Column {
                get {
                    return this.columnPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone2Column {
                get {
                    return this.columnPhone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Email2Column {
                get {
                    return this.columnEmail2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebsiteColumn {
                get {
                    return this.columnWebsite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Email1_DisplayColumn {
                get {
                    return this.columnIs_Email1_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Email2_DisplayColumn {
                get {
                    return this.columnIs_Email2_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Phone1_DisplayColumn {
                get {
                    return this.columnIs_Phone1_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Phone2_DisplayColumn {
                get {
                    return this.columnIs_Phone2_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Website_DisplayColumn {
                get {
                    return this.columnIs_Website_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributorRow this[int index] {
                get {
                    return ((DistributorRow)(this.Rows[index]));
                }
            }
            
            public event DistributorRowChangeEventHandler DistributorRowChanging;
            
            public event DistributorRowChangeEventHandler DistributorRowChanged;
            
            public event DistributorRowChangeEventHandler DistributorRowDeleting;
            
            public event DistributorRowChangeEventHandler DistributorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistributorRow(DistributorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributorRow AddDistributorRow(
                        bool Is_Active, 
                        int Distributor_ID, 
                        string Distributor, 
                        string City, 
                        string State, 
                        string Address, 
                        decimal Latitude, 
                        decimal Longitude, 
                        string Email, 
                        string Zip_Code, 
                        string BuildingAppartment, 
                        string Street_No, 
                        string Street_Name, 
                        string Country, 
                        string Phone1, 
                        string Phone2, 
                        string Email2, 
                        string Website, 
                        bool Is_Email1_Display, 
                        bool Is_Email2_Display, 
                        bool Is_Phone1_Display, 
                        bool Is_Phone2_Display, 
                        bool Is_Website_Display) {
                DistributorRow rowDistributorRow = ((DistributorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Is_Active,
                        Distributor_ID,
                        Distributor,
                        City,
                        State,
                        Address,
                        Latitude,
                        Longitude,
                        Email,
                        Zip_Code,
                        BuildingAppartment,
                        Street_No,
                        Street_Name,
                        Country,
                        Phone1,
                        Phone2,
                        Email2,
                        Website,
                        Is_Email1_Display,
                        Is_Email2_Display,
                        Is_Phone1_Display,
                        Is_Phone2_Display,
                        Is_Website_Display};
                rowDistributorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDistributorRow);
                return rowDistributorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributorRow FindByID(int ID) {
                return ((DistributorRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DistributorDataTable cln = ((DistributorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DistributorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIs_Active = base.Columns["Is_Active"];
                this.columnDistributor_ID = base.Columns["Distributor_ID"];
                this.columnDistributor = base.Columns["Distributor"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnAddress = base.Columns["Address"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnEmail = base.Columns["Email"];
                this.columnZip_Code = base.Columns["Zip_Code"];
                this.columnBuildingAppartment = base.Columns["BuildingAppartment"];
                this.columnStreet_No = base.Columns["Street_No"];
                this.columnStreet_Name = base.Columns["Street_Name"];
                this.columnCountry = base.Columns["Country"];
                this.columnPhone1 = base.Columns["Phone1"];
                this.columnPhone2 = base.Columns["Phone2"];
                this.columnEmail2 = base.Columns["Email2"];
                this.columnWebsite = base.Columns["Website"];
                this.columnIs_Email1_Display = base.Columns["Is_Email1_Display"];
                this.columnIs_Email2_Display = base.Columns["Is_Email2_Display"];
                this.columnIs_Phone1_Display = base.Columns["Is_Phone1_Display"];
                this.columnIs_Phone2_Display = base.Columns["Is_Phone2_Display"];
                this.columnIs_Website_Display = base.Columns["Is_Website_Display"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIs_Active = new global::System.Data.DataColumn("Is_Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Active);
                this.columnDistributor_ID = new global::System.Data.DataColumn("Distributor_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributor_ID);
                this.columnDistributor = new global::System.Data.DataColumn("Distributor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributor);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnZip_Code = new global::System.Data.DataColumn("Zip_Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip_Code);
                this.columnBuildingAppartment = new global::System.Data.DataColumn("BuildingAppartment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingAppartment);
                this.columnStreet_No = new global::System.Data.DataColumn("Street_No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet_No);
                this.columnStreet_Name = new global::System.Data.DataColumn("Street_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet_Name);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnPhone1 = new global::System.Data.DataColumn("Phone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone1);
                this.columnPhone2 = new global::System.Data.DataColumn("Phone2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone2);
                this.columnEmail2 = new global::System.Data.DataColumn("Email2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail2);
                this.columnWebsite = new global::System.Data.DataColumn("Website", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebsite);
                this.columnIs_Email1_Display = new global::System.Data.DataColumn("Is_Email1_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Email1_Display);
                this.columnIs_Email2_Display = new global::System.Data.DataColumn("Is_Email2_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Email2_Display);
                this.columnIs_Phone1_Display = new global::System.Data.DataColumn("Is_Phone1_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Phone1_Display);
                this.columnIs_Phone2_Display = new global::System.Data.DataColumn("Is_Phone2_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Phone2_Display);
                this.columnIs_Website_Display = new global::System.Data.DataColumn("Is_Website_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Website_Display);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnDistributor_ID.AllowDBNull = false;
                this.columnDistributor.MaxLength = 150;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 550;
                this.columnEmail.MaxLength = 250;
                this.columnZip_Code.MaxLength = 50;
                this.columnBuildingAppartment.MaxLength = 550;
                this.columnStreet_No.MaxLength = 50;
                this.columnStreet_Name.MaxLength = 50;
                this.columnCountry.MaxLength = 50;
                this.columnPhone1.MaxLength = 250;
                this.columnPhone2.MaxLength = 250;
                this.columnEmail2.MaxLength = 250;
                this.columnWebsite.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributorRow NewDistributorRow() {
                return ((DistributorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DistributorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DistributorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistributorRowChanged != null)) {
                    this.DistributorRowChanged(this, new DistributorRowChangeEvent(((DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistributorRowChanging != null)) {
                    this.DistributorRowChanging(this, new DistributorRowChangeEvent(((DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistributorRowDeleted != null)) {
                    this.DistributorRowDeleted(this, new DistributorRowChangeEvent(((DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistributorRowDeleting != null)) {
                    this.DistributorRowDeleting(this, new DistributorRowChangeEvent(((DistributorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistributorRow(DistributorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistributorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerDataTable : global::System.Data.TypedTableBase<CustomerRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnIs_Active;
            
            private global::System.Data.DataColumn columnCustomer_ID;
            
            private global::System.Data.DataColumn columnCustomer;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnZip_Code;
            
            private global::System.Data.DataColumn columnBuildingAppartment;
            
            private global::System.Data.DataColumn columnStreet_No;
            
            private global::System.Data.DataColumn columnStreet_Name;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnPhone1;
            
            private global::System.Data.DataColumn columnPhone2;
            
            private global::System.Data.DataColumn columnEmail2;
            
            private global::System.Data.DataColumn columnWebsite;
            
            private global::System.Data.DataColumn columnIs_Email1_Display;
            
            private global::System.Data.DataColumn columnIs_Email2_Display;
            
            private global::System.Data.DataColumn columnIs_Phone1_Display;
            
            private global::System.Data.DataColumn columnIs_Phone2_Display;
            
            private global::System.Data.DataColumn columnIs_Website_Display;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerDataTable() {
                this.TableName = "Customer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_ActiveColumn {
                get {
                    return this.columnIs_Active;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Customer_IDColumn {
                get {
                    return this.columnCustomer_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerColumn {
                get {
                    return this.columnCustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Zip_CodeColumn {
                get {
                    return this.columnZip_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildingAppartmentColumn {
                get {
                    return this.columnBuildingAppartment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street_NoColumn {
                get {
                    return this.columnStreet_No;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Street_NameColumn {
                get {
                    return this.columnStreet_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone1Column {
                get {
                    return this.columnPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Phone2Column {
                get {
                    return this.columnPhone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Email2Column {
                get {
                    return this.columnEmail2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebsiteColumn {
                get {
                    return this.columnWebsite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Email1_DisplayColumn {
                get {
                    return this.columnIs_Email1_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Email2_DisplayColumn {
                get {
                    return this.columnIs_Email2_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Phone1_DisplayColumn {
                get {
                    return this.columnIs_Phone1_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Phone2_DisplayColumn {
                get {
                    return this.columnIs_Phone2_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Is_Website_DisplayColumn {
                get {
                    return this.columnIs_Website_Display;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow this[int index] {
                get {
                    return ((CustomerRow)(this.Rows[index]));
                }
            }
            
            public event CustomerRowChangeEventHandler CustomerRowChanging;
            
            public event CustomerRowChangeEventHandler CustomerRowChanged;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleting;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerRow(CustomerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow AddCustomerRow(
                        bool Is_Active, 
                        int Customer_ID, 
                        string Customer, 
                        string City, 
                        string State, 
                        string Address, 
                        decimal Latitude, 
                        decimal Longitude, 
                        string Email, 
                        string Zip_Code, 
                        string BuildingAppartment, 
                        string Street_No, 
                        string Street_Name, 
                        string Country, 
                        string Phone1, 
                        string Phone2, 
                        string Email2, 
                        string Website, 
                        bool Is_Email1_Display, 
                        bool Is_Email2_Display, 
                        bool Is_Phone1_Display, 
                        bool Is_Phone2_Display, 
                        bool Is_Website_Display) {
                CustomerRow rowCustomerRow = ((CustomerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Is_Active,
                        Customer_ID,
                        Customer,
                        City,
                        State,
                        Address,
                        Latitude,
                        Longitude,
                        Email,
                        Zip_Code,
                        BuildingAppartment,
                        Street_No,
                        Street_Name,
                        Country,
                        Phone1,
                        Phone2,
                        Email2,
                        Website,
                        Is_Email1_Display,
                        Is_Email2_Display,
                        Is_Phone1_Display,
                        Is_Phone2_Display,
                        Is_Website_Display};
                rowCustomerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCustomerRow);
                return rowCustomerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow FindByID(int ID) {
                return ((CustomerRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CustomerDataTable cln = ((CustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CustomerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnIs_Active = base.Columns["Is_Active"];
                this.columnCustomer_ID = base.Columns["Customer_ID"];
                this.columnCustomer = base.Columns["Customer"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnAddress = base.Columns["Address"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnEmail = base.Columns["Email"];
                this.columnZip_Code = base.Columns["Zip_Code"];
                this.columnBuildingAppartment = base.Columns["BuildingAppartment"];
                this.columnStreet_No = base.Columns["Street_No"];
                this.columnStreet_Name = base.Columns["Street_Name"];
                this.columnCountry = base.Columns["Country"];
                this.columnPhone1 = base.Columns["Phone1"];
                this.columnPhone2 = base.Columns["Phone2"];
                this.columnEmail2 = base.Columns["Email2"];
                this.columnWebsite = base.Columns["Website"];
                this.columnIs_Email1_Display = base.Columns["Is_Email1_Display"];
                this.columnIs_Email2_Display = base.Columns["Is_Email2_Display"];
                this.columnIs_Phone1_Display = base.Columns["Is_Phone1_Display"];
                this.columnIs_Phone2_Display = base.Columns["Is_Phone2_Display"];
                this.columnIs_Website_Display = base.Columns["Is_Website_Display"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnIs_Active = new global::System.Data.DataColumn("Is_Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Active);
                this.columnCustomer_ID = new global::System.Data.DataColumn("Customer_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer_ID);
                this.columnCustomer = new global::System.Data.DataColumn("Customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnZip_Code = new global::System.Data.DataColumn("Zip_Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZip_Code);
                this.columnBuildingAppartment = new global::System.Data.DataColumn("BuildingAppartment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingAppartment);
                this.columnStreet_No = new global::System.Data.DataColumn("Street_No", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet_No);
                this.columnStreet_Name = new global::System.Data.DataColumn("Street_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet_Name);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnPhone1 = new global::System.Data.DataColumn("Phone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone1);
                this.columnPhone2 = new global::System.Data.DataColumn("Phone2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone2);
                this.columnEmail2 = new global::System.Data.DataColumn("Email2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail2);
                this.columnWebsite = new global::System.Data.DataColumn("Website", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebsite);
                this.columnIs_Email1_Display = new global::System.Data.DataColumn("Is_Email1_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Email1_Display);
                this.columnIs_Email2_Display = new global::System.Data.DataColumn("Is_Email2_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Email2_Display);
                this.columnIs_Phone1_Display = new global::System.Data.DataColumn("Is_Phone1_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Phone1_Display);
                this.columnIs_Phone2_Display = new global::System.Data.DataColumn("Is_Phone2_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Phone2_Display);
                this.columnIs_Website_Display = new global::System.Data.DataColumn("Is_Website_Display", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIs_Website_Display);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnCustomer_ID.AllowDBNull = false;
                this.columnCustomer.MaxLength = 150;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnAddress.AllowDBNull = false;
                this.columnAddress.MaxLength = 550;
                this.columnEmail.MaxLength = 250;
                this.columnZip_Code.MaxLength = 50;
                this.columnBuildingAppartment.MaxLength = 50;
                this.columnStreet_No.MaxLength = 50;
                this.columnStreet_Name.MaxLength = 50;
                this.columnCountry.MaxLength = 50;
                this.columnPhone1.MaxLength = 250;
                this.columnPhone2.MaxLength = 250;
                this.columnEmail2.MaxLength = 250;
                this.columnWebsite.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow NewCustomerRow() {
                return ((CustomerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CustomerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CustomerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerRowChanged != null)) {
                    this.CustomerRowChanged(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerRowChanging != null)) {
                    this.CustomerRowChanging(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerRowDeleted != null)) {
                    this.CustomerRowDeleted(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerRowDeleting != null)) {
                    this.CustomerRowDeleting(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerRow(CustomerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrendDataTable : global::System.Data.TypedTableBase<TrendRow> {
            
            private global::System.Data.DataColumn columnTrend_ID;
            
            private global::System.Data.DataColumn columnTrend;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrendDataTable() {
                this.TableName = "Trend";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrendDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrendDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Trend_IDColumn {
                get {
                    return this.columnTrend_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrendColumn {
                get {
                    return this.columnTrend;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrendRow this[int index] {
                get {
                    return ((TrendRow)(this.Rows[index]));
                }
            }
            
            public event TrendRowChangeEventHandler TrendRowChanging;
            
            public event TrendRowChangeEventHandler TrendRowChanged;
            
            public event TrendRowChangeEventHandler TrendRowDeleting;
            
            public event TrendRowChangeEventHandler TrendRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrendRow(TrendRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrendRow AddTrendRow(string Trend) {
                TrendRow rowTrendRow = ((TrendRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Trend};
                rowTrendRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTrendRow);
                return rowTrendRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrendRow FindByTrend_ID(int Trend_ID) {
                return ((TrendRow)(this.Rows.Find(new object[] {
                            Trend_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TrendDataTable cln = ((TrendDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TrendDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTrend_ID = base.Columns["Trend_ID"];
                this.columnTrend = base.Columns["Trend"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTrend_ID = new global::System.Data.DataColumn("Trend_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrend_ID);
                this.columnTrend = new global::System.Data.DataColumn("Trend", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrend);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTrend_ID}, true));
                this.columnTrend_ID.AutoIncrement = true;
                this.columnTrend_ID.AutoIncrementSeed = -1;
                this.columnTrend_ID.AutoIncrementStep = -1;
                this.columnTrend_ID.AllowDBNull = false;
                this.columnTrend_ID.ReadOnly = true;
                this.columnTrend_ID.Unique = true;
                this.columnTrend.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrendRow NewTrendRow() {
                return ((TrendRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TrendRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TrendRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrendRowChanged != null)) {
                    this.TrendRowChanged(this, new TrendRowChangeEvent(((TrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrendRowChanging != null)) {
                    this.TrendRowChanging(this, new TrendRowChangeEvent(((TrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrendRowDeleted != null)) {
                    this.TrendRowDeleted(this, new TrendRowChangeEvent(((TrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrendRowDeleting != null)) {
                    this.TrendRowDeleting(this, new TrendRowChangeEvent(((TrendRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrendRow(TrendRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrendDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SourceDataTable : global::System.Data.TypedTableBase<SourceRow> {
            
            private global::System.Data.DataColumn columnSource_ID;
            
            private global::System.Data.DataColumn columnSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceDataTable() {
                this.TableName = "Source";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Source_IDColumn {
                get {
                    return this.columnSource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow this[int index] {
                get {
                    return ((SourceRow)(this.Rows[index]));
                }
            }
            
            public event SourceRowChangeEventHandler SourceRowChanging;
            
            public event SourceRowChangeEventHandler SourceRowChanged;
            
            public event SourceRowChangeEventHandler SourceRowDeleting;
            
            public event SourceRowChangeEventHandler SourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSourceRow(SourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow AddSourceRow(string Source) {
                SourceRow rowSourceRow = ((SourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Source};
                rowSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSourceRow);
                return rowSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow FindBySource_ID(int Source_ID) {
                return ((SourceRow)(this.Rows.Find(new object[] {
                            Source_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SourceDataTable cln = ((SourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSource_ID = base.Columns["Source_ID"];
                this.columnSource = base.Columns["Source"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSource_ID = new global::System.Data.DataColumn("Source_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource_ID);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSource_ID}, true));
                this.columnSource_ID.AutoIncrement = true;
                this.columnSource_ID.AutoIncrementSeed = -1;
                this.columnSource_ID.AutoIncrementStep = -1;
                this.columnSource_ID.AllowDBNull = false;
                this.columnSource_ID.ReadOnly = true;
                this.columnSource_ID.Unique = true;
                this.columnSource.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow NewSourceRow() {
                return ((SourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SourceRowChanged != null)) {
                    this.SourceRowChanged(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SourceRowChanging != null)) {
                    this.SourceRowChanging(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SourceRowDeleted != null)) {
                    this.SourceRowDeleted(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SourceRowDeleting != null)) {
                    this.SourceRowDeleting(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSourceRow(SourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rank_TypeDataTable : global::System.Data.TypedTableBase<Rank_TypeRow> {
            
            private global::System.Data.DataColumn columnRank_Type_ID;
            
            private global::System.Data.DataColumn columnRank_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rank_TypeDataTable() {
                this.TableName = "Rank_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rank_TypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rank_TypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rank_Type_IDColumn {
                get {
                    return this.columnRank_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rank_TypeColumn {
                get {
                    return this.columnRank_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rank_TypeRow this[int index] {
                get {
                    return ((Rank_TypeRow)(this.Rows[index]));
                }
            }
            
            public event Rank_TypeRowChangeEventHandler Rank_TypeRowChanging;
            
            public event Rank_TypeRowChangeEventHandler Rank_TypeRowChanged;
            
            public event Rank_TypeRowChangeEventHandler Rank_TypeRowDeleting;
            
            public event Rank_TypeRowChangeEventHandler Rank_TypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRank_TypeRow(Rank_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rank_TypeRow AddRank_TypeRow(int Rank_Type_ID, string Rank_Type) {
                Rank_TypeRow rowRank_TypeRow = ((Rank_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Rank_Type_ID,
                        Rank_Type};
                rowRank_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRank_TypeRow);
                return rowRank_TypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rank_TypeRow FindByRank_Type_ID(int Rank_Type_ID) {
                return ((Rank_TypeRow)(this.Rows.Find(new object[] {
                            Rank_Type_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Rank_TypeDataTable cln = ((Rank_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Rank_TypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRank_Type_ID = base.Columns["Rank_Type_ID"];
                this.columnRank_Type = base.Columns["Rank_Type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRank_Type_ID = new global::System.Data.DataColumn("Rank_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRank_Type_ID);
                this.columnRank_Type = new global::System.Data.DataColumn("Rank_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRank_Type);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRank_Type_ID}, true));
                this.columnRank_Type_ID.AllowDBNull = false;
                this.columnRank_Type_ID.Unique = true;
                this.columnRank_Type.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rank_TypeRow NewRank_TypeRow() {
                return ((Rank_TypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Rank_TypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Rank_TypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rank_TypeRowChanged != null)) {
                    this.Rank_TypeRowChanged(this, new Rank_TypeRowChangeEvent(((Rank_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rank_TypeRowChanging != null)) {
                    this.Rank_TypeRowChanging(this, new Rank_TypeRowChangeEvent(((Rank_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rank_TypeRowDeleted != null)) {
                    this.Rank_TypeRowDeleted(this, new Rank_TypeRowChangeEvent(((Rank_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rank_TypeRowDeleting != null)) {
                    this.Rank_TypeRowDeleting(this, new Rank_TypeRowChangeEvent(((Rank_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRank_TypeRow(Rank_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rank_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Marker_TypeDataTable : global::System.Data.TypedTableBase<Marker_TypeRow> {
            
            private global::System.Data.DataColumn columnMarker_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_TypeDataTable() {
                this.TableName = "Marker_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Marker_TypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Marker_TypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Marker_TypeColumn {
                get {
                    return this.columnMarker_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_TypeRow this[int index] {
                get {
                    return ((Marker_TypeRow)(this.Rows[index]));
                }
            }
            
            public event Marker_TypeRowChangeEventHandler Marker_TypeRowChanging;
            
            public event Marker_TypeRowChangeEventHandler Marker_TypeRowChanged;
            
            public event Marker_TypeRowChangeEventHandler Marker_TypeRowDeleting;
            
            public event Marker_TypeRowChangeEventHandler Marker_TypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMarker_TypeRow(Marker_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_TypeRow AddMarker_TypeRow(string Marker_Type) {
                Marker_TypeRow rowMarker_TypeRow = ((Marker_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Marker_Type};
                rowMarker_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMarker_TypeRow);
                return rowMarker_TypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Marker_TypeDataTable cln = ((Marker_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Marker_TypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMarker_Type = base.Columns["Marker_Type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMarker_Type = new global::System.Data.DataColumn("Marker_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarker_Type);
                this.columnMarker_Type.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_TypeRow NewMarker_TypeRow() {
                return ((Marker_TypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Marker_TypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Marker_TypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Marker_TypeRowChanged != null)) {
                    this.Marker_TypeRowChanged(this, new Marker_TypeRowChangeEvent(((Marker_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Marker_TypeRowChanging != null)) {
                    this.Marker_TypeRowChanging(this, new Marker_TypeRowChangeEvent(((Marker_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Marker_TypeRowDeleted != null)) {
                    this.Marker_TypeRowDeleted(this, new Marker_TypeRowChangeEvent(((Marker_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Marker_TypeRowDeleting != null)) {
                    this.Marker_TypeRowDeleting(this, new Marker_TypeRowChangeEvent(((Marker_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMarker_TypeRow(Marker_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Marker_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Count_TypeDataTable : global::System.Data.TypedTableBase<Count_TypeRow> {
            
            private global::System.Data.DataColumn columnCount_Type_ID;
            
            private global::System.Data.DataColumn columnCount_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Count_TypeDataTable() {
                this.TableName = "Count_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Count_TypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Count_TypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Count_Type_IDColumn {
                get {
                    return this.columnCount_Type_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Count_TypeColumn {
                get {
                    return this.columnCount_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Count_TypeRow this[int index] {
                get {
                    return ((Count_TypeRow)(this.Rows[index]));
                }
            }
            
            public event Count_TypeRowChangeEventHandler Count_TypeRowChanging;
            
            public event Count_TypeRowChangeEventHandler Count_TypeRowChanged;
            
            public event Count_TypeRowChangeEventHandler Count_TypeRowDeleting;
            
            public event Count_TypeRowChangeEventHandler Count_TypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCount_TypeRow(Count_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Count_TypeRow AddCount_TypeRow(int Count_Type_ID, string Count_Type) {
                Count_TypeRow rowCount_TypeRow = ((Count_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Count_Type_ID,
                        Count_Type};
                rowCount_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCount_TypeRow);
                return rowCount_TypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Count_TypeRow FindByCount_Type_ID(int Count_Type_ID) {
                return ((Count_TypeRow)(this.Rows.Find(new object[] {
                            Count_Type_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Count_TypeDataTable cln = ((Count_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Count_TypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCount_Type_ID = base.Columns["Count_Type_ID"];
                this.columnCount_Type = base.Columns["Count_Type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCount_Type_ID = new global::System.Data.DataColumn("Count_Type_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount_Type_ID);
                this.columnCount_Type = new global::System.Data.DataColumn("Count_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount_Type);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCount_Type_ID}, true));
                this.columnCount_Type_ID.AllowDBNull = false;
                this.columnCount_Type_ID.Unique = true;
                this.columnCount_Type.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Count_TypeRow NewCount_TypeRow() {
                return ((Count_TypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Count_TypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Count_TypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Count_TypeRowChanged != null)) {
                    this.Count_TypeRowChanged(this, new Count_TypeRowChangeEvent(((Count_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Count_TypeRowChanging != null)) {
                    this.Count_TypeRowChanging(this, new Count_TypeRowChangeEvent(((Count_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Count_TypeRowDeleted != null)) {
                    this.Count_TypeRowDeleted(this, new Count_TypeRowChangeEvent(((Count_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Count_TypeRowDeleting != null)) {
                    this.Count_TypeRowDeleting(this, new Count_TypeRowChangeEvent(((Count_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCount_TypeRow(Count_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSParameter ds = new DSParameter();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Count_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Connotation_KeywordRow : global::System.Data.DataRow {
            
            private Connotation_KeywordDataTable tableConnotation_Keyword;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Connotation_KeywordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConnotation_Keyword = ((Connotation_KeywordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Day {
                get {
                    return ((int)(this[this.tableConnotation_Keyword.DayColumn]));
                }
                set {
                    this[this.tableConnotation_Keyword.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Month {
                get {
                    return ((int)(this[this.tableConnotation_Keyword.MonthColumn]));
                }
                set {
                    this[this.tableConnotation_Keyword.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    return ((int)(this[this.tableConnotation_Keyword.YearColumn]));
                }
                set {
                    this[this.tableConnotation_Keyword.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Marker_Connotation_ID {
                get {
                    return ((int)(this[this.tableConnotation_Keyword.Marker_Connotation_IDColumn]));
                }
                set {
                    this[this.tableConnotation_Keyword.Marker_Connotation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Source_ID {
                get {
                    return ((int)(this[this.tableConnotation_Keyword.Source_IDColumn]));
                }
                set {
                    this[this.tableConnotation_Keyword.Source_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConnotation_Keyword.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Connotation_Keyword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnotation_Keyword.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mention {
                get {
                    try {
                        return ((int)(this[this.tableConnotation_Keyword.MentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mention\' in table \'Connotation_Keyword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConnotation_Keyword.MentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableConnotation_Keyword.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableConnotation_Keyword.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMentionNull() {
                return this.IsNull(this.tableConnotation_Keyword.MentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMentionNull() {
                this[this.tableConnotation_Keyword.MentionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Event_MarkerRow : global::System.Data.DataRow {
            
            private Event_MarkerDataTable tableEvent_Marker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Event_MarkerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvent_Marker = ((Event_MarkerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Event_Marker_ID {
                get {
                    return ((int)(this[this.tableEvent_Marker.Event_Marker_IDColumn]));
                }
                set {
                    this[this.tableEvent_Marker.Event_Marker_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Marker_ID {
                get {
                    try {
                        return ((int)(this[this.tableEvent_Marker.Marker_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Marker_ID\' in table \'Event_Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent_Marker.Marker_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Period_In_Days {
                get {
                    try {
                        return ((int)(this[this.tableEvent_Marker.Period_In_DaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Period_In_Days\' in table \'Event_Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent_Marker.Period_In_DaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Start_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent_Marker.Start_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Start_Date\' in table \'Event_Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent_Marker.Start_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Start_Year {
                get {
                    try {
                        return ((int)(this[this.tableEvent_Marker.Start_YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Start_Year\' in table \'Event_Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent_Marker.Start_YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int End_Year {
                get {
                    try {
                        return ((int)(this[this.tableEvent_Marker.End_YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'End_Year\' in table \'Event_Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent_Marker.End_YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarker_IDNull() {
                return this.IsNull(this.tableEvent_Marker.Marker_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarker_IDNull() {
                this[this.tableEvent_Marker.Marker_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriod_In_DaysNull() {
                return this.IsNull(this.tableEvent_Marker.Period_In_DaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriod_In_DaysNull() {
                this[this.tableEvent_Marker.Period_In_DaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStart_DateNull() {
                return this.IsNull(this.tableEvent_Marker.Start_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStart_DateNull() {
                this[this.tableEvent_Marker.Start_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStart_YearNull() {
                return this.IsNull(this.tableEvent_Marker.Start_YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStart_YearNull() {
                this[this.tableEvent_Marker.Start_YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnd_YearNull() {
                return this.IsNull(this.tableEvent_Marker.End_YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnd_YearNull() {
                this[this.tableEvent_Marker.End_YearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeywordRow : global::System.Data.DataRow {
            
            private KeywordDataTable tableKeyword;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeywordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeyword = ((KeywordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Day {
                get {
                    return ((int)(this[this.tableKeyword.DayColumn]));
                }
                set {
                    this[this.tableKeyword.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Month {
                get {
                    return ((int)(this[this.tableKeyword.MonthColumn]));
                }
                set {
                    this[this.tableKeyword.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    return ((int)(this[this.tableKeyword.YearColumn]));
                }
                set {
                    this[this.tableKeyword.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Source_ID {
                get {
                    return ((int)(this[this.tableKeyword.Source_IDColumn]));
                }
                set {
                    this[this.tableKeyword.Source_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Marker_ID {
                get {
                    return ((int)(this[this.tableKeyword.Marker_IDColumn]));
                }
                set {
                    this[this.tableKeyword.Marker_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count_Type_ID {
                get {
                    return ((int)(this[this.tableKeyword.Count_Type_IDColumn]));
                }
                set {
                    this[this.tableKeyword.Count_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rank_Type_ID {
                get {
                    return ((int)(this[this.tableKeyword.Rank_Type_IDColumn]));
                }
                set {
                    this[this.tableKeyword.Rank_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableKeyword.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Keyword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKeyword.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mention {
                get {
                    try {
                        return ((int)(this[this.tableKeyword.MentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mention\' in table \'Keyword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKeyword.MentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rank {
                get {
                    try {
                        return ((int)(this[this.tableKeyword.RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rank\' in table \'Keyword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKeyword.RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableKeyword.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableKeyword.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMentionNull() {
                return this.IsNull(this.tableKeyword.MentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMentionNull() {
                this[this.tableKeyword.MentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankNull() {
                return this.IsNull(this.tableKeyword.RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankNull() {
                this[this.tableKeyword.RankColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Marker_ConnotationRow : global::System.Data.DataRow {
            
            private Marker_ConnotationDataTable tableMarker_Connotation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Marker_ConnotationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMarker_Connotation = ((Marker_ConnotationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Marker_Connotation_ID {
                get {
                    return ((int)(this[this.tableMarker_Connotation.Marker_Connotation_IDColumn]));
                }
                set {
                    this[this.tableMarker_Connotation.Marker_Connotation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Marker_ID {
                get {
                    try {
                        return ((int)(this[this.tableMarker_Connotation.Marker_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Marker_ID\' in table \'Marker_Connotation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker_Connotation.Marker_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Marker_Connotation {
                get {
                    try {
                        return ((string)(this[this.tableMarker_Connotation.Marker_ConnotationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Marker_Connotation\' in table \'Marker_Connotation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMarker_Connotation.Marker_ConnotationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarker_IDNull() {
                return this.IsNull(this.tableMarker_Connotation.Marker_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarker_IDNull() {
                this[this.tableMarker_Connotation.Marker_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarker_ConnotationNull() {
                return this.IsNull(this.tableMarker_Connotation.Marker_ConnotationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarker_ConnotationNull() {
                this[this.tableMarker_Connotation.Marker_ConnotationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MarkerRow : global::System.Data.DataRow {
            
            private MarkerDataTable tableMarker;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MarkerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMarker = ((MarkerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Marker_ID {
                get {
                    return ((int)(this[this.tableMarker.Marker_IDColumn]));
                }
                set {
                    this[this.tableMarker.Marker_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Marker_Tag {
                get {
                    try {
                        return ((string)(this[this.tableMarker.Marker_TagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Marker_Tag\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Marker_TagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableMarker.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableMarker.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableMarker.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableMarker.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Latitude {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Longitude {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Recurring_Event {
                get {
                    try {
                        return ((bool)(this[this.tableMarker.Is_Recurring_EventColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Recurring_Event\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Is_Recurring_EventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Daily_Count {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Daily_CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Daily_Count\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Daily_CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Monthly_Count {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Monthly_CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Monthly_Count\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Monthly_CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Yearly_Count {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Yearly_CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Yearly_Count\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Yearly_CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Daily_Count_Trend {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Daily_Count_TrendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Daily_Count_Trend\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Daily_Count_TrendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Monthly_Count_Trend {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Monthly_Count_TrendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Monthly_Count_Trend\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Monthly_Count_TrendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Yearly_Count_Trend {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Yearly_Count_TrendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Yearly_Count_Trend\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Yearly_Count_TrendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Current_Daily_Count_Percentage {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.Current_Daily_Count_PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Daily_Count_Percentage\' in table \'Marker\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Daily_Count_PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Current_Yearly_Count_Trend_Percentage {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.Current_Yearly_Count_Trend_PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Yearly_Count_Trend_Percentage\' in table \'Marker\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Yearly_Count_Trend_PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Current_Monthly_Count_Trend_Percentage {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.Current_Monthly_Count_Trend_PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Monthly_Count_Trend_Percentage\' in table \'Marker\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Monthly_Count_Trend_PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Daily_Rank {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Daily_RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Daily_Rank\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Daily_RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Monthly_Rank {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Monthly_RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Monthly_Rank\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Monthly_RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Yearly_Rank {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Yearly_RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Yearly_Rank\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Yearly_RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Daily_Rank_Trend {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Daily_Rank_TrendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Daily_Rank_Trend\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Daily_Rank_TrendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Monthly_Rank_Trend {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Monthly_Rank_TrendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Monthly_Rank_Trend\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Monthly_Rank_TrendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Current_Yearly_Rank_Trend {
                get {
                    try {
                        return ((int)(this[this.tableMarker.Current_Yearly_Rank_TrendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Yearly_Rank_Trend\' in table \'Marker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Yearly_Rank_TrendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Current_Daily_Rank_Trend_Percentage {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.Current_Daily_Rank_Trend_PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Daily_Rank_Trend_Percentage\' in table \'Marker\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Daily_Rank_Trend_PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Current_Monthly_Rank_Trend_Percentage {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.Current_Monthly_Rank_Trend_PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Monthly_Rank_Trend_Percentage\' in table \'Marker\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Monthly_Rank_Trend_PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Current_Yearly_Rank_Trend_Percentage {
                get {
                    try {
                        return ((decimal)(this[this.tableMarker.Current_Yearly_Rank_Trend_PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current_Yearly_Rank_Trend_Percentage\' in table \'Marker\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker.Current_Yearly_Rank_Trend_PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarker_TagNull() {
                return this.IsNull(this.tableMarker.Marker_TagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarker_TagNull() {
                this[this.tableMarker.Marker_TagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableMarker.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableMarker.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableMarker.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableMarker.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableMarker.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableMarker.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableMarker.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableMarker.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableMarker.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableMarker.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableMarker.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableMarker.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Recurring_EventNull() {
                return this.IsNull(this.tableMarker.Is_Recurring_EventColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Recurring_EventNull() {
                this[this.tableMarker.Is_Recurring_EventColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Daily_CountNull() {
                return this.IsNull(this.tableMarker.Current_Daily_CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Daily_CountNull() {
                this[this.tableMarker.Current_Daily_CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Monthly_CountNull() {
                return this.IsNull(this.tableMarker.Current_Monthly_CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Monthly_CountNull() {
                this[this.tableMarker.Current_Monthly_CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Yearly_CountNull() {
                return this.IsNull(this.tableMarker.Current_Yearly_CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Yearly_CountNull() {
                this[this.tableMarker.Current_Yearly_CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Daily_Count_TrendNull() {
                return this.IsNull(this.tableMarker.Current_Daily_Count_TrendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Daily_Count_TrendNull() {
                this[this.tableMarker.Current_Daily_Count_TrendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Monthly_Count_TrendNull() {
                return this.IsNull(this.tableMarker.Current_Monthly_Count_TrendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Monthly_Count_TrendNull() {
                this[this.tableMarker.Current_Monthly_Count_TrendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Yearly_Count_TrendNull() {
                return this.IsNull(this.tableMarker.Current_Yearly_Count_TrendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Yearly_Count_TrendNull() {
                this[this.tableMarker.Current_Yearly_Count_TrendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Daily_Count_PercentageNull() {
                return this.IsNull(this.tableMarker.Current_Daily_Count_PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Daily_Count_PercentageNull() {
                this[this.tableMarker.Current_Daily_Count_PercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Yearly_Count_Trend_PercentageNull() {
                return this.IsNull(this.tableMarker.Current_Yearly_Count_Trend_PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Yearly_Count_Trend_PercentageNull() {
                this[this.tableMarker.Current_Yearly_Count_Trend_PercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Monthly_Count_Trend_PercentageNull() {
                return this.IsNull(this.tableMarker.Current_Monthly_Count_Trend_PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Monthly_Count_Trend_PercentageNull() {
                this[this.tableMarker.Current_Monthly_Count_Trend_PercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Daily_RankNull() {
                return this.IsNull(this.tableMarker.Current_Daily_RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Daily_RankNull() {
                this[this.tableMarker.Current_Daily_RankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Monthly_RankNull() {
                return this.IsNull(this.tableMarker.Current_Monthly_RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Monthly_RankNull() {
                this[this.tableMarker.Current_Monthly_RankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Yearly_RankNull() {
                return this.IsNull(this.tableMarker.Current_Yearly_RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Yearly_RankNull() {
                this[this.tableMarker.Current_Yearly_RankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Daily_Rank_TrendNull() {
                return this.IsNull(this.tableMarker.Current_Daily_Rank_TrendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Daily_Rank_TrendNull() {
                this[this.tableMarker.Current_Daily_Rank_TrendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Monthly_Rank_TrendNull() {
                return this.IsNull(this.tableMarker.Current_Monthly_Rank_TrendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Monthly_Rank_TrendNull() {
                this[this.tableMarker.Current_Monthly_Rank_TrendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Yearly_Rank_TrendNull() {
                return this.IsNull(this.tableMarker.Current_Yearly_Rank_TrendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Yearly_Rank_TrendNull() {
                this[this.tableMarker.Current_Yearly_Rank_TrendColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Daily_Rank_Trend_PercentageNull() {
                return this.IsNull(this.tableMarker.Current_Daily_Rank_Trend_PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Daily_Rank_Trend_PercentageNull() {
                this[this.tableMarker.Current_Daily_Rank_Trend_PercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Monthly_Rank_Trend_PercentageNull() {
                return this.IsNull(this.tableMarker.Current_Monthly_Rank_Trend_PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Monthly_Rank_Trend_PercentageNull() {
                this[this.tableMarker.Current_Monthly_Rank_Trend_PercentageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrent_Yearly_Rank_Trend_PercentageNull() {
                return this.IsNull(this.tableMarker.Current_Yearly_Rank_Trend_PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrent_Yearly_Rank_Trend_PercentageNull() {
                this[this.tableMarker.Current_Yearly_Rank_Trend_PercentageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AttributeRow : global::System.Data.DataRow {
            
            private AttributeDataTable tableAttribute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttributeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAttribute = ((AttributeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Attribute_ID {
                get {
                    return ((int)(this[this.tableAttribute.Attribute_IDColumn]));
                }
                set {
                    this[this.tableAttribute.Attribute_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Attribute {
                get {
                    try {
                        return ((string)(this[this.tableAttribute.AttributeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Attribute\' in table \'Attribute\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttribute.AttributeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttributeNull() {
                return this.IsNull(this.tableAttribute.AttributeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttributeNull() {
                this[this.tableAttribute.AttributeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Product_DistributorRow : global::System.Data.DataRow {
            
            private Product_DistributorDataTable tableProduct_Distributor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_DistributorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct_Distributor = ((Product_DistributorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_ID {
                get {
                    return ((int)(this[this.tableProduct_Distributor.Product_IDColumn]));
                }
                set {
                    this[this.tableProduct_Distributor.Product_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Distributor_ID {
                get {
                    return ((int)(this[this.tableProduct_Distributor.Distributor_IDColumn]));
                }
                set {
                    this[this.tableProduct_Distributor.Distributor_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Product_Type_RelationshipRow : global::System.Data.DataRow {
            
            private Product_Type_RelationshipDataTable tableProduct_Type_Relationship;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_Type_RelationshipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct_Type_Relationship = ((Product_Type_RelationshipDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_Type_ID {
                get {
                    return ((int)(this[this.tableProduct_Type_Relationship.Product_Type_IDColumn]));
                }
                set {
                    this[this.tableProduct_Type_Relationship.Product_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Relationship_ID {
                get {
                    return ((int)(this[this.tableProduct_Type_Relationship.Relationship_IDColumn]));
                }
                set {
                    this[this.tableProduct_Type_Relationship.Relationship_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RelationshipRow : global::System.Data.DataRow {
            
            private RelationshipDataTable tableRelationship;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RelationshipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRelationship = ((RelationshipDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Relationship_ID {
                get {
                    return ((int)(this[this.tableRelationship.Relationship_IDColumn]));
                }
                set {
                    this[this.tableRelationship.Relationship_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relationship {
                get {
                    try {
                        return ((string)(this[this.tableRelationship.RelationshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Relationship\' in table \'Relationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelationship.RelationshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationshipNull() {
                return this.IsNull(this.tableRelationship.RelationshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationshipNull() {
                this[this.tableRelationship.RelationshipColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CompanyRow : global::System.Data.DataRow {
            
            private CompanyDataTable tableCompany;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CompanyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompany = ((CompanyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Company_ID {
                get {
                    return ((int)(this[this.tableCompany.Company_IDColumn]));
                }
                set {
                    this[this.tableCompany.Company_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Company {
                get {
                    try {
                        return ((string)(this[this.tableCompany.CompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Company\' in table \'Company\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompany.CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNull() {
                return this.IsNull(this.tableCompany.CompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNull() {
                this[this.tableCompany.CompanyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CategoryRow : global::System.Data.DataRow {
            
            private CategoryDataTable tableCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategory = ((CategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Category_ID {
                get {
                    return ((int)(this[this.tableCategory.Category_IDColumn]));
                }
                set {
                    this[this.tableCategory.Category_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableCategory.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'Category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableCategory.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableCategory.CategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Company_Product_TypeRow : global::System.Data.DataRow {
            
            private Company_Product_TypeDataTable tableCompany_Product_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Company_Product_TypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompany_Product_Type = ((Company_Product_TypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Company_ID {
                get {
                    return ((int)(this[this.tableCompany_Product_Type.Company_IDColumn]));
                }
                set {
                    this[this.tableCompany_Product_Type.Company_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_Type_ID {
                get {
                    return ((int)(this[this.tableCompany_Product_Type.Product_Type_IDColumn]));
                }
                set {
                    this[this.tableCompany_Product_Type.Product_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Category_ID {
                get {
                    return ((int)(this[this.tableCompany_Product_Type.Category_IDColumn]));
                }
                set {
                    this[this.tableCompany_Product_Type.Category_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Product_Type_AttributeRow : global::System.Data.DataRow {
            
            private Product_Type_AttributeDataTable tableProduct_Type_Attribute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_Type_AttributeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct_Type_Attribute = ((Product_Type_AttributeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_Type_ID {
                get {
                    return ((int)(this[this.tableProduct_Type_Attribute.Product_Type_IDColumn]));
                }
                set {
                    this[this.tableProduct_Type_Attribute.Product_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Attribute_ID {
                get {
                    return ((int)(this[this.tableProduct_Type_Attribute.Attribute_IDColumn]));
                }
                set {
                    this[this.tableProduct_Type_Attribute.Attribute_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Category_ID {
                get {
                    return ((int)(this[this.tableProduct_Type_Attribute.Category_IDColumn]));
                }
                set {
                    this[this.tableProduct_Type_Attribute.Category_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Product_AttributeRow : global::System.Data.DataRow {
            
            private Product_AttributeDataTable tableProduct_Attribute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_AttributeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct_Attribute = ((Product_AttributeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_ID {
                get {
                    return ((int)(this[this.tableProduct_Attribute.Product_IDColumn]));
                }
                set {
                    this[this.tableProduct_Attribute.Product_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Attribute_ID {
                get {
                    return ((int)(this[this.tableProduct_Attribute.Attribute_IDColumn]));
                }
                set {
                    this[this.tableProduct_Attribute.Attribute_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Attribute_Variant_ID {
                get {
                    try {
                        return ((int)(this[this.tableProduct_Attribute.Attribute_Variant_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Attribute_Variant_ID\' in table \'Product_Attribute\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableProduct_Attribute.Attribute_Variant_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttribute_Variant_IDNull() {
                return this.IsNull(this.tableProduct_Attribute.Attribute_Variant_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttribute_Variant_IDNull() {
                this[this.tableProduct_Attribute.Attribute_Variant_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Attribute_VariantRow : global::System.Data.DataRow {
            
            private Attribute_VariantDataTable tableAttribute_Variant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Attribute_VariantRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAttribute_Variant = ((Attribute_VariantDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Attribute_Variant_ID {
                get {
                    return ((int)(this[this.tableAttribute_Variant.Attribute_Variant_IDColumn]));
                }
                set {
                    this[this.tableAttribute_Variant.Attribute_Variant_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Attribute_ID {
                get {
                    try {
                        return ((int)(this[this.tableAttribute_Variant.Attribute_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Attribute_ID\' in table \'Attribute_Variant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttribute_Variant.Attribute_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Attribute_Variant {
                get {
                    try {
                        return ((string)(this[this.tableAttribute_Variant.Attribute_VariantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Attribute_Variant\' in table \'Attribute_Variant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttribute_Variant.Attribute_VariantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttribute_IDNull() {
                return this.IsNull(this.tableAttribute_Variant.Attribute_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttribute_IDNull() {
                this[this.tableAttribute_Variant.Attribute_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttribute_VariantNull() {
                return this.IsNull(this.tableAttribute_Variant.Attribute_VariantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttribute_VariantNull() {
                this[this.tableAttribute_Variant.Attribute_VariantColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ZipCodesRow : global::System.Data.DataRow {
            
            private ZipCodesDataTable tableZipCodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZipCodesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZipCodes = ((ZipCodesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableZipCodes.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZipCode {
                get {
                    try {
                        return ((string)(this[this.tableZipCodes.ZipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZipCode\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableZipCodes.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tableZipCodes.STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateAbbreviation {
                get {
                    try {
                        return ((string)(this[this.tableZipCodes.StateAbbreviationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateAbbreviation\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.StateAbbreviationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string County {
                get {
                    try {
                        return ((string)(this[this.tableZipCodes.CountyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'County\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.CountyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Latitude {
                get {
                    try {
                        return ((decimal)(this[this.tableZipCodes.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Longitude {
                get {
                    try {
                        return ((decimal)(this[this.tableZipCodes.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'ZipCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZipCodes.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableZipCodes.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableZipCodes.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipCodeNull() {
                return this.IsNull(this.tableZipCodes.ZipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipCodeNull() {
                this[this.tableZipCodes.ZipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableZipCodes.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableZipCodes.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATENull() {
                return this.IsNull(this.tableZipCodes.STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATENull() {
                this[this.tableZipCodes.STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateAbbreviationNull() {
                return this.IsNull(this.tableZipCodes.StateAbbreviationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateAbbreviationNull() {
                this[this.tableZipCodes.StateAbbreviationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountyNull() {
                return this.IsNull(this.tableZipCodes.CountyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountyNull() {
                this[this.tableZipCodes.CountyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableZipCodes.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableZipCodes.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableZipCodes.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableZipCodes.LongitudeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Activity_TypeRow : global::System.Data.DataRow {
            
            private Activity_TypeDataTable tableActivity_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Activity_TypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActivity_Type = ((Activity_TypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Activity_Type_ID {
                get {
                    return ((int)(this[this.tableActivity_Type.Activity_Type_IDColumn]));
                }
                set {
                    this[this.tableActivity_Type.Activity_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Activity_Type {
                get {
                    try {
                        return ((string)(this[this.tableActivity_Type.Activity_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Activity_Type\' in table \'Activity_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity_Type.Activity_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Has_ID {
                get {
                    try {
                        return ((bool)(this[this.tableActivity_Type.Has_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Has_ID\' in table \'Activity_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivity_Type.Has_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivity_TypeNull() {
                return this.IsNull(this.tableActivity_Type.Activity_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivity_TypeNull() {
                this[this.tableActivity_Type.Activity_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHas_IDNull() {
                return this.IsNull(this.tableActivity_Type.Has_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHas_IDNull() {
                this[this.tableActivity_Type.Has_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Event_ItemRow : global::System.Data.DataRow {
            
            private Event_ItemDataTable tableEvent_Item;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Event_ItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvent_Item = ((Event_ItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Event_Item_ID {
                get {
                    return ((int)(this[this.tableEvent_Item.Event_Item_IDColumn]));
                }
                set {
                    this[this.tableEvent_Item.Event_Item_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Event_ID {
                get {
                    return ((int)(this[this.tableEvent_Item.Event_IDColumn]));
                }
                set {
                    this[this.tableEvent_Item.Event_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Event_Item {
                get {
                    try {
                        return ((string)(this[this.tableEvent_Item.Event_ItemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Event_Item\' in table \'Event_Item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent_Item.Event_ItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvent_ItemNull() {
                return this.IsNull(this.tableEvent_Item.Event_ItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvent_ItemNull() {
                this[this.tableEvent_Item.Event_ItemColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventRow : global::System.Data.DataRow {
            
            private EventDataTable tableEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvent = ((EventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Event_ID {
                get {
                    return ((int)(this[this.tableEvent.Event_IDColumn]));
                }
                set {
                    this[this.tableEvent.Event_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Event {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EventColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Event\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Has_Event_Item {
                get {
                    try {
                        return ((bool)(this[this.tableEvent.Has_Event_ItemColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Has_Event_Item\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.Has_Event_ItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableEvent.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Latitude {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Longitude {
                get {
                    try {
                        return ((decimal)(this[this.tableEvent.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Company_ID {
                get {
                    return ((int)(this[this.tableEvent.Company_IDColumn]));
                }
                set {
                    this[this.tableEvent.Company_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Event_Days {
                get {
                    try {
                        return ((int)(this[this.tableEvent.Event_DaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Event_Days\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.Event_DaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventNull() {
                return this.IsNull(this.tableEvent.EventColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventNull() {
                this[this.tableEvent.EventColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHas_Event_ItemNull() {
                return this.IsNull(this.tableEvent.Has_Event_ItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHas_Event_ItemNull() {
                this[this.tableEvent.Has_Event_ItemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableEvent.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableEvent.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableEvent.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableEvent.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableEvent.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableEvent.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableEvent.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableEvent.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvent_DaysNull() {
                return this.IsNull(this.tableEvent.Event_DaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvent_DaysNull() {
                this[this.tableEvent.Event_DaysColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductRow : global::System.Data.DataRow {
            
            private ProductDataTable tableProduct;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct = ((ProductDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_ID {
                get {
                    return ((int)(this[this.tableProduct.Product_IDColumn]));
                }
                set {
                    this[this.tableProduct.Product_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product {
                get {
                    try {
                        return ((string)(this[this.tableProduct.ProductColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.ProductColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Code_To_Display {
                get {
                    try {
                        return ((string)(this[this.tableProduct.Product_Code_To_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Code_To_Display\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Product_Code_To_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Code {
                get {
                    try {
                        return ((string)(this[this.tableProduct.Product_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Code\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Product_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Company_ID {
                get {
                    try {
                        return ((int)(this[this.tableProduct.Company_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Company_ID\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Company_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_Type_ID {
                get {
                    try {
                        return ((int)(this[this.tableProduct.Product_Type_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Type_ID\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Product_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Category_ID {
                get {
                    try {
                        return ((int)(this[this.tableProduct.Category_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category_ID\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Category_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Entered_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProduct.Entered_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Entered_Date\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Entered_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProduct.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Active {
                get {
                    try {
                        return ((bool)(this[this.tableProduct.Is_ActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Active\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Is_ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Image_Link {
                get {
                    try {
                        return ((string)(this[this.tableProduct.Product_Image_LinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Image_Link\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Product_Image_LinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Brand_Image_Link {
                get {
                    try {
                        return ((string)(this[this.tableProduct.Product_Brand_Image_LinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Brand_Image_Link\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Product_Brand_Image_LinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Heading {
                get {
                    try {
                        return ((string)(this[this.tableProduct.Product_HeadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Heading\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Product_HeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Heading_Link {
                get {
                    try {
                        return ((string)(this[this.tableProduct.Heading_LinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Heading_Link\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.Heading_LinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNull() {
                return this.IsNull(this.tableProduct.ProductColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNull() {
                this[this.tableProduct.ProductColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_Code_To_DisplayNull() {
                return this.IsNull(this.tableProduct.Product_Code_To_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_Code_To_DisplayNull() {
                this[this.tableProduct.Product_Code_To_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_CodeNull() {
                return this.IsNull(this.tableProduct.Product_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_CodeNull() {
                this[this.tableProduct.Product_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompany_IDNull() {
                return this.IsNull(this.tableProduct.Company_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompany_IDNull() {
                this[this.tableProduct.Company_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_Type_IDNull() {
                return this.IsNull(this.tableProduct.Product_Type_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_Type_IDNull() {
                this[this.tableProduct.Product_Type_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategory_IDNull() {
                return this.IsNull(this.tableProduct.Category_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategory_IDNull() {
                this[this.tableProduct.Category_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntered_DateNull() {
                return this.IsNull(this.tableProduct.Entered_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntered_DateNull() {
                this[this.tableProduct.Entered_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProduct.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProduct.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_ActiveNull() {
                return this.IsNull(this.tableProduct.Is_ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_ActiveNull() {
                this[this.tableProduct.Is_ActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_Image_LinkNull() {
                return this.IsNull(this.tableProduct.Product_Image_LinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_Image_LinkNull() {
                this[this.tableProduct.Product_Image_LinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_Brand_Image_LinkNull() {
                return this.IsNull(this.tableProduct.Product_Brand_Image_LinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_Brand_Image_LinkNull() {
                this[this.tableProduct.Product_Brand_Image_LinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_HeadingNull() {
                return this.IsNull(this.tableProduct.Product_HeadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_HeadingNull() {
                this[this.tableProduct.Product_HeadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeading_LinkNull() {
                return this.IsNull(this.tableProduct.Heading_LinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeading_LinkNull() {
                this[this.tableProduct.Heading_LinkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Secret_QuestionRow : global::System.Data.DataRow {
            
            private Secret_QuestionDataTable tableSecret_Question;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Secret_QuestionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSecret_Question = ((Secret_QuestionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Secret_Question_ID {
                get {
                    return ((int)(this[this.tableSecret_Question.Secret_Question_IDColumn]));
                }
                set {
                    this[this.tableSecret_Question.Secret_Question_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Secret_Question {
                get {
                    try {
                        return ((string)(this[this.tableSecret_Question.Secret_QuestionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Secret_Question\' in table \'Secret_Question\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSecret_Question.Secret_QuestionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecret_QuestionNull() {
                return this.IsNull(this.tableSecret_Question.Secret_QuestionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecret_QuestionNull() {
                this[this.tableSecret_Question.Secret_QuestionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Product_TypeRow : global::System.Data.DataRow {
            
            private Product_TypeDataTable tableProduct_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Product_TypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct_Type = ((Product_TypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Product_Type_ID {
                get {
                    return ((int)(this[this.tableProduct_Type.Product_Type_IDColumn]));
                }
                set {
                    this[this.tableProduct_Type.Product_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Type {
                get {
                    try {
                        return ((string)(this[this.tableProduct_Type.Product_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product_Type\' in table \'Product_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct_Type.Product_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Category_ID {
                get {
                    try {
                        return ((int)(this[this.tableProduct_Type.Category_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category_ID\' in table \'Product_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct_Type.Category_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Entered_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProduct_Type.Entered_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Entered_Date\' in table \'Product_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct_Type.Entered_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProduct_Type.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Product_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct_Type.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Active {
                get {
                    try {
                        return ((bool)(this[this.tableProduct_Type.Is_ActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Active\' in table \'Product_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct_Type.Is_ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProduct_TypeNull() {
                return this.IsNull(this.tableProduct_Type.Product_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProduct_TypeNull() {
                this[this.tableProduct_Type.Product_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategory_IDNull() {
                return this.IsNull(this.tableProduct_Type.Category_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategory_IDNull() {
                this[this.tableProduct_Type.Category_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntered_DateNull() {
                return this.IsNull(this.tableProduct_Type.Entered_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntered_DateNull() {
                this[this.tableProduct_Type.Entered_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProduct_Type.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProduct_Type.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_ActiveNull() {
                return this.IsNull(this.tableProduct_Type.Is_ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_ActiveNull() {
                this[this.tableProduct_Type.Is_ActiveColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistributorRow : global::System.Data.DataRow {
            
            private DistributorDataTable tableDistributor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistributor = ((DistributorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableDistributor.IDColumn]));
                }
                set {
                    this[this.tableDistributor.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Active {
                get {
                    try {
                        return ((bool)(this[this.tableDistributor.Is_ActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Active\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Is_ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Distributor_ID {
                get {
                    return ((int)(this[this.tableDistributor.Distributor_IDColumn]));
                }
                set {
                    this[this.tableDistributor.Distributor_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Distributor {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.DistributorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Distributor\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.DistributorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableDistributor.AddressColumn]));
                }
                set {
                    this[this.tableDistributor.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Latitude {
                get {
                    try {
                        return ((decimal)(this[this.tableDistributor.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Longitude {
                get {
                    try {
                        return ((decimal)(this[this.tableDistributor.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip_Code {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.Zip_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip_Code\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Zip_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingAppartment {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.BuildingAppartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildingAppartment\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.BuildingAppartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street_No {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.Street_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street_No\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Street_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street_Name {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.Street_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street_Name\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Street_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone1 {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.Phone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone1\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Phone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone2 {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.Phone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone2\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Phone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email2 {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.Email2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email2\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Email2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Website {
                get {
                    try {
                        return ((string)(this[this.tableDistributor.WebsiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Website\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.WebsiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Email1_Display {
                get {
                    try {
                        return ((bool)(this[this.tableDistributor.Is_Email1_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Email1_Display\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Is_Email1_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Email2_Display {
                get {
                    try {
                        return ((bool)(this[this.tableDistributor.Is_Email2_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Email2_Display\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Is_Email2_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Phone1_Display {
                get {
                    try {
                        return ((bool)(this[this.tableDistributor.Is_Phone1_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Phone1_Display\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Is_Phone1_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Phone2_Display {
                get {
                    try {
                        return ((bool)(this[this.tableDistributor.Is_Phone2_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Phone2_Display\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Is_Phone2_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Website_Display {
                get {
                    try {
                        return ((bool)(this[this.tableDistributor.Is_Website_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Website_Display\' in table \'Distributor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDistributor.Is_Website_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_ActiveNull() {
                return this.IsNull(this.tableDistributor.Is_ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_ActiveNull() {
                this[this.tableDistributor.Is_ActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistributorNull() {
                return this.IsNull(this.tableDistributor.DistributorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistributorNull() {
                this[this.tableDistributor.DistributorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableDistributor.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableDistributor.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDistributor.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDistributor.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableDistributor.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableDistributor.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableDistributor.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableDistributor.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableDistributor.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableDistributor.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZip_CodeNull() {
                return this.IsNull(this.tableDistributor.Zip_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZip_CodeNull() {
                this[this.tableDistributor.Zip_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingAppartmentNull() {
                return this.IsNull(this.tableDistributor.BuildingAppartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingAppartmentNull() {
                this[this.tableDistributor.BuildingAppartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet_NoNull() {
                return this.IsNull(this.tableDistributor.Street_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet_NoNull() {
                this[this.tableDistributor.Street_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet_NameNull() {
                return this.IsNull(this.tableDistributor.Street_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet_NameNull() {
                this[this.tableDistributor.Street_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableDistributor.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableDistributor.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone1Null() {
                return this.IsNull(this.tableDistributor.Phone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone1Null() {
                this[this.tableDistributor.Phone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone2Null() {
                return this.IsNull(this.tableDistributor.Phone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone2Null() {
                this[this.tableDistributor.Phone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmail2Null() {
                return this.IsNull(this.tableDistributor.Email2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmail2Null() {
                this[this.tableDistributor.Email2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebsiteNull() {
                return this.IsNull(this.tableDistributor.WebsiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebsiteNull() {
                this[this.tableDistributor.WebsiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Email1_DisplayNull() {
                return this.IsNull(this.tableDistributor.Is_Email1_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Email1_DisplayNull() {
                this[this.tableDistributor.Is_Email1_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Email2_DisplayNull() {
                return this.IsNull(this.tableDistributor.Is_Email2_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Email2_DisplayNull() {
                this[this.tableDistributor.Is_Email2_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Phone1_DisplayNull() {
                return this.IsNull(this.tableDistributor.Is_Phone1_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Phone1_DisplayNull() {
                this[this.tableDistributor.Is_Phone1_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Phone2_DisplayNull() {
                return this.IsNull(this.tableDistributor.Is_Phone2_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Phone2_DisplayNull() {
                this[this.tableDistributor.Is_Phone2_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Website_DisplayNull() {
                return this.IsNull(this.tableDistributor.Is_Website_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Website_DisplayNull() {
                this[this.tableDistributor.Is_Website_DisplayColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerRow : global::System.Data.DataRow {
            
            private CustomerDataTable tableCustomer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomer = ((CustomerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCustomer.IDColumn]));
                }
                set {
                    this[this.tableCustomer.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Active {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.Is_ActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Active\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Is_ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Customer_ID {
                get {
                    return ((int)(this[this.tableCustomer.Customer_IDColumn]));
                }
                set {
                    this[this.tableCustomer.Customer_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Customer {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.CustomerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.CustomerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    return ((string)(this[this.tableCustomer.AddressColumn]));
                }
                set {
                    this[this.tableCustomer.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Latitude {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomer.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Longitude {
                get {
                    try {
                        return ((decimal)(this[this.tableCustomer.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip_Code {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Zip_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zip_Code\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Zip_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingAppartment {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.BuildingAppartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildingAppartment\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.BuildingAppartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street_No {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Street_NoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street_No\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Street_NoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street_Name {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Street_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street_Name\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Street_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.CountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Country\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone1 {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Phone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone1\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Phone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Phone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone2\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Phone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email2 {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.Email2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email2\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Email2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Website {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.WebsiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Website\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.WebsiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Email1_Display {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.Is_Email1_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Email1_Display\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Is_Email1_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Email2_Display {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.Is_Email2_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Email2_Display\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Is_Email2_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Phone1_Display {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.Is_Phone1_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Phone1_Display\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Is_Phone1_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Phone2_Display {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.Is_Phone2_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Phone2_Display\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Is_Phone2_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Website_Display {
                get {
                    try {
                        return ((bool)(this[this.tableCustomer.Is_Website_DisplayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Is_Website_Display\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.Is_Website_DisplayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_ActiveNull() {
                return this.IsNull(this.tableCustomer.Is_ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_ActiveNull() {
                this[this.tableCustomer.Is_ActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNull() {
                return this.IsNull(this.tableCustomer.CustomerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNull() {
                this[this.tableCustomer.CustomerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableCustomer.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableCustomer.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableCustomer.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableCustomer.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableCustomer.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableCustomer.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableCustomer.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableCustomer.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableCustomer.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableCustomer.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZip_CodeNull() {
                return this.IsNull(this.tableCustomer.Zip_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZip_CodeNull() {
                this[this.tableCustomer.Zip_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingAppartmentNull() {
                return this.IsNull(this.tableCustomer.BuildingAppartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingAppartmentNull() {
                this[this.tableCustomer.BuildingAppartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet_NoNull() {
                return this.IsNull(this.tableCustomer.Street_NoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet_NoNull() {
                this[this.tableCustomer.Street_NoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreet_NameNull() {
                return this.IsNull(this.tableCustomer.Street_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreet_NameNull() {
                this[this.tableCustomer.Street_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableCustomer.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableCustomer.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone1Null() {
                return this.IsNull(this.tableCustomer.Phone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone1Null() {
                this[this.tableCustomer.Phone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhone2Null() {
                return this.IsNull(this.tableCustomer.Phone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhone2Null() {
                this[this.tableCustomer.Phone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmail2Null() {
                return this.IsNull(this.tableCustomer.Email2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmail2Null() {
                this[this.tableCustomer.Email2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebsiteNull() {
                return this.IsNull(this.tableCustomer.WebsiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebsiteNull() {
                this[this.tableCustomer.WebsiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Email1_DisplayNull() {
                return this.IsNull(this.tableCustomer.Is_Email1_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Email1_DisplayNull() {
                this[this.tableCustomer.Is_Email1_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Email2_DisplayNull() {
                return this.IsNull(this.tableCustomer.Is_Email2_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Email2_DisplayNull() {
                this[this.tableCustomer.Is_Email2_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Phone1_DisplayNull() {
                return this.IsNull(this.tableCustomer.Is_Phone1_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Phone1_DisplayNull() {
                this[this.tableCustomer.Is_Phone1_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Phone2_DisplayNull() {
                return this.IsNull(this.tableCustomer.Is_Phone2_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Phone2_DisplayNull() {
                this[this.tableCustomer.Is_Phone2_DisplayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIs_Website_DisplayNull() {
                return this.IsNull(this.tableCustomer.Is_Website_DisplayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIs_Website_DisplayNull() {
                this[this.tableCustomer.Is_Website_DisplayColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrendRow : global::System.Data.DataRow {
            
            private TrendDataTable tableTrend;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrendRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrend = ((TrendDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Trend_ID {
                get {
                    return ((int)(this[this.tableTrend.Trend_IDColumn]));
                }
                set {
                    this[this.tableTrend.Trend_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Trend {
                get {
                    try {
                        return ((string)(this[this.tableTrend.TrendColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Trend\' in table \'Trend\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrend.TrendColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrendNull() {
                return this.IsNull(this.tableTrend.TrendColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrendNull() {
                this[this.tableTrend.TrendColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SourceRow : global::System.Data.DataRow {
            
            private SourceDataTable tableSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSource = ((SourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Source_ID {
                get {
                    return ((int)(this[this.tableSource.Source_IDColumn]));
                }
                set {
                    this[this.tableSource.Source_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableSource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Source\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceNull() {
                return this.IsNull(this.tableSource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceNull() {
                this[this.tableSource.SourceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rank_TypeRow : global::System.Data.DataRow {
            
            private Rank_TypeDataTable tableRank_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rank_TypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRank_Type = ((Rank_TypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rank_Type_ID {
                get {
                    return ((int)(this[this.tableRank_Type.Rank_Type_IDColumn]));
                }
                set {
                    this[this.tableRank_Type.Rank_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rank_Type {
                get {
                    try {
                        return ((string)(this[this.tableRank_Type.Rank_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rank_Type\' in table \'Rank_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRank_Type.Rank_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRank_TypeNull() {
                return this.IsNull(this.tableRank_Type.Rank_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRank_TypeNull() {
                this[this.tableRank_Type.Rank_TypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Marker_TypeRow : global::System.Data.DataRow {
            
            private Marker_TypeDataTable tableMarker_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Marker_TypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMarker_Type = ((Marker_TypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Marker_Type {
                get {
                    try {
                        return ((string)(this[this.tableMarker_Type.Marker_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Marker_Type\' in table \'Marker_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMarker_Type.Marker_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarker_TypeNull() {
                return this.IsNull(this.tableMarker_Type.Marker_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarker_TypeNull() {
                this[this.tableMarker_Type.Marker_TypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Count_TypeRow : global::System.Data.DataRow {
            
            private Count_TypeDataTable tableCount_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Count_TypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCount_Type = ((Count_TypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count_Type_ID {
                get {
                    return ((int)(this[this.tableCount_Type.Count_Type_IDColumn]));
                }
                set {
                    this[this.tableCount_Type.Count_Type_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Count_Type {
                get {
                    try {
                        return ((string)(this[this.tableCount_Type.Count_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count_Type\' in table \'Count_Type\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCount_Type.Count_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCount_TypeNull() {
                return this.IsNull(this.tableCount_Type.Count_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCount_TypeNull() {
                this[this.tableCount_Type.Count_TypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Connotation_KeywordRowChangeEvent : global::System.EventArgs {
            
            private Connotation_KeywordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Connotation_KeywordRowChangeEvent(Connotation_KeywordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Connotation_KeywordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Event_MarkerRowChangeEvent : global::System.EventArgs {
            
            private Event_MarkerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_MarkerRowChangeEvent(Event_MarkerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_MarkerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeywordRowChangeEvent : global::System.EventArgs {
            
            private KeywordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeywordRowChangeEvent(KeywordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeywordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Marker_ConnotationRowChangeEvent : global::System.EventArgs {
            
            private Marker_ConnotationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_ConnotationRowChangeEvent(Marker_ConnotationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_ConnotationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MarkerRowChangeEvent : global::System.EventArgs {
            
            private MarkerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarkerRowChangeEvent(MarkerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MarkerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AttributeRowChangeEvent : global::System.EventArgs {
            
            private AttributeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeRowChangeEvent(AttributeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Product_DistributorRowChangeEvent : global::System.EventArgs {
            
            private Product_DistributorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_DistributorRowChangeEvent(Product_DistributorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_DistributorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Product_Type_RelationshipRowChangeEvent : global::System.EventArgs {
            
            private Product_Type_RelationshipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_RelationshipRowChangeEvent(Product_Type_RelationshipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_RelationshipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RelationshipRowChangeEvent : global::System.EventArgs {
            
            private RelationshipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelationshipRowChangeEvent(RelationshipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelationshipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CompanyRowChangeEvent : global::System.EventArgs {
            
            private CompanyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompanyRowChangeEvent(CompanyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CompanyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoryRowChangeEvent : global::System.EventArgs {
            
            private CategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryRowChangeEvent(CategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Company_Product_TypeRowChangeEvent : global::System.EventArgs {
            
            private Company_Product_TypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Company_Product_TypeRowChangeEvent(Company_Product_TypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Company_Product_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Product_Type_AttributeRowChangeEvent : global::System.EventArgs {
            
            private Product_Type_AttributeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_AttributeRowChangeEvent(Product_Type_AttributeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_Type_AttributeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Product_AttributeRowChangeEvent : global::System.EventArgs {
            
            private Product_AttributeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_AttributeRowChangeEvent(Product_AttributeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_AttributeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Attribute_VariantRowChangeEvent : global::System.EventArgs {
            
            private Attribute_VariantRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Attribute_VariantRowChangeEvent(Attribute_VariantRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Attribute_VariantRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ZipCodesRowChangeEvent : global::System.EventArgs {
            
            private ZipCodesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipCodesRowChangeEvent(ZipCodesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZipCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Activity_TypeRowChangeEvent : global::System.EventArgs {
            
            private Activity_TypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Activity_TypeRowChangeEvent(Activity_TypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Activity_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Event_ItemRowChangeEvent : global::System.EventArgs {
            
            private Event_ItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_ItemRowChangeEvent(Event_ItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Event_ItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventRowChangeEvent : global::System.EventArgs {
            
            private EventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRowChangeEvent(EventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductRowChangeEvent : global::System.EventArgs {
            
            private ProductRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRowChangeEvent(ProductRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Secret_QuestionRowChangeEvent : global::System.EventArgs {
            
            private Secret_QuestionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Secret_QuestionRowChangeEvent(Secret_QuestionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Secret_QuestionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Product_TypeRowChangeEvent : global::System.EventArgs {
            
            private Product_TypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_TypeRowChangeEvent(Product_TypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Product_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistributorRowChangeEvent : global::System.EventArgs {
            
            private DistributorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributorRowChangeEvent(DistributorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerRowChangeEvent : global::System.EventArgs {
            
            private CustomerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRowChangeEvent(CustomerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrendRowChangeEvent : global::System.EventArgs {
            
            private TrendRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrendRowChangeEvent(TrendRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrendRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SourceRowChangeEvent : global::System.EventArgs {
            
            private SourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRowChangeEvent(SourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rank_TypeRowChangeEvent : global::System.EventArgs {
            
            private Rank_TypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rank_TypeRowChangeEvent(Rank_TypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rank_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Marker_TypeRowChangeEvent : global::System.EventArgs {
            
            private Marker_TypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_TypeRowChangeEvent(Marker_TypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Marker_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Count_TypeRowChangeEvent : global::System.EventArgs {
            
            private Count_TypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Count_TypeRowChangeEvent(Count_TypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Count_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DataSet.DSParameterTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Connotation_KeywordTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Connotation_KeywordTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Connotation_Keyword";
            tableMapping.ColumnMappings.Add("Day", "Day");
            tableMapping.ColumnMappings.Add("Month", "Month");
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("Marker_Connotation_ID", "Marker_Connotation_ID");
            tableMapping.ColumnMappings.Add("Source_ID", "Source_ID");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Mention", "Mention");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Connotation_Keyword] WHERE (([Day] = @Original_Day) AND ([Month] = @Original_Month) AND ([Year] = @Original_Year) AND ([Marker_Connotation_ID] = @Original_Marker_Connotation_ID) AND ([Source_ID] = @Original_Source_ID) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Mention = 1 AND [Mention] IS NULL) OR ([Mention] = @Original_Mention)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Connotation_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Connotation_Keyword] ([Day], [Month], [Year], [Marker_Connotation_ID], [Source_ID], [Date], [Mention]) VALUES (@Day, @Month, @Year, @Marker_Connotation_ID, @Source_ID, @Date, @Mention);
SELECT Day, Month, Year, Marker_Connotation_ID, Source_ID, Date, Mention FROM Connotation_Keyword WHERE (Day = @Day) AND (Marker_Connotation_ID = @Marker_Connotation_ID) AND (Month = @Month) AND (Source_ID = @Source_ID) AND (Year = @Year)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_Connotation_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Connotation_Keyword] SET [Day] = @Day, [Month] = @Month, [Year] = @Year, [Marker_Connotation_ID] = @Marker_Connotation_ID, [Source_ID] = @Source_ID, [Date] = @Date, [Mention] = @Mention WHERE (([Day] = @Original_Day) AND ([Month] = @Original_Month) AND ([Year] = @Original_Year) AND ([Marker_Connotation_ID] = @Original_Marker_Connotation_ID) AND ([Source_ID] = @Original_Source_ID) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Mention = 1 AND [Mention] IS NULL) OR ([Mention] = @Original_Mention)));
SELECT Day, Month, Year, Marker_Connotation_ID, Source_ID, Date, Mention FROM Connotation_Keyword WHERE (Day = @Day) AND (Marker_Connotation_ID = @Marker_Connotation_ID) AND (Month = @Month) AND (Source_ID = @Source_ID) AND (Year = @Year)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_Connotation_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Connotation_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSet.Properties.Settings.Default.MapProjectConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Day, Month, Year, Marker_Connotation_ID, Source_ID, Date, Mention FROM dbo" +
                ".Connotation_Keyword";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSParameter.Connotation_KeywordDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSParameter.Connotation_KeywordDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DSParameter.Connotation_KeywordDataTable dataTable = new DSParameter.Connotation_KeywordDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter.Connotation_KeywordDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter dataSet) {
            return this.Adapter.Update(dataSet, "Connotation_Keyword");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Day, int Original_Month, int Original_Year, int Original_Marker_Connotation_ID, int Original_Source_ID, global::System.Nullable<global::System.DateTime> Original_Date, global::System.Nullable<int> Original_Mention) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Day));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Month));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Year));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Marker_Connotation_ID));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Source_ID));
            if ((Original_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Mention.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Mention.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Day, int Month, int Year, int Marker_Connotation_ID, int Source_ID, global::System.Nullable<global::System.DateTime> Date, global::System.Nullable<int> Mention) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Day));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Month));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Year));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Marker_Connotation_ID));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Source_ID));
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Mention.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Mention.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Day, int Month, int Year, int Marker_Connotation_ID, int Source_ID, global::System.Nullable<global::System.DateTime> Date, global::System.Nullable<int> Mention, int Original_Day, int Original_Month, int Original_Year, int Original_Marker_Connotation_ID, int Original_Source_ID, global::System.Nullable<global::System.DateTime> Original_Date, global::System.Nullable<int> Original_Mention) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Day));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Month));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Year));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Marker_Connotation_ID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Source_ID));
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Mention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Mention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_Day));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Month));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_Year));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Marker_Connotation_ID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_Source_ID));
            if ((Original_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_Mention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Mention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.DateTime> Date, global::System.Nullable<int> Mention, int Original_Day, int Original_Month, int Original_Year, int Original_Marker_Connotation_ID, int Original_Source_ID, global::System.Nullable<global::System.DateTime> Original_Date, global::System.Nullable<int> Original_Mention) {
            return this.Update(Original_Day, Original_Month, Original_Year, Original_Marker_Connotation_ID, Original_Source_ID, Date, Mention, Original_Day, Original_Month, Original_Year, Original_Marker_Connotation_ID, Original_Source_ID, Original_Date, Original_Mention);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Event_MarkerTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Event_MarkerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Event_Marker";
            tableMapping.ColumnMappings.Add("Event_Marker_ID", "Event_Marker_ID");
            tableMapping.ColumnMappings.Add("Marker_ID", "Marker_ID");
            tableMapping.ColumnMappings.Add("Period_In_Days", "Period_In_Days");
            tableMapping.ColumnMappings.Add("Start_Date", "Start_Date");
            tableMapping.ColumnMappings.Add("Start_Year", "Start_Year");
            tableMapping.ColumnMappings.Add("End_Year", "End_Year");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Event_Marker] WHERE (([Event_Marker_ID] = @Original_Event_Marker_ID) AND ((@IsNull_Marker_ID = 1 AND [Marker_ID] IS NULL) OR ([Marker_ID] = @Original_Marker_ID)) AND ((@IsNull_Period_In_Days = 1 AND [Period_In_Days] IS NULL) OR ([Period_In_Days] = @Original_Period_In_Days)) AND ((@IsNull_Start_Date = 1 AND [Start_Date] IS NULL) OR ([Start_Date] = @Original_Start_Date)) AND ((@IsNull_Start_Year = 1 AND [Start_Year] IS NULL) OR ([Start_Year] = @Original_Start_Year)) AND ((@IsNull_End_Year = 1 AND [End_Year] IS NULL) OR ([End_Year] = @Original_End_Year)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Event_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Event_Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Period_In_Days", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period_In_Days", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Period_In_Days", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period_In_Days", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Start_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Start_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Start_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Year", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Start_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_End_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "End_Year", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_End_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "End_Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Event_Marker] ([Event_Marker_ID], [Marker_ID], [Period_In_Days], [Start_Date], [Start_Year], [End_Year]) VALUES (@Event_Marker_ID, @Marker_ID, @Period_In_Days, @Start_Date, @Start_Year, @End_Year);
SELECT Event_Marker_ID, Marker_ID, Period_In_Days, Start_Date, Start_Year, End_Year FROM Event_Marker WHERE (Event_Marker_ID = @Event_Marker_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Event_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Event_Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Period_In_Days", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period_In_Days", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Start_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Start_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@End_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "End_Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Event_Marker] SET [Event_Marker_ID] = @Event_Marker_ID, [Marker_ID] = @Marker_ID, [Period_In_Days] = @Period_In_Days, [Start_Date] = @Start_Date, [Start_Year] = @Start_Year, [End_Year] = @End_Year WHERE (([Event_Marker_ID] = @Original_Event_Marker_ID) AND ((@IsNull_Marker_ID = 1 AND [Marker_ID] IS NULL) OR ([Marker_ID] = @Original_Marker_ID)) AND ((@IsNull_Period_In_Days = 1 AND [Period_In_Days] IS NULL) OR ([Period_In_Days] = @Original_Period_In_Days)) AND ((@IsNull_Start_Date = 1 AND [Start_Date] IS NULL) OR ([Start_Date] = @Original_Start_Date)) AND ((@IsNull_Start_Year = 1 AND [Start_Year] IS NULL) OR ([Start_Year] = @Original_Start_Year)) AND ((@IsNull_End_Year = 1 AND [End_Year] IS NULL) OR ([End_Year] = @Original_End_Year)));
SELECT Event_Marker_ID, Marker_ID, Period_In_Days, Start_Date, Start_Year, End_Year FROM Event_Marker WHERE (Event_Marker_ID = @Event_Marker_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Event_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Event_Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Period_In_Days", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period_In_Days", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Start_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Start_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@End_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "End_Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Event_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Event_Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Period_In_Days", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period_In_Days", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Period_In_Days", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Period_In_Days", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Start_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Start_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Start_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Year", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Start_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Start_Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_End_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "End_Year", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_End_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "End_Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSet.Properties.Settings.Default.MapProjectConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Event_Marker_ID, Marker_ID, Period_In_Days, Start_Date, Start_Year, End_Ye" +
                "ar FROM dbo.Event_Marker";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSParameter.Event_MarkerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSParameter.Event_MarkerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DSParameter.Event_MarkerDataTable dataTable = new DSParameter.Event_MarkerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter.Event_MarkerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter dataSet) {
            return this.Adapter.Update(dataSet, "Event_Marker");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Event_Marker_ID, global::System.Nullable<int> Original_Marker_ID, global::System.Nullable<int> Original_Period_In_Days, global::System.Nullable<global::System.DateTime> Original_Start_Date, global::System.Nullable<int> Original_Start_Year, global::System.Nullable<int> Original_End_Year) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Event_Marker_ID));
            if ((Original_Marker_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Marker_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_Period_In_Days.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Period_In_Days.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_Start_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_Start_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Start_Year.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Start_Year.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_End_Year.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_End_Year.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Event_Marker_ID, global::System.Nullable<int> Marker_ID, global::System.Nullable<int> Period_In_Days, global::System.Nullable<global::System.DateTime> Start_Date, global::System.Nullable<int> Start_Year, global::System.Nullable<int> End_Year) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Event_Marker_ID));
            if ((Marker_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Marker_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Period_In_Days.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Period_In_Days.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Start_Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Start_Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Start_Year.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Start_Year.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((End_Year.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(End_Year.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Event_Marker_ID, global::System.Nullable<int> Marker_ID, global::System.Nullable<int> Period_In_Days, global::System.Nullable<global::System.DateTime> Start_Date, global::System.Nullable<int> Start_Year, global::System.Nullable<int> End_Year, int Original_Event_Marker_ID, global::System.Nullable<int> Original_Marker_ID, global::System.Nullable<int> Original_Period_In_Days, global::System.Nullable<global::System.DateTime> Original_Start_Date, global::System.Nullable<int> Original_Start_Year, global::System.Nullable<int> Original_End_Year) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Event_Marker_ID));
            if ((Marker_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Marker_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Period_In_Days.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Period_In_Days.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Start_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Start_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Start_Year.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Start_Year.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((End_Year.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(End_Year.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Event_Marker_ID));
            if ((Original_Marker_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Marker_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_Period_In_Days.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Period_In_Days.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_Start_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_Start_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Start_Year.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_Start_Year.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_End_Year.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_End_Year.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> Marker_ID, global::System.Nullable<int> Period_In_Days, global::System.Nullable<global::System.DateTime> Start_Date, global::System.Nullable<int> Start_Year, global::System.Nullable<int> End_Year, int Original_Event_Marker_ID, global::System.Nullable<int> Original_Marker_ID, global::System.Nullable<int> Original_Period_In_Days, global::System.Nullable<global::System.DateTime> Original_Start_Date, global::System.Nullable<int> Original_Start_Year, global::System.Nullable<int> Original_End_Year) {
            return this.Update(Original_Event_Marker_ID, Marker_ID, Period_In_Days, Start_Date, Start_Year, End_Year, Original_Event_Marker_ID, Original_Marker_ID, Original_Period_In_Days, Original_Start_Date, Original_Start_Year, Original_End_Year);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class KeywordTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KeywordTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Keyword";
            tableMapping.ColumnMappings.Add("Day", "Day");
            tableMapping.ColumnMappings.Add("Month", "Month");
            tableMapping.ColumnMappings.Add("Year", "Year");
            tableMapping.ColumnMappings.Add("Source_ID", "Source_ID");
            tableMapping.ColumnMappings.Add("Marker_ID", "Marker_ID");
            tableMapping.ColumnMappings.Add("Count_Type_ID", "Count_Type_ID");
            tableMapping.ColumnMappings.Add("Rank_Type_ID", "Rank_Type_ID");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Mention", "Mention");
            tableMapping.ColumnMappings.Add("Rank", "Rank");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Keyword] WHERE (([Day] = @Original_Day) AND ([Month] = @Original_Month) AND ([Year] = @Original_Year) AND ([Source_ID] = @Original_Source_ID) AND ([Marker_ID] = @Original_Marker_ID) AND ([Count_Type_ID] = @Original_Count_Type_ID) AND ([Rank_Type_ID] = @Original_Rank_Type_ID) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Mention = 1 AND [Mention] IS NULL) OR ([Mention] = @Original_Mention)) AND ((@IsNull_Rank = 1 AND [Rank] IS NULL) OR ([Rank] = @Original_Rank)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Count_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count_Type_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rank_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank_Type_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Keyword] ([Day], [Month], [Year], [Source_ID], [Marker_ID], [Count_Type_ID], [Rank_Type_ID], [Date], [Mention], [Rank]) VALUES (@Day, @Month, @Year, @Source_ID, @Marker_ID, @Count_Type_ID, @Rank_Type_ID, @Date, @Mention, @Rank);
SELECT Day, Month, Year, Source_ID, Marker_ID, Count_Type_ID, Rank_Type_ID, Date, Mention, Rank FROM Keyword WHERE (Count_Type_ID = @Count_Type_ID) AND (Day = @Day) AND (Marker_ID = @Marker_ID) AND (Month = @Month) AND (Rank_Type_ID = @Rank_Type_ID) AND (Source_ID = @Source_ID) AND (Year = @Year)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Count_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count_Type_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rank_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank_Type_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Keyword] SET [Day] = @Day, [Month] = @Month, [Year] = @Year, [Source_ID] = @Source_ID, [Marker_ID] = @Marker_ID, [Count_Type_ID] = @Count_Type_ID, [Rank_Type_ID] = @Rank_Type_ID, [Date] = @Date, [Mention] = @Mention, [Rank] = @Rank WHERE (([Day] = @Original_Day) AND ([Month] = @Original_Month) AND ([Year] = @Original_Year) AND ([Source_ID] = @Original_Source_ID) AND ([Marker_ID] = @Original_Marker_ID) AND ([Count_Type_ID] = @Original_Count_Type_ID) AND ([Rank_Type_ID] = @Original_Rank_Type_ID) AND ((@IsNull_Date = 1 AND [Date] IS NULL) OR ([Date] = @Original_Date)) AND ((@IsNull_Mention = 1 AND [Mention] IS NULL) OR ([Mention] = @Original_Mention)) AND ((@IsNull_Rank = 1 AND [Rank] IS NULL) OR ([Rank] = @Original_Rank)));
SELECT Day, Month, Year, Source_ID, Marker_ID, Count_Type_ID, Rank_Type_ID, Date, Mention, Rank FROM Keyword WHERE (Count_Type_ID = @Count_Type_ID) AND (Day = @Day) AND (Marker_ID = @Marker_ID) AND (Month = @Month) AND (Rank_Type_ID = @Rank_Type_ID) AND (Source_ID = @Source_ID) AND (Year = @Year)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Count_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count_Type_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rank_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank_Type_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Day", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Day", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Month", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Month", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Year", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Year", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Source_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Count_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Count_Type_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rank_Type_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank_Type_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Date", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Mention", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Mention", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSet.Properties.Settings.Default.MapProjectConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Day, Month, Year, Source_ID, Marker_ID, Count_Type_ID, Rank_Type_ID, Date," +
                " Mention, Rank FROM dbo.Keyword";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSParameter.KeywordDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSParameter.KeywordDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DSParameter.KeywordDataTable dataTable = new DSParameter.KeywordDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter.KeywordDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter dataSet) {
            return this.Adapter.Update(dataSet, "Keyword");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Day, int Original_Month, int Original_Year, int Original_Source_ID, int Original_Marker_ID, int Original_Count_Type_ID, int Original_Rank_Type_ID, global::System.Nullable<global::System.DateTime> Original_Date, global::System.Nullable<int> Original_Mention, global::System.Nullable<int> Original_Rank) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Day));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Month));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Year));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Source_ID));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Marker_ID));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Count_Type_ID));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_Rank_Type_ID));
            if ((Original_Date.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_Mention.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_Mention.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_Rank.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_Rank.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Day, int Month, int Year, int Source_ID, int Marker_ID, int Count_Type_ID, int Rank_Type_ID, global::System.Nullable<global::System.DateTime> Date, global::System.Nullable<int> Mention, global::System.Nullable<int> Rank) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Day));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Month));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Year));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Source_ID));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Marker_ID));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Count_Type_ID));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(Rank_Type_ID));
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Mention.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Mention.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Rank.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Rank.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Day, 
                    int Month, 
                    int Year, 
                    int Source_ID, 
                    int Marker_ID, 
                    int Count_Type_ID, 
                    int Rank_Type_ID, 
                    global::System.Nullable<global::System.DateTime> Date, 
                    global::System.Nullable<int> Mention, 
                    global::System.Nullable<int> Rank, 
                    int Original_Day, 
                    int Original_Month, 
                    int Original_Year, 
                    int Original_Source_ID, 
                    int Original_Marker_ID, 
                    int Original_Count_Type_ID, 
                    int Original_Rank_Type_ID, 
                    global::System.Nullable<global::System.DateTime> Original_Date, 
                    global::System.Nullable<int> Original_Mention, 
                    global::System.Nullable<int> Original_Rank) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Day));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Month));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Year));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Source_ID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Marker_ID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Count_Type_ID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Rank_Type_ID));
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Mention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Mention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Day));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_Month));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Year));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_Source_ID));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_Marker_ID));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_Count_Type_ID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_Rank_Type_ID));
            if ((Original_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_Mention.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_Mention.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.DateTime> Date, global::System.Nullable<int> Mention, global::System.Nullable<int> Rank, int Original_Day, int Original_Month, int Original_Year, int Original_Source_ID, int Original_Marker_ID, int Original_Count_Type_ID, int Original_Rank_Type_ID, global::System.Nullable<global::System.DateTime> Original_Date, global::System.Nullable<int> Original_Mention, global::System.Nullable<int> Original_Rank) {
            return this.Update(Original_Day, Original_Month, Original_Year, Original_Source_ID, Original_Marker_ID, Original_Count_Type_ID, Original_Rank_Type_ID, Date, Mention, Rank, Original_Day, Original_Month, Original_Year, Original_Source_ID, Original_Marker_ID, Original_Count_Type_ID, Original_Rank_Type_ID, Original_Date, Original_Mention, Original_Rank);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Marker_ConnotationTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Marker_ConnotationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Marker_Connotation";
            tableMapping.ColumnMappings.Add("Marker_Connotation_ID", "Marker_Connotation_ID");
            tableMapping.ColumnMappings.Add("Marker_ID", "Marker_ID");
            tableMapping.ColumnMappings.Add("Marker_Connotation", "Marker_Connotation");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Marker_Connotation] WHERE (([Marker_Connotation_ID] = @Original_Marker_Connotation_ID) AND ((@IsNull_Marker_ID = 1 AND [Marker_ID] IS NULL) OR ([Marker_ID] = @Original_Marker_ID)) AND ((@IsNull_Marker_Connotation = 1 AND [Marker_Connotation] IS NULL) OR ([Marker_Connotation] = @Original_Marker_Connotation)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Connotation_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_Connotation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Connotation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Marker_Connotation] ([Marker_ID], [Marker_Connotation]) VALUES" +
                " (@Marker_ID, @Marker_Connotation);\r\nSELECT Marker_Connotation_ID, Marker_ID, Ma" +
                "rker_Connotation FROM Marker_Connotation WHERE (Marker_Connotation_ID = SCOPE_ID" +
                "ENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_Connotation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Marker_Connotation] SET [Marker_ID] = @Marker_ID, [Marker_Connotation] = @Marker_Connotation WHERE (([Marker_Connotation_ID] = @Original_Marker_Connotation_ID) AND ((@IsNull_Marker_ID = 1 AND [Marker_ID] IS NULL) OR ([Marker_ID] = @Original_Marker_ID)) AND ((@IsNull_Marker_Connotation = 1 AND [Marker_Connotation] IS NULL) OR ([Marker_Connotation] = @Original_Marker_Connotation)));
SELECT Marker_Connotation_ID, Marker_ID, Marker_Connotation FROM Marker_Connotation WHERE (Marker_Connotation_ID = @Marker_Connotation_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_Connotation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Connotation_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_Connotation", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Connotation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_Connotation_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Connotation_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSet.Properties.Settings.Default.MapProjectConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Marker_Connotation_ID, Marker_ID, Marker_Connotation FROM dbo.Marker_Conno" +
                "tation";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSParameter.Marker_ConnotationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSParameter.Marker_ConnotationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DSParameter.Marker_ConnotationDataTable dataTable = new DSParameter.Marker_ConnotationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter.Marker_ConnotationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter dataSet) {
            return this.Adapter.Update(dataSet, "Marker_Connotation");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Marker_Connotation_ID, global::System.Nullable<int> Original_Marker_ID, string Original_Marker_Connotation) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Marker_Connotation_ID));
            if ((Original_Marker_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Marker_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_Marker_Connotation == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Marker_Connotation));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> Marker_ID, string Marker_Connotation) {
            if ((Marker_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Marker_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Marker_Connotation == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Marker_Connotation));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> Marker_ID, string Marker_Connotation, int Original_Marker_Connotation_ID, global::System.Nullable<int> Original_Marker_ID, string Original_Marker_Connotation, int Marker_Connotation_ID) {
            if ((Marker_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Marker_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Marker_Connotation == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Marker_Connotation));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_Marker_Connotation_ID));
            if ((Original_Marker_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_Marker_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_Marker_Connotation == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Marker_Connotation));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Marker_Connotation_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> Marker_ID, string Marker_Connotation, int Original_Marker_Connotation_ID, global::System.Nullable<int> Original_Marker_ID, string Original_Marker_Connotation) {
            return this.Update(Marker_ID, Marker_Connotation, Original_Marker_Connotation_ID, Original_Marker_ID, Original_Marker_Connotation, Original_Marker_Connotation_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MarkerTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MarkerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Marker";
            tableMapping.ColumnMappings.Add("Marker_ID", "Marker_ID");
            tableMapping.ColumnMappings.Add("Marker_Tag", "Marker_Tag");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("Latitude", "Latitude");
            tableMapping.ColumnMappings.Add("Longitude", "Longitude");
            tableMapping.ColumnMappings.Add("Is_Recurring_Event", "Is_Recurring_Event");
            tableMapping.ColumnMappings.Add("Current_Daily_Count", "Current_Daily_Count");
            tableMapping.ColumnMappings.Add("Current_Monthly_Count", "Current_Monthly_Count");
            tableMapping.ColumnMappings.Add("Current_Yearly_Count", "Current_Yearly_Count");
            tableMapping.ColumnMappings.Add("Current_Daily_Count_Trend", "Current_Daily_Count_Trend");
            tableMapping.ColumnMappings.Add("Current_Monthly_Count_Trend", "Current_Monthly_Count_Trend");
            tableMapping.ColumnMappings.Add("Current_Yearly_Count_Trend", "Current_Yearly_Count_Trend");
            tableMapping.ColumnMappings.Add("Current_Daily_Count_Percentage", "Current_Daily_Count_Percentage");
            tableMapping.ColumnMappings.Add("Current_Yearly_Count_Trend_Percentage", "Current_Yearly_Count_Trend_Percentage");
            tableMapping.ColumnMappings.Add("Current_Monthly_Count_Trend_Percentage", "Current_Monthly_Count_Trend_Percentage");
            tableMapping.ColumnMappings.Add("Current_Daily_Rank", "Current_Daily_Rank");
            tableMapping.ColumnMappings.Add("Current_Monthly_Rank", "Current_Monthly_Rank");
            tableMapping.ColumnMappings.Add("Current_Yearly_Rank", "Current_Yearly_Rank");
            tableMapping.ColumnMappings.Add("Current_Daily_Rank_Trend", "Current_Daily_Rank_Trend");
            tableMapping.ColumnMappings.Add("Current_Monthly_Rank_Trend", "Current_Monthly_Rank_Trend");
            tableMapping.ColumnMappings.Add("Current_Yearly_Rank_Trend", "Current_Yearly_Rank_Trend");
            tableMapping.ColumnMappings.Add("Current_Daily_Rank_Trend_Percentage", "Current_Daily_Rank_Trend_Percentage");
            tableMapping.ColumnMappings.Add("Current_Monthly_Rank_Trend_Percentage", "Current_Monthly_Rank_Trend_Percentage");
            tableMapping.ColumnMappings.Add("Current_Yearly_Rank_Trend_Percentage", "Current_Yearly_Rank_Trend_Percentage");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Marker] WHERE (([Marker_ID] = @Original_Marker_ID) AND ((@IsNu" +
                "ll_Marker_Tag = 1 AND [Marker_Tag] IS NULL) OR ([Marker_Tag] = @Original_Marker_" +
                "Tag)) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original" +
                "_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL) OR ([City] = @Original_Cit" +
                "y)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR ([State] = @Original_State))" +
                " AND ((@IsNull_Country = 1 AND [Country] IS NULL) OR ([Country] = @Original_Coun" +
                "try)) AND ((@IsNull_Latitude = 1 AND [Latitude] IS NULL) OR ([Latitude] = @Origi" +
                "nal_Latitude)) AND ((@IsNull_Longitude = 1 AND [Longitude] IS NULL) OR ([Longitu" +
                "de] = @Original_Longitude)) AND ((@IsNull_Is_Recurring_Event = 1 AND [Is_Recurri" +
                "ng_Event] IS NULL) OR ([Is_Recurring_Event] = @Original_Is_Recurring_Event)) AND" +
                " ((@IsNull_Current_Daily_Count = 1 AND [Current_Daily_Count] IS NULL) OR ([Curre" +
                "nt_Daily_Count] = @Original_Current_Daily_Count)) AND ((@IsNull_Current_Monthly_" +
                "Count = 1 AND [Current_Monthly_Count] IS NULL) OR ([Current_Monthly_Count] = @Or" +
                "iginal_Current_Monthly_Count)) AND ((@IsNull_Current_Yearly_Count = 1 AND [Curre" +
                "nt_Yearly_Count] IS NULL) OR ([Current_Yearly_Count] = @Original_Current_Yearly_" +
                "Count)) AND ((@IsNull_Current_Daily_Count_Trend = 1 AND [Current_Daily_Count_Tre" +
                "nd] IS NULL) OR ([Current_Daily_Count_Trend] = @Original_Current_Daily_Count_Tre" +
                "nd)) AND ((@IsNull_Current_Monthly_Count_Trend = 1 AND [Current_Monthly_Count_Tr" +
                "end] IS NULL) OR ([Current_Monthly_Count_Trend] = @Original_Current_Monthly_Coun" +
                "t_Trend)) AND ((@IsNull_Current_Yearly_Count_Trend = 1 AND [Current_Yearly_Count" +
                "_Trend] IS NULL) OR ([Current_Yearly_Count_Trend] = @Original_Current_Yearly_Cou" +
                "nt_Trend)) AND ((@IsNull_Current_Daily_Count_Percentage = 1 AND [Current_Daily_C" +
                "ount_Percentage] IS NULL) OR ([Current_Daily_Count_Percentage] = @Original_Curre" +
                "nt_Daily_Count_Percentage)) AND ((@IsNull_Current_Yearly_Count_Trend_Percentage " +
                "= 1 AND [Current_Yearly_Count_Trend_Percentage] IS NULL) OR ([Current_Yearly_Cou" +
                "nt_Trend_Percentage] = @Original_Current_Yearly_Count_Trend_Percentage)) AND ((@" +
                "IsNull_Current_Monthly_Count_Trend_Percentage = 1 AND [Current_Monthly_Count_Tre" +
                "nd_Percentage] IS NULL) OR ([Current_Monthly_Count_Trend_Percentage] = @Original" +
                "_Current_Monthly_Count_Trend_Percentage)) AND ((@IsNull_Current_Daily_Rank = 1 A" +
                "ND [Current_Daily_Rank] IS NULL) OR ([Current_Daily_Rank] = @Original_Current_Da" +
                "ily_Rank)) AND ((@IsNull_Current_Monthly_Rank = 1 AND [Current_Monthly_Rank] IS " +
                "NULL) OR ([Current_Monthly_Rank] = @Original_Current_Monthly_Rank)) AND ((@IsNul" +
                "l_Current_Yearly_Rank = 1 AND [Current_Yearly_Rank] IS NULL) OR ([Current_Yearly" +
                "_Rank] = @Original_Current_Yearly_Rank)) AND ((@IsNull_Current_Daily_Rank_Trend " +
                "= 1 AND [Current_Daily_Rank_Trend] IS NULL) OR ([Current_Daily_Rank_Trend] = @Or" +
                "iginal_Current_Daily_Rank_Trend)) AND ((@IsNull_Current_Monthly_Rank_Trend = 1 A" +
                "ND [Current_Monthly_Rank_Trend] IS NULL) OR ([Current_Monthly_Rank_Trend] = @Ori" +
                "ginal_Current_Monthly_Rank_Trend)) AND ((@IsNull_Current_Yearly_Rank_Trend = 1 A" +
                "ND [Current_Yearly_Rank_Trend] IS NULL) OR ([Current_Yearly_Rank_Trend] = @Origi" +
                "nal_Current_Yearly_Rank_Trend)) AND ((@IsNull_Current_Daily_Rank_Trend_Percentag" +
                "e = 1 AND [Current_Daily_Rank_Trend_Percentage] IS NULL) OR ([Current_Daily_Rank" +
                "_Trend_Percentage] = @Original_Current_Daily_Rank_Trend_Percentage)) AND ((@IsNu" +
                "ll_Current_Monthly_Rank_Trend_Percentage = 1 AND [Current_Monthly_Rank_Trend_Per" +
                "centage] IS NULL) OR ([Current_Monthly_Rank_Trend_Percentage] = @Original_Curren" +
                "t_Monthly_Rank_Trend_Percentage)) AND ((@IsNull_Current_Yearly_Rank_Trend_Percen" +
                "tage = 1 AND [Current_Yearly_Rank_Trend_Percentage] IS NULL) OR ([Current_Yearly" +
                "_Rank_Trend_Percentage] = @Original_Current_Yearly_Rank_Trend_Percentage)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_Tag", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Tag", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Tag", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Tag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Country", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Country", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Latitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Latitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Latitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Longitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Longitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Longitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Is_Recurring_Event", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Is_Recurring_Event", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Is_Recurring_Event", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Is_Recurring_Event", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Count_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Count_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Daily_Count_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Count_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Yearly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Count_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Monthly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Rank_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Daily_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Monthly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Yearly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Marker] ([Marker_Tag], [Address], [City], [State], [Country], " +
                "[Latitude], [Longitude], [Is_Recurring_Event], [Current_Daily_Count], [Current_M" +
                "onthly_Count], [Current_Yearly_Count], [Current_Daily_Count_Trend], [Current_Mon" +
                "thly_Count_Trend], [Current_Yearly_Count_Trend], [Current_Daily_Count_Percentage" +
                "], [Current_Yearly_Count_Trend_Percentage], [Current_Monthly_Count_Trend_Percent" +
                "age], [Current_Daily_Rank], [Current_Monthly_Rank], [Current_Yearly_Rank], [Curr" +
                "ent_Daily_Rank_Trend], [Current_Monthly_Rank_Trend], [Current_Yearly_Rank_Trend]" +
                ", [Current_Daily_Rank_Trend_Percentage], [Current_Monthly_Rank_Trend_Percentage]" +
                ", [Current_Yearly_Rank_Trend_Percentage]) VALUES (@Marker_Tag, @Address, @City, " +
                "@State, @Country, @Latitude, @Longitude, @Is_Recurring_Event, @Current_Daily_Cou" +
                "nt, @Current_Monthly_Count, @Current_Yearly_Count, @Current_Daily_Count_Trend, @" +
                "Current_Monthly_Count_Trend, @Current_Yearly_Count_Trend, @Current_Daily_Count_P" +
                "ercentage, @Current_Yearly_Count_Trend_Percentage, @Current_Monthly_Count_Trend_" +
                "Percentage, @Current_Daily_Rank, @Current_Monthly_Rank, @Current_Yearly_Rank, @C" +
                "urrent_Daily_Rank_Trend, @Current_Monthly_Rank_Trend, @Current_Yearly_Rank_Trend" +
                ", @Current_Daily_Rank_Trend_Percentage, @Current_Monthly_Rank_Trend_Percentage, " +
                "@Current_Yearly_Rank_Trend_Percentage);\r\nSELECT Marker_ID, Marker_Tag, Address, " +
                "City, State, Country, Latitude, Longitude, Is_Recurring_Event, Current_Daily_Cou" +
                "nt, Current_Monthly_Count, Current_Yearly_Count, Current_Daily_Count_Trend, Curr" +
                "ent_Monthly_Count_Trend, Current_Yearly_Count_Trend, Current_Daily_Count_Percent" +
                "age, Current_Yearly_Count_Trend_Percentage, Current_Monthly_Count_Trend_Percenta" +
                "ge, Current_Daily_Rank, Current_Monthly_Rank, Current_Yearly_Rank, Current_Daily" +
                "_Rank_Trend, Current_Monthly_Rank_Trend, Current_Yearly_Rank_Trend, Current_Dail" +
                "y_Rank_Trend_Percentage, Current_Monthly_Rank_Trend_Percentage, Current_Yearly_R" +
                "ank_Trend_Percentage FROM Marker WHERE (Marker_ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_Tag", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Tag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Latitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Latitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Longitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Longitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Is_Recurring_Event", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Is_Recurring_Event", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Count_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Daily_Count_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Yearly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Monthly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Daily_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Monthly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Yearly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Marker] SET [Marker_Tag] = @Marker_Tag, [Address] = @Address, [City" +
                "] = @City, [State] = @State, [Country] = @Country, [Latitude] = @Latitude, [Long" +
                "itude] = @Longitude, [Is_Recurring_Event] = @Is_Recurring_Event, [Current_Daily_" +
                "Count] = @Current_Daily_Count, [Current_Monthly_Count] = @Current_Monthly_Count," +
                " [Current_Yearly_Count] = @Current_Yearly_Count, [Current_Daily_Count_Trend] = @" +
                "Current_Daily_Count_Trend, [Current_Monthly_Count_Trend] = @Current_Monthly_Coun" +
                "t_Trend, [Current_Yearly_Count_Trend] = @Current_Yearly_Count_Trend, [Current_Da" +
                "ily_Count_Percentage] = @Current_Daily_Count_Percentage, [Current_Yearly_Count_T" +
                "rend_Percentage] = @Current_Yearly_Count_Trend_Percentage, [Current_Monthly_Coun" +
                "t_Trend_Percentage] = @Current_Monthly_Count_Trend_Percentage, [Current_Daily_Ra" +
                "nk] = @Current_Daily_Rank, [Current_Monthly_Rank] = @Current_Monthly_Rank, [Curr" +
                "ent_Yearly_Rank] = @Current_Yearly_Rank, [Current_Daily_Rank_Trend] = @Current_D" +
                "aily_Rank_Trend, [Current_Monthly_Rank_Trend] = @Current_Monthly_Rank_Trend, [Cu" +
                "rrent_Yearly_Rank_Trend] = @Current_Yearly_Rank_Trend, [Current_Daily_Rank_Trend" +
                "_Percentage] = @Current_Daily_Rank_Trend_Percentage, [Current_Monthly_Rank_Trend" +
                "_Percentage] = @Current_Monthly_Rank_Trend_Percentage, [Current_Yearly_Rank_Tren" +
                "d_Percentage] = @Current_Yearly_Rank_Trend_Percentage WHERE (([Marker_ID] = @Ori" +
                "ginal_Marker_ID) AND ((@IsNull_Marker_Tag = 1 AND [Marker_Tag] IS NULL) OR ([Mar" +
                "ker_Tag] = @Original_Marker_Tag)) AND ((@IsNull_Address = 1 AND [Address] IS NUL" +
                "L) OR ([Address] = @Original_Address)) AND ((@IsNull_City = 1 AND [City] IS NULL" +
                ") OR ([City] = @Original_City)) AND ((@IsNull_State = 1 AND [State] IS NULL) OR " +
                "([State] = @Original_State)) AND ((@IsNull_Country = 1 AND [Country] IS NULL) OR" +
                " ([Country] = @Original_Country)) AND ((@IsNull_Latitude = 1 AND [Latitude] IS N" +
                "ULL) OR ([Latitude] = @Original_Latitude)) AND ((@IsNull_Longitude = 1 AND [Long" +
                "itude] IS NULL) OR ([Longitude] = @Original_Longitude)) AND ((@IsNull_Is_Recurri" +
                "ng_Event = 1 AND [Is_Recurring_Event] IS NULL) OR ([Is_Recurring_Event] = @Origi" +
                "nal_Is_Recurring_Event)) AND ((@IsNull_Current_Daily_Count = 1 AND [Current_Dail" +
                "y_Count] IS NULL) OR ([Current_Daily_Count] = @Original_Current_Daily_Count)) AN" +
                "D ((@IsNull_Current_Monthly_Count = 1 AND [Current_Monthly_Count] IS NULL) OR ([" +
                "Current_Monthly_Count] = @Original_Current_Monthly_Count)) AND ((@IsNull_Current" +
                "_Yearly_Count = 1 AND [Current_Yearly_Count] IS NULL) OR ([Current_Yearly_Count]" +
                " = @Original_Current_Yearly_Count)) AND ((@IsNull_Current_Daily_Count_Trend = 1 " +
                "AND [Current_Daily_Count_Trend] IS NULL) OR ([Current_Daily_Count_Trend] = @Orig" +
                "inal_Current_Daily_Count_Trend)) AND ((@IsNull_Current_Monthly_Count_Trend = 1 A" +
                "ND [Current_Monthly_Count_Trend] IS NULL) OR ([Current_Monthly_Count_Trend] = @O" +
                "riginal_Current_Monthly_Count_Trend)) AND ((@IsNull_Current_Yearly_Count_Trend =" +
                " 1 AND [Current_Yearly_Count_Trend] IS NULL) OR ([Current_Yearly_Count_Trend] = " +
                "@Original_Current_Yearly_Count_Trend)) AND ((@IsNull_Current_Daily_Count_Percent" +
                "age = 1 AND [Current_Daily_Count_Percentage] IS NULL) OR ([Current_Daily_Count_P" +
                "ercentage] = @Original_Current_Daily_Count_Percentage)) AND ((@IsNull_Current_Ye" +
                "arly_Count_Trend_Percentage = 1 AND [Current_Yearly_Count_Trend_Percentage] IS N" +
                "ULL) OR ([Current_Yearly_Count_Trend_Percentage] = @Original_Current_Yearly_Coun" +
                "t_Trend_Percentage)) AND ((@IsNull_Current_Monthly_Count_Trend_Percentage = 1 AN" +
                "D [Current_Monthly_Count_Trend_Percentage] IS NULL) OR ([Current_Monthly_Count_T" +
                "rend_Percentage] = @Original_Current_Monthly_Count_Trend_Percentage)) AND ((@IsN" +
                "ull_Current_Daily_Rank = 1 AND [Current_Daily_Rank] IS NULL) OR ([Current_Daily_" +
                "Rank] = @Original_Current_Daily_Rank)) AND ((@IsNull_Current_Monthly_Rank = 1 AN" +
                "D [Current_Monthly_Rank] IS NULL) OR ([Current_Monthly_Rank] = @Original_Current" +
                "_Monthly_Rank)) AND ((@IsNull_Current_Yearly_Rank = 1 AND [Current_Yearly_Rank] " +
                "IS NULL) OR ([Current_Yearly_Rank] = @Original_Current_Yearly_Rank)) AND ((@IsNu" +
                "ll_Current_Daily_Rank_Trend = 1 AND [Current_Daily_Rank_Trend] IS NULL) OR ([Cur" +
                "rent_Daily_Rank_Trend] = @Original_Current_Daily_Rank_Trend)) AND ((@IsNull_Curr" +
                "ent_Monthly_Rank_Trend = 1 AND [Current_Monthly_Rank_Trend] IS NULL) OR ([Curren" +
                "t_Monthly_Rank_Trend] = @Original_Current_Monthly_Rank_Trend)) AND ((@IsNull_Cur" +
                "rent_Yearly_Rank_Trend = 1 AND [Current_Yearly_Rank_Trend] IS NULL) OR ([Current" +
                "_Yearly_Rank_Trend] = @Original_Current_Yearly_Rank_Trend)) AND ((@IsNull_Curren" +
                "t_Daily_Rank_Trend_Percentage = 1 AND [Current_Daily_Rank_Trend_Percentage] IS N" +
                "ULL) OR ([Current_Daily_Rank_Trend_Percentage] = @Original_Current_Daily_Rank_Tr" +
                "end_Percentage)) AND ((@IsNull_Current_Monthly_Rank_Trend_Percentage = 1 AND [Cu" +
                "rrent_Monthly_Rank_Trend_Percentage] IS NULL) OR ([Current_Monthly_Rank_Trend_Pe" +
                "rcentage] = @Original_Current_Monthly_Rank_Trend_Percentage)) AND ((@IsNull_Curr" +
                "ent_Yearly_Rank_Trend_Percentage = 1 AND [Current_Yearly_Rank_Trend_Percentage] " +
                "IS NULL) OR ([Current_Yearly_Rank_Trend_Percentage] = @Original_Current_Yearly_R" +
                "ank_Trend_Percentage)));\r\nSELECT Marker_ID, Marker_Tag, Address, City, State, Co" +
                "untry, Latitude, Longitude, Is_Recurring_Event, Current_Daily_Count, Current_Mon" +
                "thly_Count, Current_Yearly_Count, Current_Daily_Count_Trend, Current_Monthly_Cou" +
                "nt_Trend, Current_Yearly_Count_Trend, Current_Daily_Count_Percentage, Current_Ye" +
                "arly_Count_Trend_Percentage, Current_Monthly_Count_Trend_Percentage, Current_Dai" +
                "ly_Rank, Current_Monthly_Rank, Current_Yearly_Rank, Current_Daily_Rank_Trend, Cu" +
                "rrent_Monthly_Rank_Trend, Current_Yearly_Rank_Trend, Current_Daily_Rank_Trend_Pe" +
                "rcentage, Current_Monthly_Rank_Trend_Percentage, Current_Yearly_Rank_Trend_Perce" +
                "ntage FROM Marker WHERE (Marker_ID = @Marker_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_Tag", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Tag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Country", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Latitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Latitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Longitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Longitude", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Is_Recurring_Event", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Is_Recurring_Event", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Count_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Daily_Count_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Yearly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Monthly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Daily_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Daily_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Monthly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Monthly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Current_Yearly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Yearly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Marker_Tag", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Tag", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Marker_Tag", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_Tag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Address", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Address", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_City", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_City", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "City", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_State", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Country", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Country", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Country", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Latitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Latitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Latitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Latitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Longitude", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Longitude", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Longitude", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 10, "Longitude", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Is_Recurring_Event", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Is_Recurring_Event", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Is_Recurring_Event", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Is_Recurring_Event", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Count", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Count_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Count_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Count_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Count_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Daily_Count_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Count_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Yearly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Count_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Count_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 2, "Current_Monthly_Count_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Rank", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Rank_Trend", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Daily_Rank_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Daily_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Daily_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Daily_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Monthly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Monthly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Monthly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Monthly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Current_Yearly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Current_Yearly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Current_Yearly_Rank_Trend_Percentage", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "Current_Yearly_Rank_Trend_Percentage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Marker_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Marker_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DataSet.Properties.Settings.Default.MapProjectConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Marker_ID, Marker_Tag, Address, City, State, Country, Latitude, Longitude, Is_Recurring_Event, Current_Daily_Count, Current_Monthly_Count, Current_Yearly_Count, Current_Daily_Count_Trend, Current_Monthly_Count_Trend, Current_Yearly_Count_Trend, Current_Daily_Count_Percentage, Current_Yearly_Count_Trend_Percentage, Current_Monthly_Count_Trend_Percentage, Current_Daily_Rank, Current_Monthly_Rank, Current_Yearly_Rank, Current_Daily_Rank_Trend, Current_Monthly_Rank_Trend, Current_Yearly_Rank_Trend, Current_Daily_Rank_Trend_Percentage, Current_Monthly_Rank_Trend_Percentage, Current_Yearly_Rank_Trend_Percentage FROM dbo.Marker";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSParameter.MarkerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSParameter.MarkerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DSParameter.MarkerDataTable dataTable = new DSParameter.MarkerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter.MarkerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DSParameter dataSet) {
            return this.Adapter.Update(dataSet, "Marker");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_Marker_ID, 
                    string Original_Marker_Tag, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Country, 
                    global::System.Nullable<decimal> Original_Latitude, 
                    global::System.Nullable<decimal> Original_Longitude, 
                    global::System.Nullable<bool> Original_Is_Recurring_Event, 
                    global::System.Nullable<int> Original_Current_Daily_Count, 
                    global::System.Nullable<int> Original_Current_Monthly_Count, 
                    global::System.Nullable<int> Original_Current_Yearly_Count, 
                    global::System.Nullable<int> Original_Current_Daily_Count_Trend, 
                    global::System.Nullable<int> Original_Current_Monthly_Count_Trend, 
                    global::System.Nullable<int> Original_Current_Yearly_Count_Trend, 
                    global::System.Nullable<decimal> Original_Current_Daily_Count_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Yearly_Count_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Monthly_Count_Trend_Percentage, 
                    global::System.Nullable<int> Original_Current_Daily_Rank, 
                    global::System.Nullable<int> Original_Current_Monthly_Rank, 
                    global::System.Nullable<int> Original_Current_Yearly_Rank, 
                    global::System.Nullable<int> Original_Current_Daily_Rank_Trend, 
                    global::System.Nullable<int> Original_Current_Monthly_Rank_Trend, 
                    global::System.Nullable<int> Original_Current_Yearly_Rank_Trend, 
                    global::System.Nullable<decimal> Original_Current_Daily_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Monthly_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Yearly_Rank_Trend_Percentage) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Marker_ID));
            if ((Original_Marker_Tag == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Marker_Tag));
            }
            if ((Original_Address == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_State));
            }
            if ((Original_Country == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Country));
            }
            if ((Original_Latitude.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_Latitude.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Longitude.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_Longitude.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_Is_Recurring_Event.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_Is_Recurring_Event.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Count.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_Current_Daily_Count.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Count.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_Current_Monthly_Count.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Count.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_Current_Yearly_Count.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Count_Trend.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_Current_Daily_Count_Trend.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Count_Trend.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_Current_Monthly_Count_Trend.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Count_Trend.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(Original_Current_Yearly_Count_Trend.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Count_Percentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((decimal)(Original_Current_Daily_Count_Percentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((decimal)(Original_Current_Yearly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((decimal)(Original_Current_Monthly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Rank.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((int)(Original_Current_Daily_Rank.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Rank.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((int)(Original_Current_Monthly_Rank.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Rank.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((int)(Original_Current_Yearly_Rank.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Rank_Trend.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((int)(Original_Current_Daily_Rank_Trend.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Rank_Trend.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((int)(Original_Current_Monthly_Rank_Trend.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Rank_Trend.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((int)(Original_Current_Yearly_Rank_Trend.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((decimal)(Original_Current_Daily_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((decimal)(Original_Current_Monthly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((decimal)(Original_Current_Yearly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Marker_Tag, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    global::System.Nullable<decimal> Latitude, 
                    global::System.Nullable<decimal> Longitude, 
                    global::System.Nullable<bool> Is_Recurring_Event, 
                    global::System.Nullable<int> Current_Daily_Count, 
                    global::System.Nullable<int> Current_Monthly_Count, 
                    global::System.Nullable<int> Current_Yearly_Count, 
                    global::System.Nullable<int> Current_Daily_Count_Trend, 
                    global::System.Nullable<int> Current_Monthly_Count_Trend, 
                    global::System.Nullable<int> Current_Yearly_Count_Trend, 
                    global::System.Nullable<decimal> Current_Daily_Count_Percentage, 
                    global::System.Nullable<decimal> Current_Yearly_Count_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Monthly_Count_Trend_Percentage, 
                    global::System.Nullable<int> Current_Daily_Rank, 
                    global::System.Nullable<int> Current_Monthly_Rank, 
                    global::System.Nullable<int> Current_Yearly_Rank, 
                    global::System.Nullable<int> Current_Daily_Rank_Trend, 
                    global::System.Nullable<int> Current_Monthly_Rank_Trend, 
                    global::System.Nullable<int> Current_Yearly_Rank_Trend, 
                    global::System.Nullable<decimal> Current_Daily_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Monthly_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Yearly_Rank_Trend_Percentage) {
            if ((Marker_Tag == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Marker_Tag));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(State));
            }
            if ((Country == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Country));
            }
            if ((Latitude.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Latitude.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Longitude.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(Longitude.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Is_Recurring_Event.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(Is_Recurring_Event.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Count.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Current_Daily_Count.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Count.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Current_Monthly_Count.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Count.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Current_Yearly_Count.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Count_Trend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(Current_Daily_Count_Trend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Count_Trend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(Current_Monthly_Count_Trend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Count_Trend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(Current_Yearly_Count_Trend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Count_Percentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(Current_Daily_Count_Percentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(Current_Yearly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(Current_Monthly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Rank.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(Current_Daily_Rank.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Rank.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((int)(Current_Monthly_Rank.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Rank.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((int)(Current_Yearly_Rank.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Rank_Trend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((int)(Current_Daily_Rank_Trend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Rank_Trend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((int)(Current_Monthly_Rank_Trend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Rank_Trend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((int)(Current_Yearly_Rank_Trend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(Current_Daily_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(Current_Monthly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(Current_Yearly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Marker_Tag, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    global::System.Nullable<decimal> Latitude, 
                    global::System.Nullable<decimal> Longitude, 
                    global::System.Nullable<bool> Is_Recurring_Event, 
                    global::System.Nullable<int> Current_Daily_Count, 
                    global::System.Nullable<int> Current_Monthly_Count, 
                    global::System.Nullable<int> Current_Yearly_Count, 
                    global::System.Nullable<int> Current_Daily_Count_Trend, 
                    global::System.Nullable<int> Current_Monthly_Count_Trend, 
                    global::System.Nullable<int> Current_Yearly_Count_Trend, 
                    global::System.Nullable<decimal> Current_Daily_Count_Percentage, 
                    global::System.Nullable<decimal> Current_Yearly_Count_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Monthly_Count_Trend_Percentage, 
                    global::System.Nullable<int> Current_Daily_Rank, 
                    global::System.Nullable<int> Current_Monthly_Rank, 
                    global::System.Nullable<int> Current_Yearly_Rank, 
                    global::System.Nullable<int> Current_Daily_Rank_Trend, 
                    global::System.Nullable<int> Current_Monthly_Rank_Trend, 
                    global::System.Nullable<int> Current_Yearly_Rank_Trend, 
                    global::System.Nullable<decimal> Current_Daily_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Monthly_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Yearly_Rank_Trend_Percentage, 
                    int Original_Marker_ID, 
                    string Original_Marker_Tag, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Country, 
                    global::System.Nullable<decimal> Original_Latitude, 
                    global::System.Nullable<decimal> Original_Longitude, 
                    global::System.Nullable<bool> Original_Is_Recurring_Event, 
                    global::System.Nullable<int> Original_Current_Daily_Count, 
                    global::System.Nullable<int> Original_Current_Monthly_Count, 
                    global::System.Nullable<int> Original_Current_Yearly_Count, 
                    global::System.Nullable<int> Original_Current_Daily_Count_Trend, 
                    global::System.Nullable<int> Original_Current_Monthly_Count_Trend, 
                    global::System.Nullable<int> Original_Current_Yearly_Count_Trend, 
                    global::System.Nullable<decimal> Original_Current_Daily_Count_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Yearly_Count_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Monthly_Count_Trend_Percentage, 
                    global::System.Nullable<int> Original_Current_Daily_Rank, 
                    global::System.Nullable<int> Original_Current_Monthly_Rank, 
                    global::System.Nullable<int> Original_Current_Yearly_Rank, 
                    global::System.Nullable<int> Original_Current_Daily_Rank_Trend, 
                    global::System.Nullable<int> Original_Current_Monthly_Rank_Trend, 
                    global::System.Nullable<int> Original_Current_Yearly_Rank_Trend, 
                    global::System.Nullable<decimal> Original_Current_Daily_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Monthly_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Yearly_Rank_Trend_Percentage, 
                    int Marker_ID) {
            if ((Marker_Tag == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Marker_Tag));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Address));
            }
            if ((City == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(City));
            }
            if ((State == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(State));
            }
            if ((Country == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Country));
            }
            if ((Latitude.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Latitude.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Longitude.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Longitude.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Is_Recurring_Event.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Is_Recurring_Event.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Current_Daily_Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Current_Monthly_Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Current_Yearly_Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Count_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Current_Daily_Count_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Count_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Current_Monthly_Count_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Count_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Current_Yearly_Count_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Count_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Current_Daily_Count_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(Current_Yearly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Current_Monthly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Current_Daily_Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Current_Monthly_Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Current_Yearly_Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Rank_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Current_Daily_Rank_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Rank_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Current_Monthly_Rank_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Rank_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Current_Yearly_Rank_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Current_Daily_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Current_Daily_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Current_Monthly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Current_Monthly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Current_Yearly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Current_Yearly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_Marker_ID));
            if ((Original_Marker_Tag == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_Marker_Tag));
            }
            if ((Original_Address == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Address));
            }
            if ((Original_City == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_City));
            }
            if ((Original_State == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_State));
            }
            if ((Original_Country == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_Country));
            }
            if ((Original_Latitude.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(Original_Latitude.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_Longitude.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(Original_Longitude.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_Is_Recurring_Event.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((bool)(Original_Is_Recurring_Event.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(Original_Current_Daily_Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(Original_Current_Monthly_Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Count.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((int)(Original_Current_Yearly_Count.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Count_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(Original_Current_Daily_Count_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Count_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((int)(Original_Current_Monthly_Count_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Count_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((int)(Original_Current_Yearly_Count_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Count_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((decimal)(Original_Current_Daily_Count_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((decimal)(Original_Current_Yearly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Count_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((decimal)(Original_Current_Monthly_Count_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((int)(Original_Current_Daily_Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((int)(Original_Current_Monthly_Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Rank.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((int)(Original_Current_Yearly_Rank.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Rank_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((int)(Original_Current_Daily_Rank_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Rank_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((int)(Original_Current_Monthly_Rank_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Rank_Trend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((int)(Original_Current_Yearly_Rank_Trend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Daily_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((decimal)(Original_Current_Daily_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Monthly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((decimal)(Original_Current_Monthly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            if ((Original_Current_Yearly_Rank_Trend_Percentage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((decimal)(Original_Current_Yearly_Rank_Trend_Percentage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[79].Value = ((int)(Marker_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Marker_Tag, 
                    string Address, 
                    string City, 
                    string State, 
                    string Country, 
                    global::System.Nullable<decimal> Latitude, 
                    global::System.Nullable<decimal> Longitude, 
                    global::System.Nullable<bool> Is_Recurring_Event, 
                    global::System.Nullable<int> Current_Daily_Count, 
                    global::System.Nullable<int> Current_Monthly_Count, 
                    global::System.Nullable<int> Current_Yearly_Count, 
                    global::System.Nullable<int> Current_Daily_Count_Trend, 
                    global::System.Nullable<int> Current_Monthly_Count_Trend, 
                    global::System.Nullable<int> Current_Yearly_Count_Trend, 
                    global::System.Nullable<decimal> Current_Daily_Count_Percentage, 
                    global::System.Nullable<decimal> Current_Yearly_Count_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Monthly_Count_Trend_Percentage, 
                    global::System.Nullable<int> Current_Daily_Rank, 
                    global::System.Nullable<int> Current_Monthly_Rank, 
                    global::System.Nullable<int> Current_Yearly_Rank, 
                    global::System.Nullable<int> Current_Daily_Rank_Trend, 
                    global::System.Nullable<int> Current_Monthly_Rank_Trend, 
                    global::System.Nullable<int> Current_Yearly_Rank_Trend, 
                    global::System.Nullable<decimal> Current_Daily_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Monthly_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Current_Yearly_Rank_Trend_Percentage, 
                    int Original_Marker_ID, 
                    string Original_Marker_Tag, 
                    string Original_Address, 
                    string Original_City, 
                    string Original_State, 
                    string Original_Country, 
                    global::System.Nullable<decimal> Original_Latitude, 
                    global::System.Nullable<decimal> Original_Longitude, 
                    global::System.Nullable<bool> Original_Is_Recurring_Event, 
                    global::System.Nullable<int> Original_Current_Daily_Count, 
                    global::System.Nullable<int> Original_Current_Monthly_Count, 
                    global::System.Nullable<int> Original_Current_Yearly_Count, 
                    global::System.Nullable<int> Original_Current_Daily_Count_Trend, 
                    global::System.Nullable<int> Original_Current_Monthly_Count_Trend, 
                    global::System.Nullable<int> Original_Current_Yearly_Count_Trend, 
                    global::System.Nullable<decimal> Original_Current_Daily_Count_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Yearly_Count_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Monthly_Count_Trend_Percentage, 
                    global::System.Nullable<int> Original_Current_Daily_Rank, 
                    global::System.Nullable<int> Original_Current_Monthly_Rank, 
                    global::System.Nullable<int> Original_Current_Yearly_Rank, 
                    global::System.Nullable<int> Original_Current_Daily_Rank_Trend, 
                    global::System.Nullable<int> Original_Current_Monthly_Rank_Trend, 
                    global::System.Nullable<int> Original_Current_Yearly_Rank_Trend, 
                    global::System.Nullable<decimal> Original_Current_Daily_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Monthly_Rank_Trend_Percentage, 
                    global::System.Nullable<decimal> Original_Current_Yearly_Rank_Trend_Percentage) {
            return this.Update(Marker_Tag, Address, City, State, Country, Latitude, Longitude, Is_Recurring_Event, Current_Daily_Count, Current_Monthly_Count, Current_Yearly_Count, Current_Daily_Count_Trend, Current_Monthly_Count_Trend, Current_Yearly_Count_Trend, Current_Daily_Count_Percentage, Current_Yearly_Count_Trend_Percentage, Current_Monthly_Count_Trend_Percentage, Current_Daily_Rank, Current_Monthly_Rank, Current_Yearly_Rank, Current_Daily_Rank_Trend, Current_Monthly_Rank_Trend, Current_Yearly_Rank_Trend, Current_Daily_Rank_Trend_Percentage, Current_Monthly_Rank_Trend_Percentage, Current_Yearly_Rank_Trend_Percentage, Original_Marker_ID, Original_Marker_Tag, Original_Address, Original_City, Original_State, Original_Country, Original_Latitude, Original_Longitude, Original_Is_Recurring_Event, Original_Current_Daily_Count, Original_Current_Monthly_Count, Original_Current_Yearly_Count, Original_Current_Daily_Count_Trend, Original_Current_Monthly_Count_Trend, Original_Current_Yearly_Count_Trend, Original_Current_Daily_Count_Percentage, Original_Current_Yearly_Count_Trend_Percentage, Original_Current_Monthly_Count_Trend_Percentage, Original_Current_Daily_Rank, Original_Current_Monthly_Rank, Original_Current_Yearly_Rank, Original_Current_Daily_Rank_Trend, Original_Current_Monthly_Rank_Trend, Original_Current_Yearly_Rank_Trend, Original_Current_Daily_Rank_Trend_Percentage, Original_Current_Monthly_Rank_Trend_Percentage, Original_Current_Yearly_Rank_Trend_Percentage, Original_Marker_ID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Connotation_KeywordTableAdapter _connotation_KeywordTableAdapter;
        
        private Event_MarkerTableAdapter _event_MarkerTableAdapter;
        
        private KeywordTableAdapter _keywordTableAdapter;
        
        private Marker_ConnotationTableAdapter _marker_ConnotationTableAdapter;
        
        private MarkerTableAdapter _markerTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Connotation_KeywordTableAdapter Connotation_KeywordTableAdapter {
            get {
                return this._connotation_KeywordTableAdapter;
            }
            set {
                this._connotation_KeywordTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Event_MarkerTableAdapter Event_MarkerTableAdapter {
            get {
                return this._event_MarkerTableAdapter;
            }
            set {
                this._event_MarkerTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public KeywordTableAdapter KeywordTableAdapter {
            get {
                return this._keywordTableAdapter;
            }
            set {
                this._keywordTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Marker_ConnotationTableAdapter Marker_ConnotationTableAdapter {
            get {
                return this._marker_ConnotationTableAdapter;
            }
            set {
                this._marker_ConnotationTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MarkerTableAdapter MarkerTableAdapter {
            get {
                return this._markerTableAdapter;
            }
            set {
                this._markerTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._connotation_KeywordTableAdapter != null) 
                            && (this._connotation_KeywordTableAdapter.Connection != null))) {
                    return this._connotation_KeywordTableAdapter.Connection;
                }
                if (((this._event_MarkerTableAdapter != null) 
                            && (this._event_MarkerTableAdapter.Connection != null))) {
                    return this._event_MarkerTableAdapter.Connection;
                }
                if (((this._keywordTableAdapter != null) 
                            && (this._keywordTableAdapter.Connection != null))) {
                    return this._keywordTableAdapter.Connection;
                }
                if (((this._marker_ConnotationTableAdapter != null) 
                            && (this._marker_ConnotationTableAdapter.Connection != null))) {
                    return this._marker_ConnotationTableAdapter.Connection;
                }
                if (((this._markerTableAdapter != null) 
                            && (this._markerTableAdapter.Connection != null))) {
                    return this._markerTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._connotation_KeywordTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._event_MarkerTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._keywordTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._marker_ConnotationTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._markerTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DSParameter dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._keywordTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Keyword.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._keywordTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._marker_ConnotationTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Marker_Connotation.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._marker_ConnotationTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._markerTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Marker.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._markerTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._event_MarkerTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Event_Marker.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._event_MarkerTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._connotation_KeywordTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Connotation_Keyword.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._connotation_KeywordTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DSParameter dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._keywordTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Keyword.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._keywordTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._marker_ConnotationTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Marker_Connotation.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._marker_ConnotationTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._markerTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Marker.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._markerTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._event_MarkerTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Event_Marker.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._event_MarkerTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._connotation_KeywordTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Connotation_Keyword.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._connotation_KeywordTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DSParameter dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._connotation_KeywordTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Connotation_Keyword.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._connotation_KeywordTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._event_MarkerTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Event_Marker.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._event_MarkerTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._markerTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Marker.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._markerTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._marker_ConnotationTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Marker_Connotation.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._marker_ConnotationTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._keywordTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Keyword.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._keywordTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DSParameter dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._connotation_KeywordTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._connotation_KeywordTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._event_MarkerTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._event_MarkerTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._keywordTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._keywordTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._marker_ConnotationTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._marker_ConnotationTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._markerTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._markerTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._connotation_KeywordTableAdapter != null)) {
                    revertConnections.Add(this._connotation_KeywordTableAdapter, this._connotation_KeywordTableAdapter.Connection);
                    this._connotation_KeywordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._connotation_KeywordTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._connotation_KeywordTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._connotation_KeywordTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._connotation_KeywordTableAdapter.Adapter);
                    }
                }
                if ((this._event_MarkerTableAdapter != null)) {
                    revertConnections.Add(this._event_MarkerTableAdapter, this._event_MarkerTableAdapter.Connection);
                    this._event_MarkerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._event_MarkerTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._event_MarkerTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._event_MarkerTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._event_MarkerTableAdapter.Adapter);
                    }
                }
                if ((this._keywordTableAdapter != null)) {
                    revertConnections.Add(this._keywordTableAdapter, this._keywordTableAdapter.Connection);
                    this._keywordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._keywordTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._keywordTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._keywordTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._keywordTableAdapter.Adapter);
                    }
                }
                if ((this._marker_ConnotationTableAdapter != null)) {
                    revertConnections.Add(this._marker_ConnotationTableAdapter, this._marker_ConnotationTableAdapter.Connection);
                    this._marker_ConnotationTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._marker_ConnotationTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._marker_ConnotationTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._marker_ConnotationTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._marker_ConnotationTableAdapter.Adapter);
                    }
                }
                if ((this._markerTableAdapter != null)) {
                    revertConnections.Add(this._markerTableAdapter, this._markerTableAdapter.Connection);
                    this._markerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._markerTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._markerTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._markerTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._markerTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._connotation_KeywordTableAdapter != null)) {
                    this._connotation_KeywordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._connotation_KeywordTableAdapter]));
                    this._connotation_KeywordTableAdapter.Transaction = null;
                }
                if ((this._event_MarkerTableAdapter != null)) {
                    this._event_MarkerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._event_MarkerTableAdapter]));
                    this._event_MarkerTableAdapter.Transaction = null;
                }
                if ((this._keywordTableAdapter != null)) {
                    this._keywordTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._keywordTableAdapter]));
                    this._keywordTableAdapter.Transaction = null;
                }
                if ((this._marker_ConnotationTableAdapter != null)) {
                    this._marker_ConnotationTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._marker_ConnotationTableAdapter]));
                    this._marker_ConnotationTableAdapter.Transaction = null;
                }
                if ((this._markerTableAdapter != null)) {
                    this._markerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._markerTableAdapter]));
                    this._markerTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591